
DeskBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006e90  08006e90  00007e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007030  08007030  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007030  08007030  00008030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007038  08007038  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007038  08007038  00008038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800703c  0800703c  0000803c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007040  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  20000070  080070b0  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  080070b0  000097ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011064  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f6  00000000  00000000  0001a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b96  00000000  00000000  0001d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c4b  00000000  00000000  0001e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124d2  00000000  00000000  000360c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a94b  00000000  00000000  0004859b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2ee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  000e2f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e7518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e78 	.word	0x08006e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006e78 	.word	0x08006e78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <PID_Init>:
 *      Author: cole
 */
#include "controller.h"

void PID_Init(PIDController* pid, float kp, float ki, float kd, int integral_clamp, int tolerable_error, int out_min, int out_max)
{
 80005bc:	b480      	push	{r7}
 80005be:	b089      	sub	sp, #36	@ 0x24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	61f8      	str	r0, [r7, #28]
 80005c4:	ed87 0a06 	vstr	s0, [r7, #24]
 80005c8:	edc7 0a05 	vstr	s1, [r7, #20]
 80005cc:	ed87 1a04 	vstr	s2, [r7, #16]
 80005d0:	60f9      	str	r1, [r7, #12]
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	607b      	str	r3, [r7, #4]
	pid->kp = kp;
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
	pid->output = 0;
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
	pid->integral_clamp = integral_clamp;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	611a      	str	r2, [r3, #16]
	pid->out_min = out_min;
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	621a      	str	r2, [r3, #32]
	pid->out_max = out_max;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800060a:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->tolerable_error = tolerable_error;
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	bf00      	nop
 8000614:	3724      	adds	r7, #36	@ 0x24
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <PID_Update>:

int PID_Update(PIDController* pid, int setpoint, int measured, int dt)
{
 8000620:	b480      	push	{r7}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	603b      	str	r3, [r7, #0]
	int error = setpoint - measured;
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	617b      	str	r3, [r7, #20]

	pid->integral += error*dt/40; //scale integral error down
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	68da      	ldr	r2, [r3, #12]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	6839      	ldr	r1, [r7, #0]
 800063e:	fb01 f303 	mul.w	r3, r1, r3
 8000642:	493e      	ldr	r1, [pc, #248]	@ (800073c <PID_Update+0x11c>)
 8000644:	fb81 0103 	smull	r0, r1, r1, r3
 8000648:	1109      	asrs	r1, r1, #4
 800064a:	17db      	asrs	r3, r3, #31
 800064c:	1acb      	subs	r3, r1, r3
 800064e:	441a      	add	r2, r3
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	60da      	str	r2, [r3, #12]
	//clamp integral
	if (pid->integral > pid->integral_clamp)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	dd04      	ble.n	800066a <PID_Update+0x4a>
	{
		pid->integral = pid->integral_clamp;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	691a      	ldr	r2, [r3, #16]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	e00b      	b.n	8000682 <PID_Update+0x62>
	}
	else if  (pid->integral < -1*pid->integral_clamp)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	425b      	negs	r3, r3
 8000674:	429a      	cmp	r2, r3
 8000676:	da04      	bge.n	8000682 <PID_Update+0x62>
	{
		pid->integral = -1*pid->integral_clamp;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	425a      	negs	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	60da      	str	r2, [r3, #12]
	}

	if(abs(error) < pid->tolerable_error)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000688:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	429a      	cmp	r2, r3
 8000692:	da02      	bge.n	800069a <PID_Update+0x7a>
	{
		pid->integral = 0;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
	}

	int derivative = (error - pid->prev_error)/dt;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80006a8:	613b      	str	r3, [r7, #16]

	pid->output = pid->kp*error + pid->ki*pid->integral + pid->kd*derivative;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	ed93 7a00 	vldr	s14, [r3]
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	edd3 6a02 	vldr	s13, [r3, #8]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	ee07 3a90 	vmov	s15, r3
 80006e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f4:	ee17 2a90 	vmov	r2, s15
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	61da      	str	r2, [r3, #28]

	// Clamp output
	if (pid->output > pid->out_max)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	69da      	ldr	r2, [r3, #28]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000704:	429a      	cmp	r2, r3
 8000706:	dd04      	ble.n	8000712 <PID_Update+0xf2>
	{
		pid->output = pid->out_max;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	61da      	str	r2, [r3, #28]
 8000710:	e009      	b.n	8000726 <PID_Update+0x106>
	}
	else if (pid->output < pid->out_min)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	429a      	cmp	r2, r3
 800071c:	da03      	bge.n	8000726 <PID_Update+0x106>
	{
		pid->output = pid->out_min;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6a1a      	ldr	r2, [r3, #32]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	61da      	str	r2, [r3, #28]
	}

	pid->prev_error = error;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	619a      	str	r2, [r3, #24]
	return pid->output;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	69db      	ldr	r3, [r3, #28]
}
 8000730:	4618      	mov	r0, r3
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	66666667 	.word	0x66666667

08000740 <Read_Encoder>:

#include "joint.h"

//HELPER FUNCTIONS:
void Read_Encoder(joint* joint, int dt_ms)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]

	int curr_count = __HAL_TIM_GET_COUNTER(joint->encoderHandle);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000752:	60bb      	str	r3, [r7, #8]
	int delta = curr_count - joint->previousEncoderCount;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	60fb      	str	r3, [r7, #12]

	 // Handle 16-bit counter overflow/underflow
	if (delta > 32767) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000764:	db04      	blt.n	8000770 <Read_Encoder+0x30>
		delta -= 65536;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	e007      	b.n	8000780 <Read_Encoder+0x40>
	}
	else if (delta < -32768) {
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000776:	da03      	bge.n	8000780 <Read_Encoder+0x40>
		delta += 65536;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800077e:	60fb      	str	r3, [r7, #12]
	}
	if (!joint->encoder_init) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <Read_Encoder+0x52>
		delta = 0;  // Avoid spike on first call
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	    joint->encoder_init = 1;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	671a      	str	r2, [r3, #112]	@ 0x70
	}

	joint->previousEncoderCount = curr_count;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	66da      	str	r2, [r3, #108]	@ 0x6c

	joint->actual_velocity = delta / dt_ms;
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	fb92 f2f3 	sdiv	r2, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	65da      	str	r2, [r3, #92]	@ 0x5c
	joint->actual_position = joint->actual_position + delta;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	441a      	add	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <Joint_Init>:

//DEF FUNCTIONS
void Joint_Init(joint* joint, motor_t* p_mot, TIM_HandleTypeDef* encoderHandle,
		PIDController* pos_pid,PIDController* vel_pid)
{
 80007bc:	b4b0      	push	{r4, r5, r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	603b      	str	r3, [r7, #0]
	joint->position_pid = *pos_pid;
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4614      	mov	r4, r2
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007de:	e884 0003 	stmia.w	r4, {r0, r1}
	joint->velocity_pid = *vel_pid;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6a3a      	ldr	r2, [r7, #32]
 80007e6:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80007ea:	4615      	mov	r5, r2
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f8:	e884 0003 	stmia.w	r4, {r0, r1}

	joint->desired_position = 0;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2200      	movs	r2, #0
 8000800:	651a      	str	r2, [r3, #80]	@ 0x50
	joint->desired_velocity = 0;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2200      	movs	r2, #0
 8000806:	655a      	str	r2, [r3, #84]	@ 0x54
	joint->actual_position = 0;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	659a      	str	r2, [r3, #88]	@ 0x58
	joint->actual_velocity = 0;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2200      	movs	r2, #0
 8000812:	65da      	str	r2, [r3, #92]	@ 0x5c
	joint->control_output = 0;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	661a      	str	r2, [r3, #96]	@ 0x60

	joint->p_mot = p_mot;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	665a      	str	r2, [r3, #100]	@ 0x64
	joint->encoderHandle = encoderHandle;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	669a      	str	r2, [r3, #104]	@ 0x68
	joint->enable = 1;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2201      	movs	r2, #1
 800082a:	675a      	str	r2, [r3, #116]	@ 0x74

	joint->previousEncoderCount = 0;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2200      	movs	r2, #0
 8000830:	66da      	str	r2, [r3, #108]	@ 0x6c
	joint->encoder_init = 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bcb0      	pop	{r4, r5, r7}
 8000840:	4770      	bx	lr
	...

08000844 <Joint_Update>:

void Joint_Update(joint* joint, int dt_ms)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	static int outer_loop_counter = 0;

	Read_Encoder(joint,dt_ms); //gets position and velocity
 800084e:	6839      	ldr	r1, [r7, #0]
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff75 	bl	8000740 <Read_Encoder>

	if(!joint->enable){
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800085a:	2b00      	cmp	r3, #0
 800085c:	d035      	beq.n	80008ca <Joint_Update+0x86>
		return;
	}
	//run outer loop every 10 calls
	if(outer_loop_counter == 0)
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <Joint_Update+0x90>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10f      	bne.n	8000886 <Joint_Update+0x42>
	{
		joint->desired_velocity = PID_Update(&joint->position_pid,
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4622      	mov	r2, r4
 800087c:	f7ff fed0 	bl	8000620 <PID_Update>
 8000880:	4602      	mov	r2, r0
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	655a      	str	r2, [r3, #84]	@ 0x54
											joint->desired_position,
											joint->actual_position,10*dt_ms);
	}
	//inner loop
	joint->control_output = PID_Update(&joint->velocity_pid,
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f7ff fec3 	bl	8000620 <PID_Update>
 800089a:	4602      	mov	r2, r0
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	661a      	str	r2, [r3, #96]	@ 0x60
										joint->desired_velocity,
										joint->actual_velocity,dt_ms);
	Set_Duty(joint->p_mot,joint->control_output);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a8:	4619      	mov	r1, r3
 80008aa:	4610      	mov	r0, r2
 80008ac:	f000 fe53 	bl	8001556 <Set_Duty>

	outer_loop_counter++;
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <Joint_Update+0x90>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <Joint_Update+0x90>)
 80008b8:	6013      	str	r3, [r2, #0]
	if(outer_loop_counter >= 2){ //ratio of outer loop to inner loop control
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <Joint_Update+0x90>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	dd04      	ble.n	80008cc <Joint_Update+0x88>
		outer_loop_counter = 0;
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <Joint_Update+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e000      	b.n	80008cc <Joint_Update+0x88>
		return;
 80008ca:	bf00      	nop
	}
}
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000008c 	.word	0x2000008c

080008d8 <Joint_Home>:

bool Joint_Home(joint* joint,LimitSwitch* limswitch, int direction, int speed)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	603b      	str	r3, [r7, #0]
	joint->enable = 0;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	675a      	str	r2, [r3, #116]	@ 0x74
	// 1. Set the motor to move in a fixed direction (e.g., -1 or 1)
	Set_Duty(joint->p_mot, direction * speed);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	fb02 f303 	mul.w	r3, r2, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	f000 fe2c 	bl	8001556 <Set_Duty>

	// 2. Continuously check the limit switch
	if (LimitSwitch_IsTriggered(limswitch)) {
 80008fe:	68b8      	ldr	r0, [r7, #8]
 8000900:	f000 f834 	bl	800096c <LimitSwitch_IsTriggered>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d018      	beq.n	800093c <Joint_Home+0x64>
		Set_Duty(joint->p_mot, 0);             // Stop motor
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fe20 	bl	8001556 <Set_Duty>
		joint->actual_position = 0;                 // Zero the software encoder position
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2200      	movs	r2, #0
 800091a:	659a      	str	r2, [r3, #88]	@ 0x58
		__HAL_TIM_SET_COUNTER(joint->encoderHandle, 0); // Reset hardware encoder
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
		joint->encoder_init = 0;             // Reset filtering state
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2200      	movs	r2, #0
 800092a:	671a      	str	r2, [r3, #112]	@ 0x70
		joint->desired_position = 0;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2200      	movs	r2, #0
 8000930:	651a      	str	r2, [r3, #80]	@ 0x50
		joint->enable = 1;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2201      	movs	r2, #1
 8000936:	675a      	str	r2, [r3, #116]	@ 0x74
		return true;  // Homed successfully
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <Joint_Home+0x66>
	}

	return false;  // Still homing
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <LimitSwitch_Init>:
#ifndef SRC_LIMIT_SWITCH_C_
#define SRC_LIMIT_SWITCH_C_

#include "limit_switch.h"

void LimitSwitch_Init(LimitSwitch *switch_obj, GPIO_TypeDef *port, uint16_t pin) {
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	4613      	mov	r3, r2
 8000952:	80fb      	strh	r3, [r7, #6]
    switch_obj->port = port;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	601a      	str	r2, [r3, #0]
    switch_obj->pin = pin;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	88fa      	ldrh	r2, [r7, #6]
 800095e:	809a      	strh	r2, [r3, #4]

    // Assume GPIO is already configured elsewhere in HAL_Init or MX_GPIO_Init
    // Otherwise, you would configure GPIO as input here.
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LimitSwitch_IsTriggered>:

uint8_t LimitSwitch_IsTriggered(LimitSwitch *switch_obj) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(switch_obj->port, switch_obj->pin) == GPIO_PIN_RESET;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	889b      	ldrh	r3, [r3, #4]
 800097c:	4619      	mov	r1, r3
 800097e:	4610      	mov	r0, r2
 8000980:	f002 fb18 	bl	8002fb4 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
    // Use GPIO_PIN_SET if your switch is active-high instead
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f001 fcfd 	bl	800239c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f9c5 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f000 fce1 	bl	800136c <MX_GPIO_Init>
  MX_ADC1_Init();
 80009aa:	f000 fa29 	bl	8000e00 <MX_ADC1_Init>
  MX_TIM1_Init();
 80009ae:	f000 fa79 	bl	8000ea4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009b2:	f000 facf 	bl	8000f54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009b6:	f000 fb21 	bl	8000ffc <MX_TIM3_Init>
  MX_TIM4_Init();
 80009ba:	f000 fb73 	bl	80010a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009be:	f000 fbeb 	bl	8001198 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80009c2:	f000 fca9 	bl	8001318 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80009c6:	f000 fc83 	bl	80012d0 <MX_TIM10_Init>
  MX_TIM9_Init();
 80009ca:	f000 fc49 	bl	8001260 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80009ce:	2100      	movs	r1, #0
 80009d0:	48b5      	ldr	r0, [pc, #724]	@ (8000ca8 <main+0x310>)
 80009d2:	f003 f8bb 	bl	8003b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80009d6:	2104      	movs	r1, #4
 80009d8:	48b3      	ldr	r0, [pc, #716]	@ (8000ca8 <main+0x310>)
 80009da:	f003 f8b7 	bl	8003b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80009de:	2108      	movs	r1, #8
 80009e0:	48b1      	ldr	r0, [pc, #708]	@ (8000ca8 <main+0x310>)
 80009e2:	f003 f8b3 	bl	8003b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80009e6:	210c      	movs	r1, #12
 80009e8:	48af      	ldr	r0, [pc, #700]	@ (8000ca8 <main+0x310>)
 80009ea:	f003 f8af 	bl	8003b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80009ee:	2100      	movs	r1, #0
 80009f0:	48ae      	ldr	r0, [pc, #696]	@ (8000cac <main+0x314>)
 80009f2:	f003 f8ab 	bl	8003b4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 80009f6:	2104      	movs	r1, #4
 80009f8:	48ac      	ldr	r0, [pc, #688]	@ (8000cac <main+0x314>)
 80009fa:	f003 f8a7 	bl	8003b4c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80009fe:	213c      	movs	r1, #60	@ 0x3c
 8000a00:	48ab      	ldr	r0, [pc, #684]	@ (8000cb0 <main+0x318>)
 8000a02:	f003 f9f9 	bl	8003df8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000a06:	213c      	movs	r1, #60	@ 0x3c
 8000a08:	48aa      	ldr	r0, [pc, #680]	@ (8000cb4 <main+0x31c>)
 8000a0a:	f003 f9f5 	bl	8003df8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000a0e:	213c      	movs	r1, #60	@ 0x3c
 8000a10:	48a9      	ldr	r0, [pc, #676]	@ (8000cb8 <main+0x320>)
 8000a12:	f003 f9f1 	bl	8003df8 <HAL_TIM_Encoder_Start>

  Motor_Init(&motor_1,&htim4,TIM_CHANNEL_1,TIM_CHANNEL_2);
 8000a16:	2304      	movs	r3, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	49a3      	ldr	r1, [pc, #652]	@ (8000ca8 <main+0x310>)
 8000a1c:	48a7      	ldr	r0, [pc, #668]	@ (8000cbc <main+0x324>)
 8000a1e:	f000 fd81 	bl	8001524 <Motor_Init>
  Motor_Init(&motor_2,&htim4,TIM_CHANNEL_3,TIM_CHANNEL_4);
 8000a22:	230c      	movs	r3, #12
 8000a24:	2208      	movs	r2, #8
 8000a26:	49a0      	ldr	r1, [pc, #640]	@ (8000ca8 <main+0x310>)
 8000a28:	48a5      	ldr	r0, [pc, #660]	@ (8000cc0 <main+0x328>)
 8000a2a:	f000 fd7b 	bl	8001524 <Motor_Init>
  Motor_Init(&motor_3,&htim5,TIM_CHANNEL_1,TIM_CHANNEL_2);
 8000a2e:	2304      	movs	r3, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	499e      	ldr	r1, [pc, #632]	@ (8000cac <main+0x314>)
 8000a34:	48a3      	ldr	r0, [pc, #652]	@ (8000cc4 <main+0x32c>)
 8000a36:	f000 fd75 	bl	8001524 <Motor_Init>

  //PID_Init(PIDController* pid, float kp, float ki, float kd, float out_min, float out_max);
  PID_Init(&motor1_pos,0.4,0.062,40,750,15,-150,150);//max/min is ticks/ms
 8000a3a:	2396      	movs	r3, #150	@ 0x96
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	f06f 0395 	mvn.w	r3, #149	@ 0x95
 8000a42:	220f      	movs	r2, #15
 8000a44:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8000a48:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8000cc8 <main+0x330>
 8000a4c:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8000ccc <main+0x334>
 8000a50:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8000cd0 <main+0x338>
 8000a54:	489f      	ldr	r0, [pc, #636]	@ (8000cd4 <main+0x33c>)
 8000a56:	f7ff fdb1 	bl	80005bc <PID_Init>
  PID_Init(&motor1_vel,0.4,0.085,60,350,3,-80,80); //output is PWM signal
 8000a5a:	2350      	movs	r3, #80	@ 0x50
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8000a62:	2203      	movs	r2, #3
 8000a64:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8000a68:	ed9f 1a9b 	vldr	s2, [pc, #620]	@ 8000cd8 <main+0x340>
 8000a6c:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 8000cdc <main+0x344>
 8000a70:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8000cd0 <main+0x338>
 8000a74:	489a      	ldr	r0, [pc, #616]	@ (8000ce0 <main+0x348>)
 8000a76:	f7ff fda1 	bl	80005bc <PID_Init>

  PID_Init(&motor2_pos,0.4,0.062,0,750,20,-100,100);//max/min is ticks/ms
 8000a7a:	2364      	movs	r3, #100	@ 0x64
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000a82:	2214      	movs	r2, #20
 8000a84:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8000a88:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8000ce4 <main+0x34c>
 8000a8c:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 8000ccc <main+0x334>
 8000a90:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8000cd0 <main+0x338>
 8000a94:	4894      	ldr	r0, [pc, #592]	@ (8000ce8 <main+0x350>)
 8000a96:	f7ff fd91 	bl	80005bc <PID_Init>
  PID_Init(&motor2_vel,0.4,0.085,0,350,4,-80,80); //output is PWM signal
 8000a9a:	2350      	movs	r3, #80	@ 0x50
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8000aa8:	ed9f 1a8e 	vldr	s2, [pc, #568]	@ 8000ce4 <main+0x34c>
 8000aac:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8000cdc <main+0x344>
 8000ab0:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8000cd0 <main+0x338>
 8000ab4:	488d      	ldr	r0, [pc, #564]	@ (8000cec <main+0x354>)
 8000ab6:	f7ff fd81 	bl	80005bc <PID_Init>

  PID_Init(&motor3_pos,0.4,0.062,0,750,20,-200,200);//max/min is ticks/ms
 8000aba:	23c8      	movs	r3, #200	@ 0xc8
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000ac2:	2214      	movs	r2, #20
 8000ac4:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8000ac8:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 8000ce4 <main+0x34c>
 8000acc:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 8000ccc <main+0x334>
 8000ad0:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8000cd0 <main+0x338>
 8000ad4:	4886      	ldr	r0, [pc, #536]	@ (8000cf0 <main+0x358>)
 8000ad6:	f7ff fd71 	bl	80005bc <PID_Init>
  PID_Init(&motor3_vel,0.4,0.085,0,350,4,-80,80); //output is PWM signal
 8000ada:	2350      	movs	r3, #80	@ 0x50
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8000ae8:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8000ce4 <main+0x34c>
 8000aec:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8000cdc <main+0x344>
 8000af0:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8000cd0 <main+0x338>
 8000af4:	487f      	ldr	r0, [pc, #508]	@ (8000cf4 <main+0x35c>)
 8000af6:	f7ff fd61 	bl	80005bc <PID_Init>

  //Joint_Init(Joint* joint, motor* p_mot, TIM_HandleTypeDef* encoderHandle,
	//PIDController* pos_pid,PIDController* vel_pid);
  Joint_Init(&shoulderYaw,&motor_1,&htim1,&motor1_pos,&motor1_vel);
 8000afa:	4b79      	ldr	r3, [pc, #484]	@ (8000ce0 <main+0x348>)
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	4b75      	ldr	r3, [pc, #468]	@ (8000cd4 <main+0x33c>)
 8000b00:	4a6b      	ldr	r2, [pc, #428]	@ (8000cb0 <main+0x318>)
 8000b02:	496e      	ldr	r1, [pc, #440]	@ (8000cbc <main+0x324>)
 8000b04:	487c      	ldr	r0, [pc, #496]	@ (8000cf8 <main+0x360>)
 8000b06:	f7ff fe59 	bl	80007bc <Joint_Init>
  Joint_Init(&shoulderPitch,&motor_2,&htim2,&motor2_pos,&motor2_vel);
 8000b0a:	4b78      	ldr	r3, [pc, #480]	@ (8000cec <main+0x354>)
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	4b76      	ldr	r3, [pc, #472]	@ (8000ce8 <main+0x350>)
 8000b10:	4a68      	ldr	r2, [pc, #416]	@ (8000cb4 <main+0x31c>)
 8000b12:	496b      	ldr	r1, [pc, #428]	@ (8000cc0 <main+0x328>)
 8000b14:	4879      	ldr	r0, [pc, #484]	@ (8000cfc <main+0x364>)
 8000b16:	f7ff fe51 	bl	80007bc <Joint_Init>
  Joint_Init(&elbowPitch,&motor_3,&htim3,&motor3_pos,&motor3_vel);
 8000b1a:	4b76      	ldr	r3, [pc, #472]	@ (8000cf4 <main+0x35c>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	4b74      	ldr	r3, [pc, #464]	@ (8000cf0 <main+0x358>)
 8000b20:	4a65      	ldr	r2, [pc, #404]	@ (8000cb8 <main+0x320>)
 8000b22:	4968      	ldr	r1, [pc, #416]	@ (8000cc4 <main+0x32c>)
 8000b24:	4876      	ldr	r0, [pc, #472]	@ (8000d00 <main+0x368>)
 8000b26:	f7ff fe49 	bl	80007bc <Joint_Init>

  LimitSwitch_Init(&shoulderYawLMSW,GPIOC, GPIO_PIN_14);
 8000b2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b2e:	4975      	ldr	r1, [pc, #468]	@ (8000d04 <main+0x36c>)
 8000b30:	4875      	ldr	r0, [pc, #468]	@ (8000d08 <main+0x370>)
 8000b32:	f7ff ff08 	bl	8000946 <LimitSwitch_Init>
  LimitSwitch_Init(&shoulderPitchLMSW,GPIOA,GPIO_PIN_11);
 8000b36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b3a:	4974      	ldr	r1, [pc, #464]	@ (8000d0c <main+0x374>)
 8000b3c:	4874      	ldr	r0, [pc, #464]	@ (8000d10 <main+0x378>)
 8000b3e:	f7ff ff02 	bl	8000946 <LimitSwitch_Init>
  LimitSwitch_Init(&elbowPitchLMSW,GPIOC,GPIO_PIN_15);
 8000b42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b46:	496f      	ldr	r1, [pc, #444]	@ (8000d04 <main+0x36c>)
 8000b48:	4872      	ldr	r0, [pc, #456]	@ (8000d14 <main+0x37c>)
 8000b4a:	f7ff fefc 	bl	8000946 <LimitSwitch_Init>

  HAL_TIM_Base_Start_IT(&htim10);
 8000b4e:	4872      	ldr	r0, [pc, #456]	@ (8000d18 <main+0x380>)
 8000b50:	f002 ff4a 	bl	80039e8 <HAL_TIM_Base_Start_IT>
  servo_init_timer(&htim9);
 8000b54:	4871      	ldr	r0, [pc, #452]	@ (8000d1c <main+0x384>)
 8000b56:	f000 fe39 	bl	80017cc <servo_init_timer>

  int8_t gripperServo = servo_add(GPIOA, 3);  // PA2 - Gripper
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	486b      	ldr	r0, [pc, #428]	@ (8000d0c <main+0x374>)
 8000b5e:	f000 fe45 	bl	80017ec <servo_add>
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  int8_t wristServo = servo_add(GPIOA, 2);  // PA3 - Wrist
 8000b66:	2102      	movs	r1, #2
 8000b68:	4868      	ldr	r0, [pc, #416]	@ (8000d0c <main+0x374>)
 8000b6a:	f000 fe3f 	bl	80017ec <servo_add>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71bb      	strb	r3, [r7, #6]

  UART_Init(&huart1);
 8000b72:	486b      	ldr	r0, [pc, #428]	@ (8000d20 <main+0x388>)
 8000b74:	f001 fa58 	bl	8002028 <UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (!(calibrated[0] && calibrated[1] && calibrated[2])) {
 8000b78:	e033      	b.n	8000be2 <main+0x24a>
		  // Loop until all flags are true
		  if(!calibrated[0])
 8000b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8000d24 <main+0x38c>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	f083 0301 	eor.w	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d009      	beq.n	8000b9c <main+0x204>
		  {
			  calibrated[0] = Joint_Home(&shoulderYaw,&shoulderYawLMSW,1,60);
 8000b88:	233c      	movs	r3, #60	@ 0x3c
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	495e      	ldr	r1, [pc, #376]	@ (8000d08 <main+0x370>)
 8000b8e:	485a      	ldr	r0, [pc, #360]	@ (8000cf8 <main+0x360>)
 8000b90:	f7ff fea2 	bl	80008d8 <Joint_Home>
 8000b94:	4603      	mov	r3, r0
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b62      	ldr	r3, [pc, #392]	@ (8000d24 <main+0x38c>)
 8000b9a:	701a      	strb	r2, [r3, #0]
		  }
		  if(!calibrated[1])
 8000b9c:	4b61      	ldr	r3, [pc, #388]	@ (8000d24 <main+0x38c>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	f083 0301 	eor.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d009      	beq.n	8000bbe <main+0x226>
		  {
			  calibrated[1] = Joint_Home(&shoulderPitch,&shoulderPitchLMSW,1,60);
 8000baa:	233c      	movs	r3, #60	@ 0x3c
 8000bac:	2201      	movs	r2, #1
 8000bae:	4958      	ldr	r1, [pc, #352]	@ (8000d10 <main+0x378>)
 8000bb0:	4852      	ldr	r0, [pc, #328]	@ (8000cfc <main+0x364>)
 8000bb2:	f7ff fe91 	bl	80008d8 <Joint_Home>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b5a      	ldr	r3, [pc, #360]	@ (8000d24 <main+0x38c>)
 8000bbc:	705a      	strb	r2, [r3, #1]
		  }
		  if(!calibrated[2])
 8000bbe:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <main+0x38c>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	f083 0301 	eor.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <main+0x24a>
		  {
			  calibrated[2] = Joint_Home(&elbowPitch,&elbowPitchLMSW,-1,75);
 8000bcc:	234b      	movs	r3, #75	@ 0x4b
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	4950      	ldr	r1, [pc, #320]	@ (8000d14 <main+0x37c>)
 8000bd4:	484a      	ldr	r0, [pc, #296]	@ (8000d00 <main+0x368>)
 8000bd6:	f7ff fe7f 	bl	80008d8 <Joint_Home>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <main+0x38c>)
 8000be0:	709a      	strb	r2, [r3, #2]
	  while (!(calibrated[0] && calibrated[1] && calibrated[2])) {
 8000be2:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <main+0x38c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f083 0301 	eor.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1c4      	bne.n	8000b7a <main+0x1e2>
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d24 <main+0x38c>)
 8000bf2:	785b      	ldrb	r3, [r3, #1]
 8000bf4:	f083 0301 	eor.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1bd      	bne.n	8000b7a <main+0x1e2>
 8000bfe:	4b49      	ldr	r3, [pc, #292]	@ (8000d24 <main+0x38c>)
 8000c00:	789b      	ldrb	r3, [r3, #2]
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1b6      	bne.n	8000b7a <main+0x1e2>
		  }
	  }
	  UART_ProcessReceivedData(); // Non-blocking parse handler
 8000c0c:	f001 fab0 	bl	8002170 <UART_ProcessReceivedData>
	      if (UART_GetLatestAngles(&angles)) {
 8000c10:	4845      	ldr	r0, [pc, #276]	@ (8000d28 <main+0x390>)
 8000c12:	f001 fb07 	bl	8002224 <UART_GetLatestAngles>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0e2      	beq.n	8000be2 <main+0x24a>
	    	  //27.125 encoder ticks/deg for base
	    	  //108.5 for the shoulder and elbow
	    	  //replace this with a IK solver in the future...
	    	  commands[0] = (int)13.56*angles.theta1;
 8000c1c:	4b42      	ldr	r3, [pc, #264]	@ (8000d28 <main+0x390>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a40      	ldr	r2, [pc, #256]	@ (8000d2c <main+0x394>)
 8000c2c:	6013      	str	r3, [r2, #0]
	    	  commands[1] = -1*(int)54.25*angles.theta2;
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <main+0x390>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	4a3c      	ldr	r2, [pc, #240]	@ (8000d2c <main+0x394>)
 8000c3c:	6053      	str	r3, [r2, #4]
	    	  commands[2] = (int)54.25*angles.theta3;
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d28 <main+0x390>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2236      	movs	r2, #54	@ 0x36
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4a38      	ldr	r2, [pc, #224]	@ (8000d2c <main+0x394>)
 8000c4a:	6093      	str	r3, [r2, #8]
	    	  commands[3] = angles.theta4;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	@ (8000d28 <main+0x390>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a36      	ldr	r2, [pc, #216]	@ (8000d2c <main+0x394>)
 8000c52:	60d3      	str	r3, [r2, #12]
	    	  commands[4] = angles.theta5;
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <main+0x390>)
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	4a34      	ldr	r2, [pc, #208]	@ (8000d2c <main+0x394>)
 8000c5a:	6113      	str	r3, [r2, #16]
	    	  shoulderYaw.desired_position = commands[0];
 8000c5c:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <main+0x394>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <main+0x360>)
 8000c62:	6513      	str	r3, [r2, #80]	@ 0x50
	    	  shoulderPitch.desired_position = commands[1];
 8000c64:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <main+0x394>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a24      	ldr	r2, [pc, #144]	@ (8000cfc <main+0x364>)
 8000c6a:	6513      	str	r3, [r2, #80]	@ 0x50
	    	  elbowPitch.desired_position = commands[2];
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <main+0x394>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <main+0x368>)
 8000c72:	6513      	str	r3, [r2, #80]	@ 0x50
	    	  servo_set_angle(wristServo,commands[3]);
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <main+0x394>)
 8000c78:	68d2      	ldr	r2, [r2, #12]
 8000c7a:	ee07 2a90 	vmov	s15, r2
 8000c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c82:	eeb0 0a67 	vmov.f32	s0, s15
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fde4 	bl	8001854 <servo_set_angle>
	    	  servo_set_angle(gripperServo,commands[4]);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <main+0x394>)
 8000c90:	6912      	ldr	r2, [r2, #16]
 8000c92:	ee07 2a90 	vmov	s15, r2
 8000c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fdd8 	bl	8001854 <servo_set_angle>
	  while (!(calibrated[0] && calibrated[1] && calibrated[2])) {
 8000ca4:	e79d      	b.n	8000be2 <main+0x24a>
 8000ca6:	bf00      	nop
 8000ca8:	200001b0 	.word	0x200001b0
 8000cac:	200001f8 	.word	0x200001f8
 8000cb0:	200000d8 	.word	0x200000d8
 8000cb4:	20000120 	.word	0x20000120
 8000cb8:	20000168 	.word	0x20000168
 8000cbc:	20000318 	.word	0x20000318
 8000cc0:	20000328 	.word	0x20000328
 8000cc4:	20000338 	.word	0x20000338
 8000cc8:	42200000 	.word	0x42200000
 8000ccc:	3d7df3b6 	.word	0x3d7df3b6
 8000cd0:	3ecccccd 	.word	0x3ecccccd
 8000cd4:	20000348 	.word	0x20000348
 8000cd8:	42700000 	.word	0x42700000
 8000cdc:	3dae147b 	.word	0x3dae147b
 8000ce0:	20000370 	.word	0x20000370
 8000ce4:	00000000 	.word	0x00000000
 8000ce8:	20000398 	.word	0x20000398
 8000cec:	200003c0 	.word	0x200003c0
 8000cf0:	200003e8 	.word	0x200003e8
 8000cf4:	20000410 	.word	0x20000410
 8000cf8:	20000438 	.word	0x20000438
 8000cfc:	200004b0 	.word	0x200004b0
 8000d00:	20000528 	.word	0x20000528
 8000d04:	40020800 	.word	0x40020800
 8000d08:	200005a0 	.word	0x200005a0
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	200005a8 	.word	0x200005a8
 8000d14:	200005b0 	.word	0x200005b0
 8000d18:	20000288 	.word	0x20000288
 8000d1c:	20000240 	.word	0x20000240
 8000d20:	200002d0 	.word	0x200002d0
 8000d24:	200005b8 	.word	0x200005b8
 8000d28:	200005bc 	.word	0x200005bc
 8000d2c:	20000000 	.word	0x20000000

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	@ 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2230      	movs	r2, #48	@ 0x30
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f004 ff9e 	bl	8005c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <SystemClock_Config+0xc8>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	4a26      	ldr	r2, [pc, #152]	@ (8000df8 <SystemClock_Config+0xc8>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <SystemClock_Config+0xc8>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <SystemClock_Config+0xcc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <SystemClock_Config+0xcc>)
 8000d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <SystemClock_Config+0xcc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000da4:	2348      	movs	r3, #72	@ 0x48
 8000da6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dac:	2303      	movs	r3, #3
 8000dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 f92f 	bl	8003018 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dc0:	f000 fbaa 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	2102      	movs	r1, #2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 fb91 	bl	8003508 <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dec:	f000 fb94 	bl	8001518 <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3750      	adds	r7, #80	@ 0x50
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40007000 	.word	0x40007000

08000e00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e14:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <MX_ADC1_Init+0x9c>)
 8000e16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e40:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <MX_ADC1_Init+0xa0>)
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e5e:	480e      	ldr	r0, [pc, #56]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e60:	f001 fb0e 	bl	8002480 <HAL_ADC_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 fb55 	bl	8001518 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_ADC1_Init+0x98>)
 8000e80:	f001 fb42 	bl	8002508 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e8a:	f000 fb45 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000090 	.word	0x20000090
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	0f000001 	.word	0x0f000001

08000ea4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	@ 0x30
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2224      	movs	r2, #36	@ 0x24
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fee4 	bl	8005c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000ec2:	4a23      	ldr	r2, [pc, #140]	@ (8000f50 <MX_TIM1_Init+0xac>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000ed4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f04:	2301      	movs	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000f18:	f002 fec8 	bl	8003cac <HAL_TIM_Encoder_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f22:	f000 faf9 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_TIM1_Init+0xa8>)
 8000f34:	f003 fd68 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f3e:	f000 faeb 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	@ 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000d8 	.word	0x200000d8
 8000f50:	40010000 	.word	0x40010000

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2224      	movs	r2, #36	@ 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fe8c 	bl	8005c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000f86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000fc4:	f002 fe72 	bl	8003cac <HAL_TIM_Encoder_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000fce:	f000 faa3 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_TIM2_Init+0xa4>)
 8000fe0:	f003 fd12 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fea:	f000 fa95 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	@ 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000120 	.word	0x20000120

08000ffc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2224      	movs	r2, #36	@ 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f004 fe38 	bl	8005c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <MX_TIM3_Init+0xa0>)
 800101a:	4a21      	ldr	r2, [pc, #132]	@ (80010a0 <MX_TIM3_Init+0xa4>)
 800101c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <MX_TIM3_Init+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <MX_TIM3_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800102a:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <MX_TIM3_Init+0xa0>)
 800102c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001030:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <MX_TIM3_Init+0xa0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <MX_TIM3_Init+0xa0>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001056:	2301      	movs	r3, #1
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <MX_TIM3_Init+0xa0>)
 800106a:	f002 fe1f 	bl	8003cac <HAL_TIM_Encoder_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 fa50 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	@ (800109c <MX_TIM3_Init+0xa0>)
 8001086:	f003 fcbf 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001090:	f000 fa42 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	@ 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000168 	.word	0x20000168
 80010a0:	40000400 	.word	0x40000400

080010a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010c8:	4a32      	ldr	r2, [pc, #200]	@ (8001194 <MX_TIM4_Init+0xf0>)
 80010ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010cc:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3599;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010da:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80010de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ec:	4828      	ldr	r0, [pc, #160]	@ (8001190 <MX_TIM4_Init+0xec>)
 80010ee:	f002 fcdd 	bl	8003aac <HAL_TIM_PWM_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80010f8:	f000 fa0e 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4619      	mov	r1, r3
 800110a:	4821      	ldr	r0, [pc, #132]	@ (8001190 <MX_TIM4_Init+0xec>)
 800110c:	f003 fc7c 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001116:	f000 f9ff 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111a:	2360      	movs	r3, #96	@ 0x60
 800111c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4817      	ldr	r0, [pc, #92]	@ (8001190 <MX_TIM4_Init+0xec>)
 8001132:	f002 ffdf 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800113c:	f000 f9ec 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2204      	movs	r2, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <MX_TIM4_Init+0xec>)
 8001148:	f002 ffd4 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001152:	f000 f9e1 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_TIM4_Init+0xec>)
 800115e:	f002 ffc9 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001168:	f000 f9d6 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	220c      	movs	r2, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	@ (8001190 <MX_TIM4_Init+0xec>)
 8001174:	f002 ffbe 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800117e:	f000 f9cb 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <MX_TIM4_Init+0xec>)
 8001184:	f000 fdf6 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200001b0 	.word	0x200001b0
 8001194:	40000800 	.word	0x40000800

08001198 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011ba:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011bc:	4a27      	ldr	r2, [pc, #156]	@ (800125c <MX_TIM5_Init+0xc4>)
 80011be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011c0:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3599;
 80011cc:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011ce:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80011d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80011e0:	481d      	ldr	r0, [pc, #116]	@ (8001258 <MX_TIM5_Init+0xc0>)
 80011e2:	f002 fc63 	bl	8003aac <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80011ec:	f000 f994 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4619      	mov	r1, r3
 80011fe:	4816      	ldr	r0, [pc, #88]	@ (8001258 <MX_TIM5_Init+0xc0>)
 8001200:	f003 fc02 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800120a:	f000 f985 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	@ 0x60
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	@ (8001258 <MX_TIM5_Init+0xc0>)
 8001226:	f002 ff65 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001230:	f000 f972 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2204      	movs	r2, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	@ (8001258 <MX_TIM5_Init+0xc0>)
 800123c:	f002 ff5a 	bl	80040f4 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001246:	f000 f967 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800124a:	4803      	ldr	r0, [pc, #12]	@ (8001258 <MX_TIM5_Init+0xc0>)
 800124c:	f000 fd92 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	@ 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001f8 	.word	0x200001f8
 800125c:	40000c00 	.word	0x40000c00

08001260 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_TIM9_Init+0x68>)
 8001274:	4a15      	ldr	r2, [pc, #84]	@ (80012cc <MX_TIM9_Init+0x6c>)
 8001276:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <MX_TIM9_Init+0x68>)
 800127a:	2247      	movs	r2, #71	@ 0x47
 800127c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_TIM9_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4;
 8001284:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_TIM9_Init+0x68>)
 8001286:	2204      	movs	r2, #4
 8001288:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_TIM9_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <MX_TIM9_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001296:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_TIM9_Init+0x68>)
 8001298:	f002 fb56 	bl	8003948 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 80012a2:	f000 f939 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012aa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_TIM9_Init+0x68>)
 80012b2:	f002 ffe1 	bl	8004278 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 80012bc:	f000 f92c 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000240 	.word	0x20000240
 80012cc:	40014000 	.word	0x40014000

080012d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <MX_TIM10_Init+0x44>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4499;
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012dc:	f241 1293 	movw	r2, #4499	@ 0x1193
 80012e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 799;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012ea:	f240 321f 	movw	r2, #799	@ 0x31f
 80012ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	@ (8001310 <MX_TIM10_Init+0x40>)
 80012fe:	f002 fb23 	bl	8003948 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001308:	f000 f906 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000288 	.word	0x20000288
 8001314:	40014400 	.word	0x40014400

08001318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_USART1_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_USART1_UART_Init+0x4c>)
 8001350:	f003 fbdc 	bl	8004b0c <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f000 f8dd 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002d0 	.word	0x200002d0
 8001368:	40011000 	.word	0x40011000

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <MX_GPIO_Init+0x148>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a4a      	ldr	r2, [pc, #296]	@ (80014b4 <MX_GPIO_Init+0x148>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <MX_GPIO_Init+0x148>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a43      	ldr	r2, [pc, #268]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a3c      	ldr	r2, [pc, #240]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a35      	ldr	r2, [pc, #212]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <MX_GPIO_Init+0x148>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f8:	482f      	ldr	r0, [pc, #188]	@ (80014b8 <MX_GPIO_Init+0x14c>)
 80013fa:	f001 fdf3 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	210c      	movs	r1, #12
 8001402:	482e      	ldr	r0, [pc, #184]	@ (80014bc <MX_GPIO_Init+0x150>)
 8001404:	f001 fdee 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4825      	ldr	r0, [pc, #148]	@ (80014b8 <MX_GPIO_Init+0x14c>)
 8001422:	f001 fc43 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001426:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	481f      	ldr	r0, [pc, #124]	@ (80014b8 <MX_GPIO_Init+0x14c>)
 800143c:	f001 fc36 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001440:	230c      	movs	r3, #12
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4819      	ldr	r0, [pc, #100]	@ (80014bc <MX_GPIO_Init+0x150>)
 8001458:	f001 fc28 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800145c:	f240 4304 	movw	r3, #1028	@ 0x404
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <MX_GPIO_Init+0x154>)
 8001472:	f001 fc1b 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001476:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	480c      	ldr	r0, [pc, #48]	@ (80014bc <MX_GPIO_Init+0x150>)
 800148c:	f001 fc0e 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_GPIO_Init+0x150>)
 80014a6:	f001 fc01 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400

080014c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d10b      	bne.n	80014ee <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		//PID CONTROL HERE
		Joint_Update(&shoulderYaw,50);
 80014d6:	2132      	movs	r1, #50	@ 0x32
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014da:	f7ff f9b3 	bl	8000844 <Joint_Update>
		Joint_Update(&shoulderPitch,50);
 80014de:	2132      	movs	r1, #50	@ 0x32
 80014e0:	480a      	ldr	r0, [pc, #40]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014e2:	f7ff f9af 	bl	8000844 <Joint_Update>
		Joint_Update(&elbowPitch,50);
 80014e6:	2132      	movs	r1, #50	@ 0x32
 80014e8:	4809      	ldr	r0, [pc, #36]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014ea:	f7ff f9ab 	bl	8000844 <Joint_Update>
	}
	if(htim->Instance == TIM9)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		servo_update_tick();
 80014f8:	f000 f9f6 	bl	80018e8 <servo_update_tick>
	}
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40014400 	.word	0x40014400
 8001508:	20000438 	.word	0x20000438
 800150c:	200004b0 	.word	0x200004b0
 8001510:	20000528 	.word	0x20000528
 8001514:	40014000 	.word	0x40014000

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <Error_Handler+0x8>

08001524 <Motor_Init>:
 *  Created on: Apr 17, 2025
 *      Author: cole
 */
#include "motor.h"

void Motor_Init(motor_t* p_mot,TIM_HandleTypeDef *htim, uint32_t channelA, uint32_t channelB){
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
	p_mot->htim = htim;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	601a      	str	r2, [r3, #0]
	p_mot->channelA = channelA;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	605a      	str	r2, [r3, #4]
	p_mot->channelB = channelB;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	609a      	str	r2, [r3, #8]
	p_mot->dutyCycle = 0;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <Set_Duty>:
void Coast(motor_t* p_mot){
	__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
	__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,0);
}

void Set_Duty(motor_t* p_mot,int32_t speed) { //100% is 399
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
	if(!speed){
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d152      	bne.n	800160c <Set_Duty+0xb6>
		p_mot->dutyCycle = 3599;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f640 620f 	movw	r2, #3599	@ 0xe0f
 800156c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,3599);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <Set_Duty+0x2e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
 8001582:	e01b      	b.n	80015bc <Set_Duty+0x66>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d106      	bne.n	800159a <Set_Duty+0x44>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	f640 630f 	movw	r3, #3599	@ 0xe0f
 8001596:	6393      	str	r3, [r2, #56]	@ 0x38
 8001598:	e010      	b.n	80015bc <Set_Duty+0x66>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d106      	bne.n	80015b0 <Set_Duty+0x5a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f640 630f 	movw	r3, #3599	@ 0xe0f
 80015ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80015ae:	e005      	b.n	80015bc <Set_Duty+0x66>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f640 630f 	movw	r3, #3599	@ 0xe0f
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,3599);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <Set_Duty+0x7c>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34
	else if (speed < 0 && speed >= -100) {
		p_mot->dutyCycle = -36*speed-1;
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-36*speed-1);
	}
}
 80015d0:	e0f5      	b.n	80017be <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,3599);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d106      	bne.n	80015e8 <Set_Duty+0x92>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	f640 630f 	movw	r3, #3599	@ 0xe0f
 80015e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80015e6:	e0ea      	b.n	80017be <Set_Duty+0x268>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d106      	bne.n	80015fe <Set_Duty+0xa8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f640 630f 	movw	r3, #3599	@ 0xe0f
 80015fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80015fc:	e0df      	b.n	80017be <Set_Duty+0x268>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f640 630f 	movw	r3, #3599	@ 0xe0f
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800160a:	e0d8      	b.n	80017be <Set_Duty+0x268>
	else if(speed > 0 && speed <= 100) {
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dd68      	ble.n	80016e4 <Set_Duty+0x18e>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b64      	cmp	r3, #100	@ 0x64
 8001616:	dc65      	bgt.n	80016e4 <Set_Duty+0x18e>
		p_mot->dutyCycle = 36*speed-1;
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	1e5a      	subs	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,36*speed-1);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <Set_Duty+0xf0>
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	1e5a      	subs	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	635a      	str	r2, [r3, #52]	@ 0x34
 8001644:	e02a      	b.n	800169c <Set_Duty+0x146>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d10b      	bne.n	8001666 <Set_Duty+0x110>
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	1e59      	subs	r1, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	6393      	str	r3, [r2, #56]	@ 0x38
 8001664:	e01a      	b.n	800169c <Set_Duty+0x146>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d10b      	bne.n	8001686 <Set_Duty+0x130>
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	1e59      	subs	r1, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	460b      	mov	r3, r1
 8001682:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001684:	e00a      	b.n	800169c <Set_Duty+0x146>
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	1e59      	subs	r1, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	460b      	mov	r3, r1
 800169a:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <Set_Duty+0x15a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ae:	e086      	b.n	80017be <Set_Duty+0x268>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d105      	bne.n	80016c4 <Set_Duty+0x16e>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80016c2:	e07c      	b.n	80017be <Set_Duty+0x268>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d105      	bne.n	80016d8 <Set_Duty+0x182>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2300      	movs	r3, #0
 80016d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016d6:	e072      	b.n	80017be <Set_Duty+0x268>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	e06c      	b.n	80017be <Set_Duty+0x268>
	else if (speed < 0 && speed >= -100) {
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da69      	bge.n	80017be <Set_Duty+0x268>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80016f0:	db65      	blt.n	80017be <Set_Duty+0x268>
		p_mot->dutyCycle = -36*speed-1;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f06f 0223 	mvn.w	r2, #35	@ 0x23
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <Set_Duty+0x1c0>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	635a      	str	r2, [r3, #52]	@ 0x34
 8001714:	e018      	b.n	8001748 <Set_Duty+0x1f2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b04      	cmp	r3, #4
 800171c:	d105      	bne.n	800172a <Set_Duty+0x1d4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2300      	movs	r3, #0
 8001726:	6393      	str	r3, [r2, #56]	@ 0x38
 8001728:	e00e      	b.n	8001748 <Set_Duty+0x1f2>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b08      	cmp	r3, #8
 8001730:	d105      	bne.n	800173e <Set_Duty+0x1e8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800173c:	e004      	b.n	8001748 <Set_Duty+0x1f2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-36*speed-1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <Set_Duty+0x210>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f06f 0223 	mvn.w	r2, #35	@ 0x23
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001764:	e02b      	b.n	80017be <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-36*speed-1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d10b      	bne.n	8001786 <Set_Duty+0x230>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f06f 0223 	mvn.w	r2, #35	@ 0x23
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	1e59      	subs	r1, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	460b      	mov	r3, r1
 8001782:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001784:	e01b      	b.n	80017be <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-36*speed-1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d10b      	bne.n	80017a6 <Set_Duty+0x250>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f06f 0223 	mvn.w	r2, #35	@ 0x23
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	1e59      	subs	r1, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	460b      	mov	r3, r1
 80017a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80017a4:	e00b      	b.n	80017be <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-36*speed-1);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f06f 0223 	mvn.w	r2, #35	@ 0x23
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	460b      	mov	r3, r1
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80017bc:	e7ff      	b.n	80017be <Set_Duty+0x268>
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <servo_init_timer>:
static uint8_t servo_count = 0;
static volatile uint16_t pwm_counter = 0;
static TIM_HandleTypeDef* servo_timer;

void servo_init_timer(TIM_HandleTypeDef* htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    servo_timer = htim;
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <servo_init_timer+0x1c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
    //htim->Instance->PSC = 15;  // 16 MHz / 16 = 1 MHz
    //htim->Instance->ARR = 4;
    HAL_TIM_Base_Start_IT(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f002 f904 	bl	80039e8 <HAL_TIM_Base_Start_IT>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000614 	.word	0x20000614

080017ec <servo_add>:

int8_t servo_add(GPIO_TypeDef* port, uint16_t pin)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
    if (servo_count >= MAX_SERVOS) return -1;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <servo_add+0x60>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d902      	bls.n	8001806 <servo_add+0x1a>
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	e01c      	b.n	8001840 <servo_add+0x54>
    servos[servo_count].port = port;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <servo_add+0x60>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4619      	mov	r1, r3
 800180c:	4a10      	ldr	r2, [pc, #64]	@ (8001850 <servo_add+0x64>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
    servos[servo_count].pin = pin;
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <servo_add+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <servo_add+0x64>)
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	809a      	strh	r2, [r3, #4]
    servos[servo_count].pulse_ticks = 300; // default to 90°
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <servo_add+0x60>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <servo_add+0x64>)
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001830:	80da      	strh	r2, [r3, #6]
    return servo_count++;
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <servo_add+0x60>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	b2d1      	uxtb	r1, r2
 800183a:	4a04      	ldr	r2, [pc, #16]	@ (800184c <servo_add+0x60>)
 800183c:	7011      	strb	r1, [r2, #0]
 800183e:	b25b      	sxtb	r3, r3
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20000610 	.word	0x20000610
 8001850:	200005d0 	.word	0x200005d0

08001854 <servo_set_angle>:

void servo_set_angle(uint8_t index, float angle_deg)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	ed87 0a00 	vstr	s0, [r7]
 8001860:	71fb      	strb	r3, [r7, #7]
    if (index >= servo_count) return;
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <servo_set_angle+0x80>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	429a      	cmp	r2, r3
 800186a:	d22c      	bcs.n	80018c6 <servo_set_angle+0x72>
    if (angle_deg < 0.0f) angle_deg = 0.0f;
 800186c:	edd7 7a00 	vldr	s15, [r7]
 8001870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d502      	bpl.n	8001880 <servo_set_angle+0x2c>
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
    if (angle_deg > 180.0f) angle_deg = 180.0f;
 8001880:	edd7 7a00 	vldr	s15, [r7]
 8001884:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80018d8 <servo_set_angle+0x84>
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd01      	ble.n	8001896 <servo_set_angle+0x42>
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <servo_set_angle+0x88>)
 8001894:	603b      	str	r3, [r7, #0]

    uint16_t ticks = MIN_PULSE_TICKS + (uint16_t)((angle_deg / 180.0f) * (MAX_PULSE_TICKS - MIN_PULSE_TICKS));
 8001896:	ed97 7a00 	vldr	s14, [r7]
 800189a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80018d8 <servo_set_angle+0x84>
 800189e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80018e0 <servo_set_angle+0x8c>
 80018a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ae:	ee17 3a90 	vmov	r3, s15
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	338c      	adds	r3, #140	@ 0x8c
 80018b6:	81fb      	strh	r3, [r7, #14]
    servos[index].pulse_ticks = ticks;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <servo_set_angle+0x90>)
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	89fa      	ldrh	r2, [r7, #14]
 80018c2:	80da      	strh	r2, [r3, #6]
 80018c4:	e000      	b.n	80018c8 <servo_set_angle+0x74>
    if (index >= servo_count) return;
 80018c6:	bf00      	nop
}
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000610 	.word	0x20000610
 80018d8:	43340000 	.word	0x43340000
 80018dc:	43340000 	.word	0x43340000
 80018e0:	43a00000 	.word	0x43a00000
 80018e4:	200005d0 	.word	0x200005d0

080018e8 <servo_update_tick>:

void servo_update_tick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
    pwm_counter++;
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <servo_update_tick+0xa8>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <servo_update_tick+0xa8>)
 80018fa:	801a      	strh	r2, [r3, #0]
    if (pwm_counter >= PWM_FRAME_TICKS)
 80018fc:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <servo_update_tick+0xa8>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001906:	4293      	cmp	r3, r2
 8001908:	d902      	bls.n	8001910 <servo_update_tick+0x28>
        pwm_counter = 0;
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <servo_update_tick+0xa8>)
 800190c:	2200      	movs	r2, #0
 800190e:	801a      	strh	r2, [r3, #0]

    for (uint8_t i = 0; i < servo_count; ++i)
 8001910:	2300      	movs	r3, #0
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	e030      	b.n	8001978 <servo_update_tick+0x90>
    {
        if (pwm_counter == 0)
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <servo_update_tick+0xa8>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10f      	bne.n	8001940 <servo_update_tick+0x58>
            servos[i].port->BSRR = (1 << servos[i].pin);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <servo_update_tick+0xac>)
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	889b      	ldrh	r3, [r3, #4]
 800192a:	461a      	mov	r2, r3
 800192c:	2301      	movs	r3, #1
 800192e:	fa03 f102 	lsl.w	r1, r3, r2
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <servo_update_tick+0xac>)
 8001936:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800193a:	460a      	mov	r2, r1
 800193c:	619a      	str	r2, [r3, #24]
 800193e:	e018      	b.n	8001972 <servo_update_tick+0x8a>
        else if (pwm_counter == servos[i].pulse_ticks)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <servo_update_tick+0xac>)
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	88da      	ldrh	r2, [r3, #6]
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <servo_update_tick+0xa8>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	429a      	cmp	r2, r3
 8001952:	d10e      	bne.n	8001972 <servo_update_tick+0x8a>
            servos[i].port->BSRR = (1 << (servos[i].pin + 16));
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <servo_update_tick+0xac>)
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	3310      	adds	r3, #16
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f103 	lsl.w	r1, r2, r3
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <servo_update_tick+0xac>)
 800196a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800196e:	460a      	mov	r2, r1
 8001970:	619a      	str	r2, [r3, #24]
    for (uint8_t i = 0; i < servo_count; ++i)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3301      	adds	r3, #1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <servo_update_tick+0xb0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3c9      	bcc.n	8001916 <servo_update_tick+0x2e>
    }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	20000612 	.word	0x20000612
 8001994:	200005d0 	.word	0x200005d0
 8001998:	20000610 	.word	0x20000610

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a24      	ldr	r2, [pc, #144]	@ (8001a9c <HAL_ADC_MspInit+0xb0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d141      	bne.n	8001a92 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_ADC_MspInit+0xb4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a62:	23c0      	movs	r3, #192	@ 0xc0
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a66:	2303      	movs	r3, #3
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <HAL_ADC_MspInit+0xb8>)
 8001a76:	f001 f919 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <HAL_ADC_MspInit+0xbc>)
 8001a8e:	f001 f90d 	bl	8002cac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400

08001aac <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	@ 0x38
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a66      	ldr	r2, [pc, #408]	@ (8001c64 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d145      	bne.n	8001b5a <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	4b65      	ldr	r3, [pc, #404]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a64      	ldr	r2, [pc, #400]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b62      	ldr	r3, [pc, #392]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	4852      	ldr	r0, [pc, #328]	@ (8001c6c <HAL_TIM_Encoder_MspInit+0x1c0>)
 8001b24:	f001 f8c2 	bl	8002cac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2018      	movs	r0, #24
 8001b2e:	f000 fff4 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b32:	2018      	movs	r0, #24
 8001b34:	f001 f80d 	bl	8002b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2019      	movs	r0, #25
 8001b3e:	f000 ffec 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b42:	2019      	movs	r0, #25
 8001b44:	f001 f805 	bl	8002b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	201a      	movs	r0, #26
 8001b4e:	f000 ffe4 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b52:	201a      	movs	r0, #26
 8001b54:	f000 fffd 	bl	8002b52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b58:	e080      	b.n	8001c5c <HAL_TIM_Encoder_MspInit+0x1b0>
  else if(htim_encoder->Instance==TIM2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b62:	d14a      	bne.n	8001bfa <HAL_TIM_Encoder_MspInit+0x14e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	4b3f      	ldr	r3, [pc, #252]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b74:	4b3c      	ldr	r3, [pc, #240]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	4b38      	ldr	r3, [pc, #224]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4a37      	ldr	r2, [pc, #220]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b90:	4b35      	ldr	r3, [pc, #212]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba4:	4a30      	ldr	r2, [pc, #192]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4826      	ldr	r0, [pc, #152]	@ (8001c6c <HAL_TIM_Encoder_MspInit+0x1c0>)
 8001bd4:	f001 f86a 	bl	8002cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001be8:	2301      	movs	r3, #1
 8001bea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	481f      	ldr	r0, [pc, #124]	@ (8001c70 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001bf4:	f001 f85a 	bl	8002cac <HAL_GPIO_Init>
}
 8001bf8:	e030      	b.n	8001c5c <HAL_TIM_Encoder_MspInit+0x1b0>
  else if(htim_encoder->Instance==TIM3)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c74 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d12b      	bne.n	8001c5c <HAL_TIM_Encoder_MspInit+0x1b0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	4a16      	ldr	r2, [pc, #88]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	4a0f      	ldr	r2, [pc, #60]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c3c:	2330      	movs	r3, #48	@ 0x30
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	@ (8001c70 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8001c58:	f001 f828 	bl	8002cac <HAL_GPIO_Init>
}
 8001c5c:	bf00      	nop
 8001c5e:	3738      	adds	r7, #56	@ 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40000400 	.word	0x40000400

08001c78 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a15      	ldr	r2, [pc, #84]	@ (8001cdc <HAL_TIM_PWM_MspInit+0x64>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10e      	bne.n	8001ca8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ca6:	e012      	b.n	8001cce <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10d      	bne.n	8001cce <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x68>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40000c00 	.word	0x40000c00

08001ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d68 <HAL_TIM_Base_MspInit+0x80>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d116      	bne.n	8001d28 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_TIM_Base_MspInit+0x84>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a1a      	ldr	r2, [pc, #104]	@ (8001d6c <HAL_TIM_Base_MspInit+0x84>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_TIM_Base_MspInit+0x84>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2018      	movs	r0, #24
 8001d1c:	f000 fefd 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d20:	2018      	movs	r0, #24
 8001d22:	f000 ff16 	bl	8002b52 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001d26:	e01a      	b.n	8001d5e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a10      	ldr	r2, [pc, #64]	@ (8001d70 <HAL_TIM_Base_MspInit+0x88>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d115      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <HAL_TIM_Base_MspInit+0x84>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d6c <HAL_TIM_Base_MspInit+0x84>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d42:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_TIM_Base_MspInit+0x84>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2019      	movs	r0, #25
 8001d54:	f000 fee1 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d58:	2019      	movs	r0, #25
 8001d5a:	f000 fefa 	bl	8002b52 <HAL_NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40014000 	.word	0x40014000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40014400 	.word	0x40014400

08001d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	@ 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <HAL_TIM_MspPostInit+0xb0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11f      	bne.n	8001dd6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a22      	ldr	r2, [pc, #136]	@ (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001db2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4817      	ldr	r0, [pc, #92]	@ (8001e2c <HAL_TIM_MspPostInit+0xb8>)
 8001dd0:	f000 ff6c 	bl	8002cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001dd4:	e022      	b.n	8001e1c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a15      	ldr	r2, [pc, #84]	@ (8001e30 <HAL_TIM_MspPostInit+0xbc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d11d      	bne.n	8001e1c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_TIM_MspPostInit+0xb4>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4807      	ldr	r0, [pc, #28]	@ (8001e34 <HAL_TIM_MspPostInit+0xc0>)
 8001e18:	f000 ff48 	bl	8002cac <HAL_GPIO_Init>
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40000800 	.word	0x40000800
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40020000 	.word	0x40020000

08001e38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_UART_MspInit+0x94>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d134      	bne.n	8001ec4 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <HAL_UART_MspInit+0x98>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed0 <HAL_UART_MspInit+0x98>)
 8001e64:	f043 0310 	orr.w	r3, r3, #16
 8001e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_UART_MspInit+0x98>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_UART_MspInit+0x98>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <HAL_UART_MspInit+0x98>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_UART_MspInit+0x98>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001e92:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4809      	ldr	r0, [pc, #36]	@ (8001ed4 <HAL_UART_MspInit+0x9c>)
 8001eb0:	f000 fefc 	bl	8002cac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2025      	movs	r0, #37	@ 0x25
 8001eba:	f000 fe2e 	bl	8002b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ebe:	2025      	movs	r0, #37	@ 0x25
 8001ec0:	f000 fe47 	bl	8002b52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	@ 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <NMI_Handler+0x4>

08001ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <MemManage_Handler+0x4>

08001ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <UsageFault_Handler+0x4>

08001f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2e:	f000 fa87 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f3c:	4803      	ldr	r0, [pc, #12]	@ (8001f4c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001f3e:	f001 ffe9 	bl	8003f14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001f42:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001f44:	f001 ffe6 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200000d8 	.word	0x200000d8
 8001f50:	20000240 	.word	0x20000240

08001f54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f58:	4803      	ldr	r0, [pc, #12]	@ (8001f68 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001f5a:	f001 ffdb 	bl	8003f14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001f5e:	4803      	ldr	r0, [pc, #12]	@ (8001f6c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001f60:	f001 ffd8 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200000d8 	.word	0x200000d8
 8001f6c:	20000288 	.word	0x20000288

08001f70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f76:	f001 ffcd 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200000d8 	.word	0x200000d8

08001f84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <USART1_IRQHandler+0x10>)
 8001f8a:	f002 febf 	bl	8004d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200002d0 	.word	0x200002d0

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f003 fe62 	bl	8005c90 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20020000 	.word	0x20020000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000618 	.word	0x20000618
 8002000:	200007f0 	.word	0x200007f0

08002004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <UART_Init>:
static char uart_byte;
static volatile bool message_complete = false;
static JointAngles latest_angles;
static bool angles_ready = false;

void UART_Init(UART_HandleTypeDef* huart) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    huart_global = huart;
 8002030:	4a06      	ldr	r2, [pc, #24]	@ (800204c <UART_Init+0x24>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(huart_global, (uint8_t*)&uart_byte, 1);
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <UART_Init+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2201      	movs	r2, #1
 800203c:	4904      	ldr	r1, [pc, #16]	@ (8002050 <UART_Init+0x28>)
 800203e:	4618      	mov	r0, r3
 8002040:	f002 fe3f 	bl	8004cc2 <HAL_UART_Receive_IT>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000061c 	.word	0x2000061c
 8002050:	20000684 	.word	0x20000684

08002054 <send_invalid_message>:

static void send_invalid_message(int index) {
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b08b      	sub	sp, #44	@ 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    char msg[30];
    snprintf(msg, sizeof(msg), "invalid angle %d\r\n", index);
 800205c:	f107 0008 	add.w	r0, r7, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <send_invalid_message+0x40>)
 8002064:	211e      	movs	r1, #30
 8002066:	f003 fda7 	bl	8005bb8 <sniprintf>
    HAL_UART_Transmit(huart_global, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <send_invalid_message+0x44>)
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f8b4 	bl	80001e0 <strlen>
 8002078:	4603      	mov	r3, r0
 800207a:	b29a      	uxth	r2, r3
 800207c:	f107 0108 	add.w	r1, r7, #8
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	4620      	mov	r0, r4
 8002086:	f002 fd91 	bl	8004bac <HAL_UART_Transmit>
}
 800208a:	bf00      	nop
 800208c:	372c      	adds	r7, #44	@ 0x2c
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	08006e90 	.word	0x08006e90
 8002098:	2000061c 	.word	0x2000061c

0800209c <validate_and_store>:

static bool validate_and_store(int* vals) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    if (vals[0] < THETA1_MIN || vals[0] > THETA1_MAX) { send_invalid_message(1); return false; }
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 80020ac:	db03      	blt.n	80020b6 <validate_and_store+0x1a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2bb4      	cmp	r3, #180	@ 0xb4
 80020b4:	dd04      	ble.n	80020c0 <validate_and_store+0x24>
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff ffcc 	bl	8002054 <send_invalid_message>
 80020bc:	2300      	movs	r3, #0
 80020be:	e050      	b.n	8002162 <validate_and_store+0xc6>
    if (vals[1] < THETA2_MIN || vals[1] > THETA2_MAX) { send_invalid_message(2); return false; }
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db04      	blt.n	80020d4 <validate_and_store+0x38>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80020d2:	dd04      	ble.n	80020de <validate_and_store+0x42>
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff ffbd 	bl	8002054 <send_invalid_message>
 80020da:	2300      	movs	r3, #0
 80020dc:	e041      	b.n	8002162 <validate_and_store+0xc6>
    if (vals[2] < THETA3_MIN || vals[2] > THETA3_MAX) { send_invalid_message(3); return false; }
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3308      	adds	r3, #8
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db04      	blt.n	80020f2 <validate_and_store+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3308      	adds	r3, #8
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2bdc      	cmp	r3, #220	@ 0xdc
 80020f0:	dd04      	ble.n	80020fc <validate_and_store+0x60>
 80020f2:	2003      	movs	r0, #3
 80020f4:	f7ff ffae 	bl	8002054 <send_invalid_message>
 80020f8:	2300      	movs	r3, #0
 80020fa:	e032      	b.n	8002162 <validate_and_store+0xc6>
    if (vals[3] < THETA4_MIN || vals[3] > THETA4_MAX) { send_invalid_message(4); return false; }
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	330c      	adds	r3, #12
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db04      	blt.n	8002110 <validate_and_store+0x74>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	330c      	adds	r3, #12
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2bb4      	cmp	r3, #180	@ 0xb4
 800210e:	dd04      	ble.n	800211a <validate_and_store+0x7e>
 8002110:	2004      	movs	r0, #4
 8002112:	f7ff ff9f 	bl	8002054 <send_invalid_message>
 8002116:	2300      	movs	r3, #0
 8002118:	e023      	b.n	8002162 <validate_and_store+0xc6>
    if (vals[4] < THETA5_MIN || vals[4] > THETA5_MAX) { send_invalid_message(5); return false; }
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3310      	adds	r3, #16
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db04      	blt.n	800212e <validate_and_store+0x92>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3310      	adds	r3, #16
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b96      	cmp	r3, #150	@ 0x96
 800212c:	dd04      	ble.n	8002138 <validate_and_store+0x9c>
 800212e:	2005      	movs	r0, #5
 8002130:	f7ff ff90 	bl	8002054 <send_invalid_message>
 8002134:	2300      	movs	r3, #0
 8002136:	e014      	b.n	8002162 <validate_and_store+0xc6>

    latest_angles.theta1 = vals[0];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0b      	ldr	r2, [pc, #44]	@ (800216c <validate_and_store+0xd0>)
 800213e:	6013      	str	r3, [r2, #0]
    latest_angles.theta2 = vals[1];
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a09      	ldr	r2, [pc, #36]	@ (800216c <validate_and_store+0xd0>)
 8002146:	6053      	str	r3, [r2, #4]
    latest_angles.theta3 = vals[2];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a07      	ldr	r2, [pc, #28]	@ (800216c <validate_and_store+0xd0>)
 800214e:	6093      	str	r3, [r2, #8]
    latest_angles.theta4 = vals[3];
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a05      	ldr	r2, [pc, #20]	@ (800216c <validate_and_store+0xd0>)
 8002156:	60d3      	str	r3, [r2, #12]
    latest_angles.theta5 = vals[4];
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4a03      	ldr	r2, [pc, #12]	@ (800216c <validate_and_store+0xd0>)
 800215e:	6113      	str	r3, [r2, #16]
    return true;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000688 	.word	0x20000688

08002170 <UART_ProcessReceivedData>:

void UART_ProcessReceivedData(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af04      	add	r7, sp, #16
    if (!message_complete) return;
 8002176:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <UART_ProcessReceivedData+0xa0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d13b      	bne.n	80021fe <UART_ProcessReceivedData+0x8e>

    message_complete = false;
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <UART_ProcessReceivedData+0xa0>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    angles_ready = false;
 800218c:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <UART_ProcessReceivedData+0xa4>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]

    if (uart_rx_buffer[0] != '(' || uart_rx_buffer[strlen(uart_rx_buffer) - 1] != ')') return;
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <UART_ProcessReceivedData+0xa8>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b28      	cmp	r3, #40	@ 0x28
 8002198:	d133      	bne.n	8002202 <UART_ProcessReceivedData+0x92>
 800219a:	481f      	ldr	r0, [pc, #124]	@ (8002218 <UART_ProcessReceivedData+0xa8>)
 800219c:	f7fe f820 	bl	80001e0 <strlen>
 80021a0:	4603      	mov	r3, r0
 80021a2:	3b01      	subs	r3, #1
 80021a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <UART_ProcessReceivedData+0xa8>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	2b29      	cmp	r3, #41	@ 0x29
 80021aa:	d12a      	bne.n	8002202 <UART_ProcessReceivedData+0x92>

    uart_rx_buffer[strlen(uart_rx_buffer) - 1] = '\0';
 80021ac:	481a      	ldr	r0, [pc, #104]	@ (8002218 <UART_ProcessReceivedData+0xa8>)
 80021ae:	f7fe f817 	bl	80001e0 <strlen>
 80021b2:	4603      	mov	r3, r0
 80021b4:	3b01      	subs	r3, #1
 80021b6:	4a18      	ldr	r2, [pc, #96]	@ (8002218 <UART_ProcessReceivedData+0xa8>)
 80021b8:	2100      	movs	r1, #0
 80021ba:	54d1      	strb	r1, [r2, r3]
    char* inner = uart_rx_buffer + 1;
 80021bc:	4b17      	ldr	r3, [pc, #92]	@ (800221c <UART_ProcessReceivedData+0xac>)
 80021be:	617b      	str	r3, [r7, #20]

    int vals[5];
    if (sscanf(inner, "%d,%d,%d,%d,%d", &vals[0], &vals[1], &vals[2], &vals[3], &vals[4]) != 5) return;
 80021c0:	463b      	mov	r3, r7
 80021c2:	1d19      	adds	r1, r3, #4
 80021c4:	463a      	mov	r2, r7
 80021c6:	463b      	mov	r3, r7
 80021c8:	3310      	adds	r3, #16
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	463b      	mov	r3, r7
 80021ce:	330c      	adds	r3, #12
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	463b      	mov	r3, r7
 80021d4:	3308      	adds	r3, #8
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	4911      	ldr	r1, [pc, #68]	@ (8002220 <UART_ProcessReceivedData+0xb0>)
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f003 fd21 	bl	8005c24 <siscanf>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d10e      	bne.n	8002206 <UART_ProcessReceivedData+0x96>

    if (validate_and_store(vals)) {
 80021e8:	463b      	mov	r3, r7
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff56 	bl	800209c <validate_and_store>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <UART_ProcessReceivedData+0x98>
        angles_ready = true;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <UART_ProcessReceivedData+0xa4>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e004      	b.n	8002208 <UART_ProcessReceivedData+0x98>
    if (!message_complete) return;
 80021fe:	bf00      	nop
 8002200:	e002      	b.n	8002208 <UART_ProcessReceivedData+0x98>
    if (uart_rx_buffer[0] != '(' || uart_rx_buffer[strlen(uart_rx_buffer) - 1] != ')') return;
 8002202:	bf00      	nop
 8002204:	e000      	b.n	8002208 <UART_ProcessReceivedData+0x98>
    if (sscanf(inner, "%d,%d,%d,%d,%d", &vals[0], &vals[1], &vals[2], &vals[3], &vals[4]) != 5) return;
 8002206:	bf00      	nop
    }
}
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000685 	.word	0x20000685
 8002214:	2000069c 	.word	0x2000069c
 8002218:	20000620 	.word	0x20000620
 800221c:	20000621 	.word	0x20000621
 8002220:	08006ea4 	.word	0x08006ea4

08002224 <UART_GetLatestAngles>:

bool UART_GetLatestAngles(JointAngles* angles) {
 8002224:	b4b0      	push	{r4, r5, r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    if (!angles_ready) return false;
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <UART_GetLatestAngles+0x3c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <UART_GetLatestAngles+0x1a>
 800223a:	2300      	movs	r3, #0
 800223c:	e00b      	b.n	8002256 <UART_GetLatestAngles+0x32>
    *angles = latest_angles;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <UART_GetLatestAngles+0x40>)
 8002242:	461c      	mov	r4, r3
 8002244:	4615      	mov	r5, r2
 8002246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224a:	682b      	ldr	r3, [r5, #0]
 800224c:	6023      	str	r3, [r4, #0]
    angles_ready = false;
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <UART_GetLatestAngles+0x3c>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
    return true;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bcb0      	pop	{r4, r5, r7}
 800225e:	4770      	bx	lr
 8002260:	2000069c 	.word	0x2000069c
 8002264:	20000688 	.word	0x20000688

08002268 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    static uint16_t index = 0;

    if (huart->Instance == huart_global->Instance) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <HAL_UART_RxCpltCallback+0xc4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d151      	bne.n	8002322 <HAL_UART_RxCpltCallback+0xba>
        if (uart_byte == '\r') {
 800227e:	4b2c      	ldr	r3, [pc, #176]	@ (8002330 <HAL_UART_RxCpltCallback+0xc8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b0d      	cmp	r3, #13
 8002284:	d114      	bne.n	80022b0 <HAL_UART_RxCpltCallback+0x48>
            // Treat CR as end of message
            uart_rx_buffer[index] = '\0';
 8002286:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_UART_RxCpltCallback+0xd0>)
 800228e:	2100      	movs	r1, #0
 8002290:	5499      	strb	r1, [r3, r2]
            index = 0;
 8002292:	4b28      	ldr	r3, [pc, #160]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 8002294:	2200      	movs	r2, #0
 8002296:	801a      	strh	r2, [r3, #0]
            message_complete = true;
 8002298:	4b28      	ldr	r3, [pc, #160]	@ (800233c <HAL_UART_RxCpltCallback+0xd4>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(huart_global, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <HAL_UART_RxCpltCallback+0xc4>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	2202      	movs	r2, #2
 80022a8:	4925      	ldr	r1, [pc, #148]	@ (8002340 <HAL_UART_RxCpltCallback+0xd8>)
 80022aa:	f002 fc7f 	bl	8004bac <HAL_UART_Transmit>
 80022ae:	e031      	b.n	8002314 <HAL_UART_RxCpltCallback+0xac>
        }
        else if (uart_byte == 0x08 || uart_byte == 0x7F) {
 80022b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HAL_UART_RxCpltCallback+0xc8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d003      	beq.n	80022c0 <HAL_UART_RxCpltCallback+0x58>
 80022b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <HAL_UART_RxCpltCallback+0xc8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80022be:	d112      	bne.n	80022e6 <HAL_UART_RxCpltCallback+0x7e>
            // Handle backspace/delete
            if (index > 0) {
 80022c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d025      	beq.n	8002314 <HAL_UART_RxCpltCallback+0xac>
                index--;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 80022d2:	801a      	strh	r2, [r3, #0]
                HAL_UART_Transmit(huart_global, (uint8_t*)"\b \b", 3, HAL_MAX_DELAY); // erase last char
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_UART_RxCpltCallback+0xc4>)
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
 80022dc:	2203      	movs	r2, #3
 80022de:	4919      	ldr	r1, [pc, #100]	@ (8002344 <HAL_UART_RxCpltCallback+0xdc>)
 80022e0:	f002 fc64 	bl	8004bac <HAL_UART_Transmit>
            if (index > 0) {
 80022e4:	e016      	b.n	8002314 <HAL_UART_RxCpltCallback+0xac>
            }
        }
        else if (index < UART_BUFFER_SIZE - 1) {
 80022e6:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	2b62      	cmp	r3, #98	@ 0x62
 80022ec:	d812      	bhi.n	8002314 <HAL_UART_RxCpltCallback+0xac>
            // Echo and store character
            uart_rx_buffer[index++] = uart_byte;
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	b291      	uxth	r1, r2
 80022f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002334 <HAL_UART_RxCpltCallback+0xcc>)
 80022f8:	8011      	strh	r1, [r2, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_UART_RxCpltCallback+0xc8>)
 80022fe:	7819      	ldrb	r1, [r3, #0]
 8002300:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_UART_RxCpltCallback+0xd0>)
 8002302:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(huart_global, (uint8_t*)&uart_byte, 1, HAL_MAX_DELAY);
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_UART_RxCpltCallback+0xc4>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	2201      	movs	r2, #1
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <HAL_UART_RxCpltCallback+0xc8>)
 8002310:	f002 fc4c 	bl	8004bac <HAL_UART_Transmit>
        }

        // Restart reception
        HAL_UART_Receive_IT(huart_global, (uint8_t*)&uart_byte, 1);
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_UART_RxCpltCallback+0xc4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2201      	movs	r2, #1
 800231a:	4905      	ldr	r1, [pc, #20]	@ (8002330 <HAL_UART_RxCpltCallback+0xc8>)
 800231c:	4618      	mov	r0, r3
 800231e:	f002 fcd0 	bl	8004cc2 <HAL_UART_Receive_IT>
    }
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000061c 	.word	0x2000061c
 8002330:	20000684 	.word	0x20000684
 8002334:	2000069e 	.word	0x2000069e
 8002338:	20000620 	.word	0x20000620
 800233c:	20000685 	.word	0x20000685
 8002340:	08006eb4 	.word	0x08006eb4
 8002344:	08006eb8 	.word	0x08006eb8

08002348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002380 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800234c:	f7ff fe5a 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	@ (8002384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	@ (8002388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	@ (8002394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002376:	f003 fc91 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237a:	f7fe fb0d 	bl	8000998 <main>
  bx  lr    
 800237e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800238c:	08007040 	.word	0x08007040
  ldr r2, =_sbss
 8002390:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002394:	200007ec 	.word	0x200007ec

08002398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC_IRQHandler>
	...

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_Init+0x40>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_Init+0x40>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_Init+0x40>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 fb9d 	bl	8002b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	200f      	movs	r0, #15
 80023cc:	f000 f808 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7ff fae4 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fbb5 	bl	8002b6e <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 fb7d 	bl	8002b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	@ (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000014 	.word	0x20000014
 8002438:	2000001c 	.word	0x2000001c
 800243c:	20000018 	.word	0x20000018

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2000001c 	.word	0x2000001c
 8002464:	200006a0 	.word	0x200006a0

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200006a0 	.word	0x200006a0

08002480 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e033      	b.n	80024fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff faa4 	bl	80019ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024c6:	f023 0302 	bic.w	r3, r3, #2
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f94a 	bl	800276c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ee:	e001      	b.n	80024f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1c>
 8002520:	2302      	movs	r3, #2
 8002522:	e113      	b.n	800274c <HAL_ADC_ConfigChannel+0x244>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b09      	cmp	r3, #9
 8002532:	d925      	bls.n	8002580 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1e      	subs	r3, #30
 800254a:	2207      	movs	r2, #7
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43da      	mvns	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	400a      	ands	r2, r1
 8002558:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68d9      	ldr	r1, [r3, #12]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4618      	mov	r0, r3
 800256c:	4603      	mov	r3, r0
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4403      	add	r3, r0
 8002572:	3b1e      	subs	r3, #30
 8002574:	409a      	lsls	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	e022      	b.n	80025c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6919      	ldr	r1, [r3, #16]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	2207      	movs	r2, #7
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4403      	add	r3, r0
 80025bc:	409a      	lsls	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d824      	bhi.n	8002618 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b05      	subs	r3, #5
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	400a      	ands	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b05      	subs	r3, #5
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	635a      	str	r2, [r3, #52]	@ 0x34
 8002616:	e04c      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d824      	bhi.n	800266a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	3b23      	subs	r3, #35	@ 0x23
 8002632:	221f      	movs	r2, #31
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43da      	mvns	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	400a      	ands	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	4618      	mov	r0, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3b23      	subs	r3, #35	@ 0x23
 800265c:	fa00 f203 	lsl.w	r2, r0, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	631a      	str	r2, [r3, #48]	@ 0x30
 8002668:	e023      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b41      	subs	r3, #65	@ 0x41
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	400a      	ands	r2, r1
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	4618      	mov	r0, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	3b41      	subs	r3, #65	@ 0x41
 80026a6:	fa00 f203 	lsl.w	r2, r0, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b2:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <HAL_ADC_ConfigChannel+0x250>)
 80026b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a28      	ldr	r2, [pc, #160]	@ (800275c <HAL_ADC_ConfigChannel+0x254>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10f      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1d8>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b12      	cmp	r3, #18
 80026c6:	d10b      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	@ (800275c <HAL_ADC_ConfigChannel+0x254>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d12b      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x23a>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <HAL_ADC_ConfigChannel+0x258>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <HAL_ADC_ConfigChannel+0x1f4>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b11      	cmp	r3, #17
 80026fa:	d122      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a11      	ldr	r2, [pc, #68]	@ (8002760 <HAL_ADC_ConfigChannel+0x258>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d111      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800271e:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_ADC_ConfigChannel+0x25c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <HAL_ADC_ConfigChannel+0x260>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	0c9a      	lsrs	r2, r3, #18
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002734:	e002      	b.n	800273c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3b01      	subs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012300 	.word	0x40012300
 800275c:	40012000 	.word	0x40012000
 8002760:	10000012 	.word	0x10000012
 8002764:	20000014 	.word	0x20000014
 8002768:	431bde83 	.word	0x431bde83

0800276c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002774:	4b79      	ldr	r3, [pc, #484]	@ (800295c <ADC_Init+0x1f0>)
 8002776:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	431a      	orrs	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <ADC_Init+0x1f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002812:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	e00f      	b.n	800286a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002868:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0202 	bic.w	r2, r2, #2
 8002878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6899      	ldr	r1, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7e1b      	ldrb	r3, [r3, #24]
 8002884:	005a      	lsls	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	3b01      	subs	r3, #1
 80028c4:	035a      	lsls	r2, r3, #13
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	e007      	b.n	80028e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	051a      	lsls	r2, r3, #20
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002922:	025a      	lsls	r2, r3, #9
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	029a      	lsls	r2, r3, #10
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40012300 	.word	0x40012300
 8002960:	0f000001 	.word	0x0f000001

08002964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800298c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4907      	ldr	r1, [pc, #28]	@ (8002a00 <__NVIC_EnableIRQ+0x38>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	@ (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	@ (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad0:	d301      	bcc.n	8002ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00f      	b.n	8002af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <SysTick_Config+0x40>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ade:	210f      	movs	r1, #15
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae4:	f7ff ff8e 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <SysTick_Config+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aee:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <SysTick_Config+0x40>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	e000e010 	.word	0xe000e010

08002b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ff29 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2c:	f7ff ff3e 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f7ff ff8e 	bl	8002a58 <NVIC_EncodePriority>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff5d 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff31 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ffa2 	bl	8002ac0 <SysTick_Config>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b94:	f7ff fc68 	bl	8002468 <HAL_GetTick>
 8002b98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d008      	beq.n	8002bb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e052      	b.n	8002c5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0216 	bic.w	r2, r2, #22
 8002bc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d103      	bne.n	8002be8 <HAL_DMA_Abort+0x62>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0208 	bic.w	r2, r2, #8
 8002bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c08:	e013      	b.n	8002c32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0a:	f7ff fc2d 	bl	8002468 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d90c      	bls.n	8002c32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e015      	b.n	8002c5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e4      	bne.n	8002c0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c44:	223f      	movs	r2, #63	@ 0x3f
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d004      	beq.n	8002c84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2280      	movs	r2, #128	@ 0x80
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e00c      	b.n	8002c9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2205      	movs	r2, #5
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e159      	b.n	8002f7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 8148 	bne.w	8002f76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d005      	beq.n	8002cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d017      	beq.n	8002d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d123      	bne.n	8002df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a2 	beq.w	8002f76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <HAL_GPIO_Init+0x2e8>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a56      	ldr	r2, [pc, #344]	@ (8002f94 <HAL_GPIO_Init+0x2e8>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b54      	ldr	r3, [pc, #336]	@ (8002f94 <HAL_GPIO_Init+0x2e8>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4e:	4a52      	ldr	r2, [pc, #328]	@ (8002f98 <HAL_GPIO_Init+0x2ec>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a49      	ldr	r2, [pc, #292]	@ (8002f9c <HAL_GPIO_Init+0x2f0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_GPIO_Init+0x202>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a48      	ldr	r2, [pc, #288]	@ (8002fa0 <HAL_GPIO_Init+0x2f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0x1fe>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a47      	ldr	r2, [pc, #284]	@ (8002fa4 <HAL_GPIO_Init+0x2f8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00d      	beq.n	8002ea6 <HAL_GPIO_Init+0x1fa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a46      	ldr	r2, [pc, #280]	@ (8002fa8 <HAL_GPIO_Init+0x2fc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x1f6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a45      	ldr	r2, [pc, #276]	@ (8002fac <HAL_GPIO_Init+0x300>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_GPIO_Init+0x1f2>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x204>
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x204>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x204>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x204>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x204>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec0:	4935      	ldr	r1, [pc, #212]	@ (8002f98 <HAL_GPIO_Init+0x2ec>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b38      	ldr	r3, [pc, #224]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f22:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f46:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f70:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb0 <HAL_GPIO_Init+0x304>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f67f aea2 	bls.w	8002cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40013c00 	.word	0x40013c00

08002fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e001      	b.n	8002fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff4:	787b      	ldrb	r3, [r7, #1]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003000:	e003      	b.n	800300a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	041a      	lsls	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e267      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b85      	ldr	r3, [pc, #532]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b82      	ldr	r3, [pc, #520]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b7e      	ldr	r3, [pc, #504]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e242      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6f      	ldr	r2, [pc, #444]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a68      	ldr	r2, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7ff f9ca 	bl	8002468 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff f9c6 	bl	8002468 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e207      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff f9b6 	bl	8002468 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7ff f9b2 	bl	8002468 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f3      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b51      	ldr	r3, [pc, #324]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c7      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x244>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7ff f96b 	bl	8002468 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7ff f967 	bl	8002468 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a8      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_OscConfig+0x244>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7ff f94a 	bl	8002468 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7ff f946 	bl	8002468 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e187      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_RCC_OscConfig+0x248>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7ff f92a 	bl	8002468 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7ff f926 	bl	8002468 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e167      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x240>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x248>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7ff f913 	bl	8002468 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7ff f90f 	bl	8002468 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e150      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b88      	ldr	r3, [pc, #544]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b81      	ldr	r3, [pc, #516]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7d      	ldr	r3, [pc, #500]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a7c      	ldr	r2, [pc, #496]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b7a      	ldr	r3, [pc, #488]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b77      	ldr	r3, [pc, #476]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b74      	ldr	r3, [pc, #464]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7ff f8cf 	bl	8002468 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7ff f8cb 	bl	8002468 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e10c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_OscConfig+0x474>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x2ea>
 80032f4:	4b64      	ldr	r3, [pc, #400]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a63      	ldr	r2, [pc, #396]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x30c>
 800330a:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a5e      	ldr	r2, [pc, #376]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b5c      	ldr	r3, [pc, #368]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a5b      	ldr	r2, [pc, #364]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x324>
 8003324:	4b58      	ldr	r3, [pc, #352]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a57      	ldr	r2, [pc, #348]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	4b55      	ldr	r3, [pc, #340]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a54      	ldr	r2, [pc, #336]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7ff f890 	bl	8002468 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7ff f88c 	bl	8002468 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0cb      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x334>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7ff f87a 	bl	8002468 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7ff f876 	bl	8002468 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0b5      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b3e      	ldr	r3, [pc, #248]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4a38      	ldr	r2, [pc, #224]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a1 	beq.w	80034f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d05c      	beq.n	800347c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d141      	bne.n	800344e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f84a 	bl	8002468 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7ff f846 	bl	8002468 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e087      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	491b      	ldr	r1, [pc, #108]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7ff f81f 	bl	8002468 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7ff f81b 	bl	8002468 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e05c      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x416>
 800344c:	e054      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <HAL_RCC_OscConfig+0x478>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7ff f808 	bl	8002468 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7ff f804 	bl	8002468 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e045      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCC_OscConfig+0x470>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x444>
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e038      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000
 8003490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d028      	beq.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d121      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11a      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe ff36 	bl	8002468 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe ff32 	bl	8002468 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fe96 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08006ec8 	.word	0x08006ec8
 80036cc:	20000014 	.word	0x20000014
 80036d0:	20000018 	.word	0x20000018

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d8:	b094      	sub	sp, #80	@ 0x50
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b79      	ldr	r3, [pc, #484]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80e1 	bhi.w	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e0db      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b73      	ldr	r3, [pc, #460]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800370c:	e0db      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b73      	ldr	r3, [pc, #460]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003710:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003712:	e0d8      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b6f      	ldr	r3, [pc, #444]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800371c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b6d      	ldr	r3, [pc, #436]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003734:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	@ 0x34
 8003742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	0159      	lsls	r1, r3, #5
 8003754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003758:	0150      	lsls	r0, r2, #5
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4621      	mov	r1, r4
 8003760:	1a51      	subs	r1, r2, r1
 8003762:	6139      	str	r1, [r7, #16]
 8003764:	4629      	mov	r1, r5
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003778:	4659      	mov	r1, fp
 800377a:	018b      	lsls	r3, r1, #6
 800377c:	4651      	mov	r1, sl
 800377e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003782:	4651      	mov	r1, sl
 8003784:	018a      	lsls	r2, r1, #6
 8003786:	4651      	mov	r1, sl
 8003788:	ebb2 0801 	subs.w	r8, r2, r1
 800378c:	4659      	mov	r1, fp
 800378e:	eb63 0901 	sbc.w	r9, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb18 0303 	adds.w	r3, r8, r3
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	462b      	mov	r3, r5
 80037b4:	eb49 0303 	adc.w	r3, r9, r3
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037c6:	4629      	mov	r1, r5
 80037c8:	024b      	lsls	r3, r1, #9
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d0:	4621      	mov	r1, r4
 80037d2:	024a      	lsls	r2, r1, #9
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037e4:	f7fc fd54 	bl	8000290 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f0:	e058      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b38      	ldr	r3, [pc, #224]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	4611      	mov	r1, r2
 80037fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	f04f 0000 	mov.w	r0, #0
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	0159      	lsls	r1, r3, #5
 800381a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381e:	0150      	lsls	r0, r2, #5
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4641      	mov	r1, r8
 8003826:	ebb2 0a01 	subs.w	sl, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800383c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003844:	ebb2 040a 	subs.w	r4, r2, sl
 8003848:	eb63 050b 	sbc.w	r5, r3, fp
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	4643      	mov	r3, r8
 8003862:	18e3      	adds	r3, r4, r3
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	464b      	mov	r3, r9
 8003868:	eb45 0303 	adc.w	r3, r5, r3
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387a:	4629      	mov	r1, r5
 800387c:	028b      	lsls	r3, r1, #10
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003884:	4621      	mov	r1, r4
 8003886:	028a      	lsls	r2, r1, #10
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388e:	2200      	movs	r2, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	61fa      	str	r2, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	f7fc fcfa 	bl	8000290 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	3301      	adds	r3, #1
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3750      	adds	r7, #80	@ 0x50
 80038cc:	46bd      	mov	sp, r7
 80038ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	00f42400 	.word	0x00f42400
 80038dc:	007a1200 	.word	0x007a1200

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000014 	.word	0x20000014

080038f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038fc:	f7ff fff0 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0a9b      	lsrs	r3, r3, #10
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	@ (800391c <HAL_RCC_GetPCLK1Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08006ed8 	.word	0x08006ed8

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003924:	f7ff ffdc 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0b5b      	lsrs	r3, r3, #13
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	@ (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	08006ed8 	.word	0x08006ed8

08003948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e041      	b.n	80039de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe f9ba 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f000 fd66 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e044      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x6c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2a:	d013      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x6c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <HAL_TIM_Base_Start_IT+0xb4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x6c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x6c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x6c>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d111      	bne.n	8003a78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d010      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e007      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40014000 	.word	0x40014000

08003aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e041      	b.n	8003b42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe f8d0 	bl	8001c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 fcb4 	bl	8004458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_PWM_Start+0x24>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e022      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d109      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x3e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	e015      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d109      	bne.n	8003ba4 <HAL_TIM_PWM_Start+0x58>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <HAL_TIM_PWM_Start+0x6a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e068      	b.n	8003c90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Start+0x82>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Start+0x92>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_PWM_Start+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_PWM_Start+0xaa>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fedc 	bl	80049bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a23      	ldr	r2, [pc, #140]	@ (8003c98 <HAL_TIM_PWM_Start+0x14c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1d      	ldr	r2, [pc, #116]	@ (8003c98 <HAL_TIM_PWM_Start+0x14c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d018      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x10e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d013      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x10e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a19      	ldr	r2, [pc, #100]	@ (8003c9c <HAL_TIM_PWM_Start+0x150>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00e      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x10e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a17      	ldr	r2, [pc, #92]	@ (8003ca0 <HAL_TIM_PWM_Start+0x154>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x10e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ca4 <HAL_TIM_PWM_Start+0x158>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d004      	beq.n	8003c5a <HAL_TIM_PWM_Start+0x10e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <HAL_TIM_PWM_Start+0x15c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d010      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7c:	e007      	b.n	8003c8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800
 8003ca4:	40000c00 	.word	0x40000c00
 8003ca8:	40014000 	.word	0x40014000

08003cac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e097      	b.n	8003df0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fd fee9 	bl	8001aac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cf0:	f023 0307 	bic.w	r3, r3, #7
 8003cf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 fba9 	bl	8004458 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003d4c:	f023 030c 	bic.w	r3, r3, #12
 8003d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	011a      	lsls	r2, r3, #4
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	031b      	lsls	r3, r3, #12
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d110      	bne.n	8003e4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d102      	bne.n	8003e34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e2e:	7b7b      	ldrb	r3, [r7, #13]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d001      	beq.n	8003e38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e069      	b.n	8003f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e48:	e031      	b.n	8003eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d110      	bne.n	8003e72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e56:	7b3b      	ldrb	r3, [r7, #12]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e055      	b.n	8003f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e70:	e01d      	b.n	8003eae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d108      	bne.n	8003e8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e7e:	7b7b      	ldrb	r3, [r7, #13]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d102      	bne.n	8003e8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e84:	7b3b      	ldrb	r3, [r7, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e03e      	b.n	8003f0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_TIM_Encoder_Start+0xc4>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d008      	beq.n	8003ecc <HAL_TIM_Encoder_Start+0xd4>
 8003eba:	e00f      	b.n	8003edc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fd79 	bl	80049bc <TIM_CCxChannelCmd>
      break;
 8003eca:	e016      	b.n	8003efa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fd71 	bl	80049bc <TIM_CCxChannelCmd>
      break;
 8003eda:	e00e      	b.n	8003efa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fd69 	bl	80049bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fd62 	bl	80049bc <TIM_CCxChannelCmd>
      break;
 8003ef8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0202 	mvn.w	r2, #2
 8003f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa5b 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa4d 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa5e 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa35 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa27 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa38 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa0f 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa01 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa12 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f9e9 	bl	800441a <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9db 	bl	8004406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9ec 	bl	800442e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd fa22 	bl	80014c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fd2a 	bl	8004af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9bd 	bl	8004442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0220 	mvn.w	r2, #32
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fcfc 	bl	8004ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800410e:	2302      	movs	r3, #2
 8004110:	e0ae      	b.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	f200 809f 	bhi.w	8004260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004122:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004261 	.word	0x08004261
 8004130:	08004261 	.word	0x08004261
 8004134:	08004261 	.word	0x08004261
 8004138:	0800419d 	.word	0x0800419d
 800413c:	08004261 	.word	0x08004261
 8004140:	08004261 	.word	0x08004261
 8004144:	08004261 	.word	0x08004261
 8004148:	080041df 	.word	0x080041df
 800414c:	08004261 	.word	0x08004261
 8004150:	08004261 	.word	0x08004261
 8004154:	08004261 	.word	0x08004261
 8004158:	0800421f 	.word	0x0800421f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fa04 	bl	8004570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0208 	orr.w	r2, r2, #8
 8004176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0204 	bic.w	r2, r2, #4
 8004186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	619a      	str	r2, [r3, #24]
      break;
 800419a:	e064      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa4a 	bl	800463c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6999      	ldr	r1, [r3, #24]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	021a      	lsls	r2, r3, #8
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	619a      	str	r2, [r3, #24]
      break;
 80041dc:	e043      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fa95 	bl	8004714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0208 	orr.w	r2, r2, #8
 80041f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0204 	bic.w	r2, r2, #4
 8004208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69d9      	ldr	r1, [r3, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	61da      	str	r2, [r3, #28]
      break;
 800421c:	e023      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fadf 	bl	80047e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69d9      	ldr	r1, [r3, #28]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	021a      	lsls	r2, r3, #8
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	61da      	str	r2, [r3, #28]
      break;
 800425e:	e002      	b.n	8004266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
      break;
 8004264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x1c>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b4      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x186>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd4>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042da:	f000 8086 	beq.w	80043ea <HAL_TIM_ConfigClockSource+0x172>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b70      	cmp	r3, #112	@ 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa6>
 80042e8:	2b70      	cmp	r3, #112	@ 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b60      	cmp	r3, #96	@ 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x11a>
 80042f0:	2b60      	cmp	r3, #96	@ 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b50      	cmp	r3, #80	@ 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xfa>
 80042f8:	2b50      	cmp	r3, #80	@ 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b40      	cmp	r3, #64	@ 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b30      	cmp	r3, #48	@ 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b30      	cmp	r3, #48	@ 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x15a>
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	f000 fb25 	bl	800497c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04f      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	f000 fb0e 	bl	800497c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fa82 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	@ 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fadb 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 8004390:	e02c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 faa1 	bl	80048e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	@ 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 facb 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fa62 	bl	8004888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	@ 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fabb 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00c      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 fab2 	bl	8004946 <TIM_ITRx_SetConfig>
      break;
 80043e2:	e003      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e000      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
	...

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3a      	ldr	r2, [pc, #232]	@ (8004554 <TIM_Base_SetConfig+0xfc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004476:	d00b      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a37      	ldr	r2, [pc, #220]	@ (8004558 <TIM_Base_SetConfig+0x100>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a36      	ldr	r2, [pc, #216]	@ (800455c <TIM_Base_SetConfig+0x104>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_Base_SetConfig+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a35      	ldr	r2, [pc, #212]	@ (8004560 <TIM_Base_SetConfig+0x108>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d108      	bne.n	80044a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004554 <TIM_Base_SetConfig+0xfc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01b      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b0:	d017      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a28      	ldr	r2, [pc, #160]	@ (8004558 <TIM_Base_SetConfig+0x100>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a27      	ldr	r2, [pc, #156]	@ (800455c <TIM_Base_SetConfig+0x104>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <TIM_Base_SetConfig+0x108>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a25      	ldr	r2, [pc, #148]	@ (8004564 <TIM_Base_SetConfig+0x10c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a24      	ldr	r2, [pc, #144]	@ (8004568 <TIM_Base_SetConfig+0x110>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_Base_SetConfig+0x8a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a23      	ldr	r2, [pc, #140]	@ (800456c <TIM_Base_SetConfig+0x114>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d108      	bne.n	80044f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a0e      	ldr	r2, [pc, #56]	@ (8004554 <TIM_Base_SetConfig+0xfc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]
  }
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40014000 	.word	0x40014000
 8004568:	40014400 	.word	0x40014400
 800456c:	40014800 	.word	0x40014800

08004570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0201 	bic.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 0302 	bic.w	r3, r3, #2
 80045b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <TIM_OC1_SetConfig+0xc8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10c      	bne.n	80045e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0308 	bic.w	r3, r3, #8
 80045d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a13      	ldr	r2, [pc, #76]	@ (8004638 <TIM_OC1_SetConfig+0xc8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d111      	bne.n	8004612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	621a      	str	r2, [r3, #32]
}
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40010000 	.word	0x40010000

0800463c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 0210 	bic.w	r2, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0320 	bic.w	r3, r3, #32
 8004686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1e      	ldr	r2, [pc, #120]	@ (8004710 <TIM_OC2_SetConfig+0xd4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10d      	bne.n	80046b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <TIM_OC2_SetConfig+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d113      	bne.n	80046e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40010000 	.word	0x40010000

08004714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <TIM_OC3_SetConfig+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10d      	bne.n	800478e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800478c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a14      	ldr	r2, [pc, #80]	@ (80047e4 <TIM_OC3_SetConfig+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d113      	bne.n	80047be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800479c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40010000 	.word	0x40010000

080047e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	031b      	lsls	r3, r3, #12
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a10      	ldr	r2, [pc, #64]	@ (8004884 <TIM_OC4_SetConfig+0x9c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d109      	bne.n	800485c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800484e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	019b      	lsls	r3, r3, #6
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000

08004888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 030a 	bic.w	r3, r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f023 0210 	bic.w	r2, r3, #16
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	031b      	lsls	r3, r3, #12
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	f043 0307 	orr.w	r3, r3, #7
 8004968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	609a      	str	r2, [r3, #8]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	021a      	lsls	r2, r3, #8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	431a      	orrs	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	609a      	str	r2, [r3, #8]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2201      	movs	r2, #1
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	43db      	mvns	r3, r3
 80049de:	401a      	ands	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e050      	b.n	8004ac2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d013      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a18      	ldr	r2, [pc, #96]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a13      	ldr	r2, [pc, #76]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10c      	bne.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40014000 	.word	0x40014000

08004ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e042      	b.n	8004ba4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd f980 	bl	8001e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	@ 0x24
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fdbd 	bl	80056d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d175      	bne.n	8004cb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Transmit+0x2c>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e06e      	b.n	8004cba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2221      	movs	r2, #33	@ 0x21
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bea:	f7fd fc3d 	bl	8002468 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c20:	e02e      	b.n	8004c80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	@ 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fb1f 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03a      	b.n	8004cba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1cb      	bne.n	8004c22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2140      	movs	r1, #64	@ 0x40
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 faeb 	bl	8005270 <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d112      	bne.n	8004d02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_UART_Receive_IT+0x26>
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e00b      	b.n	8004d04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fb12 	bl	8005322 <UART_Start_Receive_IT>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	e000      	b.n	8004d04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_UART_IRQHandler+0x66>
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fbf2 	bl	8005554 <UART_Receive_IT>
      return;
 8004d70:	e25b      	b.n	800522a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80de 	beq.w	8004f38 <HAL_UART_IRQHandler+0x22c>
 8004d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80d1 	beq.w	8004f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <HAL_UART_IRQHandler+0xae>
 8004da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db2:	f043 0201 	orr.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_UART_IRQHandler+0xd2>
 8004dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	f043 0202 	orr.w	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <HAL_UART_IRQHandler+0xf6>
 8004dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfa:	f043 0204 	orr.w	r2, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <HAL_UART_IRQHandler+0x126>
 8004e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0208 	orr.w	r2, r3, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 81f2 	beq.w	8005220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_UART_IRQHandler+0x14e>
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fb7d 	bl	8005554 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e64:	2b40      	cmp	r3, #64	@ 0x40
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <HAL_UART_IRQHandler+0x17a>
 8004e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d04f      	beq.n	8004f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa85 	bl	8005396 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e96:	2b40      	cmp	r3, #64	@ 0x40
 8004e98:	d141      	bne.n	8004f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3314      	adds	r3, #20
 8004ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1d9      	bne.n	8004e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d013      	beq.n	8004f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80050ec <HAL_UART_IRQHandler+0x3e0>)
 8004ef4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fd feb3 	bl	8002c66 <HAL_DMA_Abort_IT>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f10:	4610      	mov	r0, r2
 8004f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	e00e      	b.n	8004f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f994 	bl	8005244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e00a      	b.n	8004f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f990 	bl	8005244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e006      	b.n	8004f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f98c 	bl	8005244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f32:	e175      	b.n	8005220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	bf00      	nop
    return;
 8004f36:	e173      	b.n	8005220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	f040 814f 	bne.w	80051e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 8148 	beq.w	80051e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8141 	beq.w	80051e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	f040 80b6 	bne.w	80050f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8145 	beq.w	8005224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	f080 813e 	bcs.w	8005224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fba:	f000 8088 	beq.w	80050ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ff6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1d9      	bne.n	8004fbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3314      	adds	r3, #20
 8005010:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800501a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3314      	adds	r3, #20
 800502a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800502e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005032:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005036:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e1      	bne.n	800500a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3314      	adds	r3, #20
 800504c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005058:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3314      	adds	r3, #20
 8005066:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800506a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800506c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005070:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e3      	bne.n	8005046 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800509c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800509e:	f023 0310 	bic.w	r3, r3, #16
 80050a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e3      	bne.n	800508c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fd fd5c 	bl	8002b86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050dc:	b29b      	uxth	r3, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8b7 	bl	8005258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ea:	e09b      	b.n	8005224 <HAL_UART_IRQHandler+0x518>
 80050ec:	0800545d 	.word	0x0800545d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 808e 	beq.w	8005228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800510c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8089 	beq.w	8005228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800513a:	647a      	str	r2, [r7, #68]	@ 0x44
 800513c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e3      	bne.n	8005116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3314      	adds	r3, #20
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	623b      	str	r3, [r7, #32]
   return(result);
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005172:	633a      	str	r2, [r7, #48]	@ 0x30
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e3      	bne.n	800514e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051b8:	61fa      	str	r2, [r7, #28]
 80051ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	69b9      	ldr	r1, [r7, #24]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	617b      	str	r3, [r7, #20]
   return(result);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e3      	bne.n	8005194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f83d 	bl	8005258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051de:	e023      	b.n	8005228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_UART_IRQHandler+0x4f4>
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f943 	bl	8005484 <UART_Transmit_IT>
    return;
 80051fe:	e014      	b.n	800522a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <HAL_UART_IRQHandler+0x51e>
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f983 	bl	8005524 <UART_EndTransmit_IT>
    return;
 800521e:	e004      	b.n	800522a <HAL_UART_IRQHandler+0x51e>
    return;
 8005220:	bf00      	nop
 8005222:	e002      	b.n	800522a <HAL_UART_IRQHandler+0x51e>
      return;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <HAL_UART_IRQHandler+0x51e>
      return;
 8005228:	bf00      	nop
  }
}
 800522a:	37e8      	adds	r7, #232	@ 0xe8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005280:	e03b      	b.n	80052fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d037      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fd f8ed 	bl	8002468 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e03a      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d023      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b80      	cmp	r3, #128	@ 0x80
 80052b6:	d020      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	d01d      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d116      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f857 	bl	8005396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2208      	movs	r2, #8
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e00f      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	79fb      	ldrb	r3, [r7, #7]
 8005314:	429a      	cmp	r2, r3
 8005316:	d0b4      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	4613      	mov	r3, r2
 800532e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2222      	movs	r2, #34	@ 0x22
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005366:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0220 	orr.w	r2, r2, #32
 8005386:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005396:	b480      	push	{r7}
 8005398:	b095      	sub	sp, #84	@ 0x54
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053be:	643a      	str	r2, [r7, #64]	@ 0x40
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e5      	bne.n	800539e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	2b01      	cmp	r3, #1
 800540c:	d119      	bne.n	8005442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	60bb      	str	r3, [r7, #8]
   return(result);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	647b      	str	r3, [r7, #68]	@ 0x44
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800542e:	61ba      	str	r2, [r7, #24]
 8005430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	613b      	str	r3, [r7, #16]
   return(result);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005450:	bf00      	nop
 8005452:	3754      	adds	r7, #84	@ 0x54
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fee4 	bl	8005244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b21      	cmp	r3, #33	@ 0x21
 8005496:	d13e      	bne.n	8005516 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a0:	d114      	bne.n	80054cc <UART_Transmit_IT+0x48>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d110      	bne.n	80054cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	1c9a      	adds	r2, r3, #2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]
 80054ca:	e008      	b.n	80054de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	1c59      	adds	r1, r3, #1
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6211      	str	r1, [r2, #32]
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4619      	mov	r1, r3
 80054ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10f      	bne.n	8005512 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005500:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005510:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800553a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fe73 	bl	8005230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	@ 0x30
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b22      	cmp	r3, #34	@ 0x22
 8005566:	f040 80ae 	bne.w	80056c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005572:	d117      	bne.n	80055a4 <UART_Receive_IT+0x50>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d113      	bne.n	80055a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	b29a      	uxth	r2, r3
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	1c9a      	adds	r2, r3, #2
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80055a2:	e026      	b.n	80055f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055b6:	d007      	beq.n	80055c8 <UART_Receive_IT+0x74>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <UART_Receive_IT+0x82>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e008      	b.n	80055e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4619      	mov	r1, r3
 8005600:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005602:	2b00      	cmp	r3, #0
 8005604:	d15d      	bne.n	80056c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0220 	bic.w	r2, r2, #32
 8005614:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0201 	bic.w	r2, r2, #1
 8005634:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005648:	2b01      	cmp	r3, #1
 800564a:	d135      	bne.n	80056b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005672:	623a      	str	r2, [r7, #32]
 8005674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	69f9      	ldr	r1, [r7, #28]
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e5      	bne.n	8005652 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d10a      	bne.n	80056aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fdd1 	bl	8005258 <HAL_UARTEx_RxEventCallback>
 80056b6:	e002      	b.n	80056be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fc fdd5 	bl	8002268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e002      	b.n	80056c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e000      	b.n	80056c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056c6:	2302      	movs	r3, #2
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3730      	adds	r7, #48	@ 0x30
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b0c0      	sub	sp, #256	@ 0x100
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	68d9      	ldr	r1, [r3, #12]
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	ea40 0301 	orr.w	r3, r0, r1
 80056f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	431a      	orrs	r2, r3
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	431a      	orrs	r2, r3
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005728:	f021 010c 	bic.w	r1, r1, #12
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005736:	430b      	orrs	r3, r1
 8005738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574a:	6999      	ldr	r1, [r3, #24]
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	ea40 0301 	orr.w	r3, r0, r1
 8005756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	4b8f      	ldr	r3, [pc, #572]	@ (800599c <UART_SetConfig+0x2cc>)
 8005760:	429a      	cmp	r2, r3
 8005762:	d005      	beq.n	8005770 <UART_SetConfig+0xa0>
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b8d      	ldr	r3, [pc, #564]	@ (80059a0 <UART_SetConfig+0x2d0>)
 800576c:	429a      	cmp	r2, r3
 800576e:	d104      	bne.n	800577a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005770:	f7fe f8d6 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8005774:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005778:	e003      	b.n	8005782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800577a:	f7fe f8bd 	bl	80038f8 <HAL_RCC_GetPCLK1Freq>
 800577e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800578c:	f040 810c 	bne.w	80059a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005794:	2200      	movs	r2, #0
 8005796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800579a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800579e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057a2:	4622      	mov	r2, r4
 80057a4:	462b      	mov	r3, r5
 80057a6:	1891      	adds	r1, r2, r2
 80057a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057aa:	415b      	adcs	r3, r3
 80057ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057b2:	4621      	mov	r1, r4
 80057b4:	eb12 0801 	adds.w	r8, r2, r1
 80057b8:	4629      	mov	r1, r5
 80057ba:	eb43 0901 	adc.w	r9, r3, r1
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d2:	4690      	mov	r8, r2
 80057d4:	4699      	mov	r9, r3
 80057d6:	4623      	mov	r3, r4
 80057d8:	eb18 0303 	adds.w	r3, r8, r3
 80057dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057e0:	462b      	mov	r3, r5
 80057e2:	eb49 0303 	adc.w	r3, r9, r3
 80057e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057fe:	460b      	mov	r3, r1
 8005800:	18db      	adds	r3, r3, r3
 8005802:	653b      	str	r3, [r7, #80]	@ 0x50
 8005804:	4613      	mov	r3, r2
 8005806:	eb42 0303 	adc.w	r3, r2, r3
 800580a:	657b      	str	r3, [r7, #84]	@ 0x54
 800580c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005814:	f7fa fd3c 	bl	8000290 <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4b61      	ldr	r3, [pc, #388]	@ (80059a4 <UART_SetConfig+0x2d4>)
 800581e:	fba3 2302 	umull	r2, r3, r3, r2
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	011c      	lsls	r4, r3, #4
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005830:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	1891      	adds	r1, r2, r2
 800583e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005840:	415b      	adcs	r3, r3
 8005842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005848:	4641      	mov	r1, r8
 800584a:	eb12 0a01 	adds.w	sl, r2, r1
 800584e:	4649      	mov	r1, r9
 8005850:	eb43 0b01 	adc.w	fp, r3, r1
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005868:	4692      	mov	sl, r2
 800586a:	469b      	mov	fp, r3
 800586c:	4643      	mov	r3, r8
 800586e:	eb1a 0303 	adds.w	r3, sl, r3
 8005872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005876:	464b      	mov	r3, r9
 8005878:	eb4b 0303 	adc.w	r3, fp, r3
 800587c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800588c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005894:	460b      	mov	r3, r1
 8005896:	18db      	adds	r3, r3, r3
 8005898:	643b      	str	r3, [r7, #64]	@ 0x40
 800589a:	4613      	mov	r3, r2
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058aa:	f7fa fcf1 	bl	8000290 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	4b3b      	ldr	r3, [pc, #236]	@ (80059a4 <UART_SetConfig+0x2d4>)
 80058b6:	fba3 2301 	umull	r2, r3, r3, r1
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	2264      	movs	r2, #100	@ 0x64
 80058be:	fb02 f303 	mul.w	r3, r2, r3
 80058c2:	1acb      	subs	r3, r1, r3
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058ca:	4b36      	ldr	r3, [pc, #216]	@ (80059a4 <UART_SetConfig+0x2d4>)
 80058cc:	fba3 2302 	umull	r2, r3, r3, r2
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058d8:	441c      	add	r4, r3
 80058da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058ec:	4642      	mov	r2, r8
 80058ee:	464b      	mov	r3, r9
 80058f0:	1891      	adds	r1, r2, r2
 80058f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058f4:	415b      	adcs	r3, r3
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058fc:	4641      	mov	r1, r8
 80058fe:	1851      	adds	r1, r2, r1
 8005900:	6339      	str	r1, [r7, #48]	@ 0x30
 8005902:	4649      	mov	r1, r9
 8005904:	414b      	adcs	r3, r1
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005914:	4659      	mov	r1, fp
 8005916:	00cb      	lsls	r3, r1, #3
 8005918:	4651      	mov	r1, sl
 800591a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800591e:	4651      	mov	r1, sl
 8005920:	00ca      	lsls	r2, r1, #3
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	4603      	mov	r3, r0
 8005928:	4642      	mov	r2, r8
 800592a:	189b      	adds	r3, r3, r2
 800592c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005930:	464b      	mov	r3, r9
 8005932:	460a      	mov	r2, r1
 8005934:	eb42 0303 	adc.w	r3, r2, r3
 8005938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800594c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005950:	460b      	mov	r3, r1
 8005952:	18db      	adds	r3, r3, r3
 8005954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005956:	4613      	mov	r3, r2
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800595e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005966:	f7fa fc93 	bl	8000290 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <UART_SetConfig+0x2d4>)
 8005970:	fba3 1302 	umull	r1, r3, r3, r2
 8005974:	095b      	lsrs	r3, r3, #5
 8005976:	2164      	movs	r1, #100	@ 0x64
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	3332      	adds	r3, #50	@ 0x32
 8005982:	4a08      	ldr	r2, [pc, #32]	@ (80059a4 <UART_SetConfig+0x2d4>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f003 0207 	and.w	r2, r3, #7
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4422      	add	r2, r4
 8005996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005998:	e106      	b.n	8005ba8 <UART_SetConfig+0x4d8>
 800599a:	bf00      	nop
 800599c:	40011000 	.word	0x40011000
 80059a0:	40011400 	.word	0x40011400
 80059a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059ba:	4642      	mov	r2, r8
 80059bc:	464b      	mov	r3, r9
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	6239      	str	r1, [r7, #32]
 80059c2:	415b      	adcs	r3, r3
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ca:	4641      	mov	r1, r8
 80059cc:	1854      	adds	r4, r2, r1
 80059ce:	4649      	mov	r1, r9
 80059d0:	eb43 0501 	adc.w	r5, r3, r1
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	00eb      	lsls	r3, r5, #3
 80059de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e2:	00e2      	lsls	r2, r4, #3
 80059e4:	4614      	mov	r4, r2
 80059e6:	461d      	mov	r5, r3
 80059e8:	4643      	mov	r3, r8
 80059ea:	18e3      	adds	r3, r4, r3
 80059ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059f0:	464b      	mov	r3, r9
 80059f2:	eb45 0303 	adc.w	r3, r5, r3
 80059f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a0a:	f04f 0200 	mov.w	r2, #0
 8005a0e:	f04f 0300 	mov.w	r3, #0
 8005a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a16:	4629      	mov	r1, r5
 8005a18:	008b      	lsls	r3, r1, #2
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a20:	4621      	mov	r1, r4
 8005a22:	008a      	lsls	r2, r1, #2
 8005a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a28:	f7fa fc32 	bl	8000290 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4b60      	ldr	r3, [pc, #384]	@ (8005bb4 <UART_SetConfig+0x4e4>)
 8005a32:	fba3 2302 	umull	r2, r3, r3, r2
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	011c      	lsls	r4, r3, #4
 8005a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	1891      	adds	r1, r2, r2
 8005a52:	61b9      	str	r1, [r7, #24]
 8005a54:	415b      	adcs	r3, r3
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	1851      	adds	r1, r2, r1
 8005a60:	6139      	str	r1, [r7, #16]
 8005a62:	4649      	mov	r1, r9
 8005a64:	414b      	adcs	r3, r1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a74:	4659      	mov	r1, fp
 8005a76:	00cb      	lsls	r3, r1, #3
 8005a78:	4651      	mov	r1, sl
 8005a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7e:	4651      	mov	r1, sl
 8005a80:	00ca      	lsls	r2, r1, #3
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	4642      	mov	r2, r8
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a90:	464b      	mov	r3, r9
 8005a92:	460a      	mov	r2, r1
 8005a94:	eb42 0303 	adc.w	r3, r2, r3
 8005a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	008b      	lsls	r3, r1, #2
 8005ab8:	4641      	mov	r1, r8
 8005aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005abe:	4641      	mov	r1, r8
 8005ac0:	008a      	lsls	r2, r1, #2
 8005ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ac6:	f7fa fbe3 	bl	8000290 <__aeabi_uldivmod>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4b38      	ldr	r3, [pc, #224]	@ (8005bb4 <UART_SetConfig+0x4e4>)
 8005ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2264      	movs	r2, #100	@ 0x64
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	1acb      	subs	r3, r1, r3
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	3332      	adds	r3, #50	@ 0x32
 8005ae4:	4a33      	ldr	r2, [pc, #204]	@ (8005bb4 <UART_SetConfig+0x4e4>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005af0:	441c      	add	r4, r3
 8005af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af6:	2200      	movs	r2, #0
 8005af8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005afa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b00:	4642      	mov	r2, r8
 8005b02:	464b      	mov	r3, r9
 8005b04:	1891      	adds	r1, r2, r2
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	415b      	adcs	r3, r3
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b10:	4641      	mov	r1, r8
 8005b12:	1851      	adds	r1, r2, r1
 8005b14:	6039      	str	r1, [r7, #0]
 8005b16:	4649      	mov	r1, r9
 8005b18:	414b      	adcs	r3, r1
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b28:	4659      	mov	r1, fp
 8005b2a:	00cb      	lsls	r3, r1, #3
 8005b2c:	4651      	mov	r1, sl
 8005b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b32:	4651      	mov	r1, sl
 8005b34:	00ca      	lsls	r2, r1, #3
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b42:	464b      	mov	r3, r9
 8005b44:	460a      	mov	r2, r1
 8005b46:	eb42 0303 	adc.w	r3, r2, r3
 8005b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b56:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b64:	4649      	mov	r1, r9
 8005b66:	008b      	lsls	r3, r1, #2
 8005b68:	4641      	mov	r1, r8
 8005b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6e:	4641      	mov	r1, r8
 8005b70:	008a      	lsls	r2, r1, #2
 8005b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b76:	f7fa fb8b 	bl	8000290 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <UART_SetConfig+0x4e4>)
 8005b80:	fba3 1302 	umull	r1, r3, r3, r2
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	2164      	movs	r1, #100	@ 0x64
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	3332      	adds	r3, #50	@ 0x32
 8005b92:	4a08      	ldr	r2, [pc, #32]	@ (8005bb4 <UART_SetConfig+0x4e4>)
 8005b94:	fba2 2303 	umull	r2, r3, r2, r3
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4422      	add	r2, r4
 8005ba6:	609a      	str	r2, [r3, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb4:	51eb851f 	.word	0x51eb851f

08005bb8 <sniprintf>:
 8005bb8:	b40c      	push	{r2, r3}
 8005bba:	b530      	push	{r4, r5, lr}
 8005bbc:	4b18      	ldr	r3, [pc, #96]	@ (8005c20 <sniprintf+0x68>)
 8005bbe:	1e0c      	subs	r4, r1, #0
 8005bc0:	681d      	ldr	r5, [r3, #0]
 8005bc2:	b09d      	sub	sp, #116	@ 0x74
 8005bc4:	da08      	bge.n	8005bd8 <sniprintf+0x20>
 8005bc6:	238b      	movs	r3, #139	@ 0x8b
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	f04f 30ff 	mov.w	r0, #4294967295
 8005bce:	b01d      	add	sp, #116	@ 0x74
 8005bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd4:	b002      	add	sp, #8
 8005bd6:	4770      	bx	lr
 8005bd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005bdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005be6:	bf14      	ite	ne
 8005be8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005bec:	4623      	moveq	r3, r4
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	9307      	str	r3, [sp, #28]
 8005bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bf6:	9002      	str	r0, [sp, #8]
 8005bf8:	9006      	str	r0, [sp, #24]
 8005bfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bfe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c00:	ab21      	add	r3, sp, #132	@ 0x84
 8005c02:	a902      	add	r1, sp, #8
 8005c04:	4628      	mov	r0, r5
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	f000 f9c2 	bl	8005f90 <_svfiprintf_r>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	bfbc      	itt	lt
 8005c10:	238b      	movlt	r3, #139	@ 0x8b
 8005c12:	602b      	strlt	r3, [r5, #0]
 8005c14:	2c00      	cmp	r4, #0
 8005c16:	d0da      	beq.n	8005bce <sniprintf+0x16>
 8005c18:	9b02      	ldr	r3, [sp, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e7d6      	b.n	8005bce <sniprintf+0x16>
 8005c20:	20000020 	.word	0x20000020

08005c24 <siscanf>:
 8005c24:	b40e      	push	{r1, r2, r3}
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	b09d      	sub	sp, #116	@ 0x74
 8005c2a:	ac21      	add	r4, sp, #132	@ 0x84
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005c32:	f854 6b04 	ldr.w	r6, [r4], #4
 8005c36:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005c3a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8005c3c:	9002      	str	r0, [sp, #8]
 8005c3e:	9006      	str	r0, [sp, #24]
 8005c40:	f7fa face 	bl	80001e0 <strlen>
 8005c44:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <siscanf+0x50>)
 8005c46:	9003      	str	r0, [sp, #12]
 8005c48:	9007      	str	r0, [sp, #28]
 8005c4a:	480b      	ldr	r0, [pc, #44]	@ (8005c78 <siscanf+0x54>)
 8005c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c56:	4632      	mov	r2, r6
 8005c58:	4623      	mov	r3, r4
 8005c5a:	a902      	add	r1, sp, #8
 8005c5c:	6800      	ldr	r0, [r0, #0]
 8005c5e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005c60:	9514      	str	r5, [sp, #80]	@ 0x50
 8005c62:	9401      	str	r4, [sp, #4]
 8005c64:	f000 faea 	bl	800623c <__ssvfiscanf_r>
 8005c68:	b01d      	add	sp, #116	@ 0x74
 8005c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c6e:	b003      	add	sp, #12
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	08005c7d 	.word	0x08005c7d
 8005c78:	20000020 	.word	0x20000020

08005c7c <__seofread>:
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	4770      	bx	lr

08005c80 <memset>:
 8005c80:	4402      	add	r2, r0
 8005c82:	4603      	mov	r3, r0
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memset+0xa>
 8005c88:	4770      	bx	lr
 8005c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8e:	e7f9      	b.n	8005c84 <memset+0x4>

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	@ (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000020 	.word	0x20000020

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	@ (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	@ (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f001 f8e2 	bl	8006e78 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08007038 	.word	0x08007038
 8005cd8:	08007038 	.word	0x08007038
 8005cdc:	08007038 	.word	0x08007038
 8005ce0:	0800703c 	.word	0x0800703c

08005ce4 <__retarget_lock_acquire_recursive>:
 8005ce4:	4770      	bx	lr

08005ce6 <__retarget_lock_release_recursive>:
 8005ce6:	4770      	bx	lr

08005ce8 <_free_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4605      	mov	r5, r0
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d041      	beq.n	8005d74 <_free_r+0x8c>
 8005cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf4:	1f0c      	subs	r4, r1, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfb8      	it	lt
 8005cfa:	18e4      	addlt	r4, r4, r3
 8005cfc:	f000 f8e0 	bl	8005ec0 <__malloc_lock>
 8005d00:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <_free_r+0x90>)
 8005d02:	6813      	ldr	r3, [r2, #0]
 8005d04:	b933      	cbnz	r3, 8005d14 <_free_r+0x2c>
 8005d06:	6063      	str	r3, [r4, #4]
 8005d08:	6014      	str	r4, [r2, #0]
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d10:	f000 b8dc 	b.w	8005ecc <__malloc_unlock>
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	d908      	bls.n	8005d2a <_free_r+0x42>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	1821      	adds	r1, r4, r0
 8005d1c:	428b      	cmp	r3, r1
 8005d1e:	bf01      	itttt	eq
 8005d20:	6819      	ldreq	r1, [r3, #0]
 8005d22:	685b      	ldreq	r3, [r3, #4]
 8005d24:	1809      	addeq	r1, r1, r0
 8005d26:	6021      	streq	r1, [r4, #0]
 8005d28:	e7ed      	b.n	8005d06 <_free_r+0x1e>
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	b10b      	cbz	r3, 8005d34 <_free_r+0x4c>
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	d9fa      	bls.n	8005d2a <_free_r+0x42>
 8005d34:	6811      	ldr	r1, [r2, #0]
 8005d36:	1850      	adds	r0, r2, r1
 8005d38:	42a0      	cmp	r0, r4
 8005d3a:	d10b      	bne.n	8005d54 <_free_r+0x6c>
 8005d3c:	6820      	ldr	r0, [r4, #0]
 8005d3e:	4401      	add	r1, r0
 8005d40:	1850      	adds	r0, r2, r1
 8005d42:	4283      	cmp	r3, r0
 8005d44:	6011      	str	r1, [r2, #0]
 8005d46:	d1e0      	bne.n	8005d0a <_free_r+0x22>
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	6053      	str	r3, [r2, #4]
 8005d4e:	4408      	add	r0, r1
 8005d50:	6010      	str	r0, [r2, #0]
 8005d52:	e7da      	b.n	8005d0a <_free_r+0x22>
 8005d54:	d902      	bls.n	8005d5c <_free_r+0x74>
 8005d56:	230c      	movs	r3, #12
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	e7d6      	b.n	8005d0a <_free_r+0x22>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	1821      	adds	r1, r4, r0
 8005d60:	428b      	cmp	r3, r1
 8005d62:	bf04      	itt	eq
 8005d64:	6819      	ldreq	r1, [r3, #0]
 8005d66:	685b      	ldreq	r3, [r3, #4]
 8005d68:	6063      	str	r3, [r4, #4]
 8005d6a:	bf04      	itt	eq
 8005d6c:	1809      	addeq	r1, r1, r0
 8005d6e:	6021      	streq	r1, [r4, #0]
 8005d70:	6054      	str	r4, [r2, #4]
 8005d72:	e7ca      	b.n	8005d0a <_free_r+0x22>
 8005d74:	bd38      	pop	{r3, r4, r5, pc}
 8005d76:	bf00      	nop
 8005d78:	200007e8 	.word	0x200007e8

08005d7c <sbrk_aligned>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005dbc <sbrk_aligned+0x40>)
 8005d80:	460c      	mov	r4, r1
 8005d82:	6831      	ldr	r1, [r6, #0]
 8005d84:	4605      	mov	r5, r0
 8005d86:	b911      	cbnz	r1, 8005d8e <sbrk_aligned+0x12>
 8005d88:	f000 ff36 	bl	8006bf8 <_sbrk_r>
 8005d8c:	6030      	str	r0, [r6, #0]
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4628      	mov	r0, r5
 8005d92:	f000 ff31 	bl	8006bf8 <_sbrk_r>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d103      	bne.n	8005da2 <sbrk_aligned+0x26>
 8005d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d9e:	4620      	mov	r0, r4
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	1cc4      	adds	r4, r0, #3
 8005da4:	f024 0403 	bic.w	r4, r4, #3
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d0f8      	beq.n	8005d9e <sbrk_aligned+0x22>
 8005dac:	1a21      	subs	r1, r4, r0
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 ff22 	bl	8006bf8 <_sbrk_r>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d1f2      	bne.n	8005d9e <sbrk_aligned+0x22>
 8005db8:	e7ef      	b.n	8005d9a <sbrk_aligned+0x1e>
 8005dba:	bf00      	nop
 8005dbc:	200007e4 	.word	0x200007e4

08005dc0 <_malloc_r>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	1ccd      	adds	r5, r1, #3
 8005dc6:	f025 0503 	bic.w	r5, r5, #3
 8005dca:	3508      	adds	r5, #8
 8005dcc:	2d0c      	cmp	r5, #12
 8005dce:	bf38      	it	cc
 8005dd0:	250c      	movcc	r5, #12
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	db01      	blt.n	8005ddc <_malloc_r+0x1c>
 8005dd8:	42a9      	cmp	r1, r5
 8005dda:	d904      	bls.n	8005de6 <_malloc_r+0x26>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	2000      	movs	r0, #0
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ebc <_malloc_r+0xfc>
 8005dea:	f000 f869 	bl	8005ec0 <__malloc_lock>
 8005dee:	f8d8 3000 	ldr.w	r3, [r8]
 8005df2:	461c      	mov	r4, r3
 8005df4:	bb44      	cbnz	r4, 8005e48 <_malloc_r+0x88>
 8005df6:	4629      	mov	r1, r5
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff ffbf 	bl	8005d7c <sbrk_aligned>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	4604      	mov	r4, r0
 8005e02:	d158      	bne.n	8005eb6 <_malloc_r+0xf6>
 8005e04:	f8d8 4000 	ldr.w	r4, [r8]
 8005e08:	4627      	mov	r7, r4
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	d143      	bne.n	8005e96 <_malloc_r+0xd6>
 8005e0e:	2c00      	cmp	r4, #0
 8005e10:	d04b      	beq.n	8005eaa <_malloc_r+0xea>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	4639      	mov	r1, r7
 8005e16:	4630      	mov	r0, r6
 8005e18:	eb04 0903 	add.w	r9, r4, r3
 8005e1c:	f000 feec 	bl	8006bf8 <_sbrk_r>
 8005e20:	4581      	cmp	r9, r0
 8005e22:	d142      	bne.n	8005eaa <_malloc_r+0xea>
 8005e24:	6821      	ldr	r1, [r4, #0]
 8005e26:	1a6d      	subs	r5, r5, r1
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffa6 	bl	8005d7c <sbrk_aligned>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d03a      	beq.n	8005eaa <_malloc_r+0xea>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	442b      	add	r3, r5
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	bb62      	cbnz	r2, 8005e9c <_malloc_r+0xdc>
 8005e42:	f8c8 7000 	str.w	r7, [r8]
 8005e46:	e00f      	b.n	8005e68 <_malloc_r+0xa8>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	1b52      	subs	r2, r2, r5
 8005e4c:	d420      	bmi.n	8005e90 <_malloc_r+0xd0>
 8005e4e:	2a0b      	cmp	r2, #11
 8005e50:	d917      	bls.n	8005e82 <_malloc_r+0xc2>
 8005e52:	1961      	adds	r1, r4, r5
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	6059      	strne	r1, [r3, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	bf08      	it	eq
 8005e60:	f8c8 1000 	streq.w	r1, [r8]
 8005e64:	5162      	str	r2, [r4, r5]
 8005e66:	604b      	str	r3, [r1, #4]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f82f 	bl	8005ecc <__malloc_unlock>
 8005e6e:	f104 000b 	add.w	r0, r4, #11
 8005e72:	1d23      	adds	r3, r4, #4
 8005e74:	f020 0007 	bic.w	r0, r0, #7
 8005e78:	1ac2      	subs	r2, r0, r3
 8005e7a:	bf1c      	itt	ne
 8005e7c:	1a1b      	subne	r3, r3, r0
 8005e7e:	50a3      	strne	r3, [r4, r2]
 8005e80:	e7af      	b.n	8005de2 <_malloc_r+0x22>
 8005e82:	6862      	ldr	r2, [r4, #4]
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	bf0c      	ite	eq
 8005e88:	f8c8 2000 	streq.w	r2, [r8]
 8005e8c:	605a      	strne	r2, [r3, #4]
 8005e8e:	e7eb      	b.n	8005e68 <_malloc_r+0xa8>
 8005e90:	4623      	mov	r3, r4
 8005e92:	6864      	ldr	r4, [r4, #4]
 8005e94:	e7ae      	b.n	8005df4 <_malloc_r+0x34>
 8005e96:	463c      	mov	r4, r7
 8005e98:	687f      	ldr	r7, [r7, #4]
 8005e9a:	e7b6      	b.n	8005e0a <_malloc_r+0x4a>
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d1fb      	bne.n	8005e9c <_malloc_r+0xdc>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6053      	str	r3, [r2, #4]
 8005ea8:	e7de      	b.n	8005e68 <_malloc_r+0xa8>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 f80c 	bl	8005ecc <__malloc_unlock>
 8005eb4:	e794      	b.n	8005de0 <_malloc_r+0x20>
 8005eb6:	6005      	str	r5, [r0, #0]
 8005eb8:	e7d6      	b.n	8005e68 <_malloc_r+0xa8>
 8005eba:	bf00      	nop
 8005ebc:	200007e8 	.word	0x200007e8

08005ec0 <__malloc_lock>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	@ (8005ec8 <__malloc_lock+0x8>)
 8005ec2:	f7ff bf0f 	b.w	8005ce4 <__retarget_lock_acquire_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	200007e0 	.word	0x200007e0

08005ecc <__malloc_unlock>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	@ (8005ed4 <__malloc_unlock+0x8>)
 8005ece:	f7ff bf0a 	b.w	8005ce6 <__retarget_lock_release_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	200007e0 	.word	0x200007e0

08005ed8 <__ssputs_r>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	688e      	ldr	r6, [r1, #8]
 8005ede:	461f      	mov	r7, r3
 8005ee0:	42be      	cmp	r6, r7
 8005ee2:	680b      	ldr	r3, [r1, #0]
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4690      	mov	r8, r2
 8005eea:	d82d      	bhi.n	8005f48 <__ssputs_r+0x70>
 8005eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ef4:	d026      	beq.n	8005f44 <__ssputs_r+0x6c>
 8005ef6:	6965      	ldr	r5, [r4, #20]
 8005ef8:	6909      	ldr	r1, [r1, #16]
 8005efa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005efe:	eba3 0901 	sub.w	r9, r3, r1
 8005f02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f06:	1c7b      	adds	r3, r7, #1
 8005f08:	444b      	add	r3, r9
 8005f0a:	106d      	asrs	r5, r5, #1
 8005f0c:	429d      	cmp	r5, r3
 8005f0e:	bf38      	it	cc
 8005f10:	461d      	movcc	r5, r3
 8005f12:	0553      	lsls	r3, r2, #21
 8005f14:	d527      	bpl.n	8005f66 <__ssputs_r+0x8e>
 8005f16:	4629      	mov	r1, r5
 8005f18:	f7ff ff52 	bl	8005dc0 <_malloc_r>
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	b360      	cbz	r0, 8005f7a <__ssputs_r+0xa2>
 8005f20:	6921      	ldr	r1, [r4, #16]
 8005f22:	464a      	mov	r2, r9
 8005f24:	f000 fe78 	bl	8006c18 <memcpy>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	6126      	str	r6, [r4, #16]
 8005f36:	6165      	str	r5, [r4, #20]
 8005f38:	444e      	add	r6, r9
 8005f3a:	eba5 0509 	sub.w	r5, r5, r9
 8005f3e:	6026      	str	r6, [r4, #0]
 8005f40:	60a5      	str	r5, [r4, #8]
 8005f42:	463e      	mov	r6, r7
 8005f44:	42be      	cmp	r6, r7
 8005f46:	d900      	bls.n	8005f4a <__ssputs_r+0x72>
 8005f48:	463e      	mov	r6, r7
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4641      	mov	r1, r8
 8005f50:	f000 fe37 	bl	8006bc2 <memmove>
 8005f54:	68a3      	ldr	r3, [r4, #8]
 8005f56:	1b9b      	subs	r3, r3, r6
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	4433      	add	r3, r6
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2000      	movs	r0, #0
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	462a      	mov	r2, r5
 8005f68:	f000 fe64 	bl	8006c34 <_realloc_r>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d1e0      	bne.n	8005f34 <__ssputs_r+0x5c>
 8005f72:	6921      	ldr	r1, [r4, #16]
 8005f74:	4650      	mov	r0, sl
 8005f76:	f7ff feb7 	bl	8005ce8 <_free_r>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	f8ca 3000 	str.w	r3, [sl]
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f86:	81a3      	strh	r3, [r4, #12]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	e7e9      	b.n	8005f62 <__ssputs_r+0x8a>
	...

08005f90 <_svfiprintf_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	4698      	mov	r8, r3
 8005f96:	898b      	ldrh	r3, [r1, #12]
 8005f98:	061b      	lsls	r3, r3, #24
 8005f9a:	b09d      	sub	sp, #116	@ 0x74
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	d510      	bpl.n	8005fc6 <_svfiprintf_r+0x36>
 8005fa4:	690b      	ldr	r3, [r1, #16]
 8005fa6:	b973      	cbnz	r3, 8005fc6 <_svfiprintf_r+0x36>
 8005fa8:	2140      	movs	r1, #64	@ 0x40
 8005faa:	f7ff ff09 	bl	8005dc0 <_malloc_r>
 8005fae:	6028      	str	r0, [r5, #0]
 8005fb0:	6128      	str	r0, [r5, #16]
 8005fb2:	b930      	cbnz	r0, 8005fc2 <_svfiprintf_r+0x32>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	b01d      	add	sp, #116	@ 0x74
 8005fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc2:	2340      	movs	r3, #64	@ 0x40
 8005fc4:	616b      	str	r3, [r5, #20]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fca:	2320      	movs	r3, #32
 8005fcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd4:	2330      	movs	r3, #48	@ 0x30
 8005fd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006174 <_svfiprintf_r+0x1e4>
 8005fda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fde:	f04f 0901 	mov.w	r9, #1
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	469a      	mov	sl, r3
 8005fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fea:	b10a      	cbz	r2, 8005ff0 <_svfiprintf_r+0x60>
 8005fec:	2a25      	cmp	r2, #37	@ 0x25
 8005fee:	d1f9      	bne.n	8005fe4 <_svfiprintf_r+0x54>
 8005ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff4:	d00b      	beq.n	800600e <_svfiprintf_r+0x7e>
 8005ff6:	465b      	mov	r3, fp
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7ff ff6b 	bl	8005ed8 <__ssputs_r>
 8006002:	3001      	adds	r0, #1
 8006004:	f000 80a7 	beq.w	8006156 <_svfiprintf_r+0x1c6>
 8006008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800600a:	445a      	add	r2, fp
 800600c:	9209      	str	r2, [sp, #36]	@ 0x24
 800600e:	f89a 3000 	ldrb.w	r3, [sl]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 809f 	beq.w	8006156 <_svfiprintf_r+0x1c6>
 8006018:	2300      	movs	r3, #0
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006022:	f10a 0a01 	add.w	sl, sl, #1
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800602e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006030:	4654      	mov	r4, sl
 8006032:	2205      	movs	r2, #5
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	484e      	ldr	r0, [pc, #312]	@ (8006174 <_svfiprintf_r+0x1e4>)
 800603a:	f7fa f8d9 	bl	80001f0 <memchr>
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	b9d8      	cbnz	r0, 800607a <_svfiprintf_r+0xea>
 8006042:	06d0      	lsls	r0, r2, #27
 8006044:	bf44      	itt	mi
 8006046:	2320      	movmi	r3, #32
 8006048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800604c:	0711      	lsls	r1, r2, #28
 800604e:	bf44      	itt	mi
 8006050:	232b      	movmi	r3, #43	@ 0x2b
 8006052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006056:	f89a 3000 	ldrb.w	r3, [sl]
 800605a:	2b2a      	cmp	r3, #42	@ 0x2a
 800605c:	d015      	beq.n	800608a <_svfiprintf_r+0xfa>
 800605e:	9a07      	ldr	r2, [sp, #28]
 8006060:	4654      	mov	r4, sl
 8006062:	2000      	movs	r0, #0
 8006064:	f04f 0c0a 	mov.w	ip, #10
 8006068:	4621      	mov	r1, r4
 800606a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606e:	3b30      	subs	r3, #48	@ 0x30
 8006070:	2b09      	cmp	r3, #9
 8006072:	d94b      	bls.n	800610c <_svfiprintf_r+0x17c>
 8006074:	b1b0      	cbz	r0, 80060a4 <_svfiprintf_r+0x114>
 8006076:	9207      	str	r2, [sp, #28]
 8006078:	e014      	b.n	80060a4 <_svfiprintf_r+0x114>
 800607a:	eba0 0308 	sub.w	r3, r0, r8
 800607e:	fa09 f303 	lsl.w	r3, r9, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	46a2      	mov	sl, r4
 8006088:	e7d2      	b.n	8006030 <_svfiprintf_r+0xa0>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	1d19      	adds	r1, r3, #4
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	9103      	str	r1, [sp, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfbb      	ittet	lt
 8006096:	425b      	neglt	r3, r3
 8006098:	f042 0202 	orrlt.w	r2, r2, #2
 800609c:	9307      	strge	r3, [sp, #28]
 800609e:	9307      	strlt	r3, [sp, #28]
 80060a0:	bfb8      	it	lt
 80060a2:	9204      	strlt	r2, [sp, #16]
 80060a4:	7823      	ldrb	r3, [r4, #0]
 80060a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80060a8:	d10a      	bne.n	80060c0 <_svfiprintf_r+0x130>
 80060aa:	7863      	ldrb	r3, [r4, #1]
 80060ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ae:	d132      	bne.n	8006116 <_svfiprintf_r+0x186>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9203      	str	r2, [sp, #12]
 80060b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060bc:	3402      	adds	r4, #2
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006184 <_svfiprintf_r+0x1f4>
 80060c4:	7821      	ldrb	r1, [r4, #0]
 80060c6:	2203      	movs	r2, #3
 80060c8:	4650      	mov	r0, sl
 80060ca:	f7fa f891 	bl	80001f0 <memchr>
 80060ce:	b138      	cbz	r0, 80060e0 <_svfiprintf_r+0x150>
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	eba0 000a 	sub.w	r0, r0, sl
 80060d6:	2240      	movs	r2, #64	@ 0x40
 80060d8:	4082      	lsls	r2, r0
 80060da:	4313      	orrs	r3, r2
 80060dc:	3401      	adds	r4, #1
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e4:	4824      	ldr	r0, [pc, #144]	@ (8006178 <_svfiprintf_r+0x1e8>)
 80060e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060ea:	2206      	movs	r2, #6
 80060ec:	f7fa f880 	bl	80001f0 <memchr>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d036      	beq.n	8006162 <_svfiprintf_r+0x1d2>
 80060f4:	4b21      	ldr	r3, [pc, #132]	@ (800617c <_svfiprintf_r+0x1ec>)
 80060f6:	bb1b      	cbnz	r3, 8006140 <_svfiprintf_r+0x1b0>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	3307      	adds	r3, #7
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	3308      	adds	r3, #8
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006106:	4433      	add	r3, r6
 8006108:	9309      	str	r3, [sp, #36]	@ 0x24
 800610a:	e76a      	b.n	8005fe2 <_svfiprintf_r+0x52>
 800610c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006110:	460c      	mov	r4, r1
 8006112:	2001      	movs	r0, #1
 8006114:	e7a8      	b.n	8006068 <_svfiprintf_r+0xd8>
 8006116:	2300      	movs	r3, #0
 8006118:	3401      	adds	r4, #1
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 0c0a 	mov.w	ip, #10
 8006122:	4620      	mov	r0, r4
 8006124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006128:	3a30      	subs	r2, #48	@ 0x30
 800612a:	2a09      	cmp	r2, #9
 800612c:	d903      	bls.n	8006136 <_svfiprintf_r+0x1a6>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0c6      	beq.n	80060c0 <_svfiprintf_r+0x130>
 8006132:	9105      	str	r1, [sp, #20]
 8006134:	e7c4      	b.n	80060c0 <_svfiprintf_r+0x130>
 8006136:	fb0c 2101 	mla	r1, ip, r1, r2
 800613a:	4604      	mov	r4, r0
 800613c:	2301      	movs	r3, #1
 800613e:	e7f0      	b.n	8006122 <_svfiprintf_r+0x192>
 8006140:	ab03      	add	r3, sp, #12
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	462a      	mov	r2, r5
 8006146:	4b0e      	ldr	r3, [pc, #56]	@ (8006180 <_svfiprintf_r+0x1f0>)
 8006148:	a904      	add	r1, sp, #16
 800614a:	4638      	mov	r0, r7
 800614c:	f3af 8000 	nop.w
 8006150:	1c42      	adds	r2, r0, #1
 8006152:	4606      	mov	r6, r0
 8006154:	d1d6      	bne.n	8006104 <_svfiprintf_r+0x174>
 8006156:	89ab      	ldrh	r3, [r5, #12]
 8006158:	065b      	lsls	r3, r3, #25
 800615a:	f53f af2d 	bmi.w	8005fb8 <_svfiprintf_r+0x28>
 800615e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006160:	e72c      	b.n	8005fbc <_svfiprintf_r+0x2c>
 8006162:	ab03      	add	r3, sp, #12
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	462a      	mov	r2, r5
 8006168:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <_svfiprintf_r+0x1f0>)
 800616a:	a904      	add	r1, sp, #16
 800616c:	4638      	mov	r0, r7
 800616e:	f000 fa49 	bl	8006604 <_printf_i>
 8006172:	e7ed      	b.n	8006150 <_svfiprintf_r+0x1c0>
 8006174:	08006ee0 	.word	0x08006ee0
 8006178:	08006eea 	.word	0x08006eea
 800617c:	00000000 	.word	0x00000000
 8006180:	08005ed9 	.word	0x08005ed9
 8006184:	08006ee6 	.word	0x08006ee6

08006188 <_sungetc_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	1c4b      	adds	r3, r1, #1
 800618c:	4614      	mov	r4, r2
 800618e:	d103      	bne.n	8006198 <_sungetc_r+0x10>
 8006190:	f04f 35ff 	mov.w	r5, #4294967295
 8006194:	4628      	mov	r0, r5
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	8993      	ldrh	r3, [r2, #12]
 800619a:	f023 0320 	bic.w	r3, r3, #32
 800619e:	8193      	strh	r3, [r2, #12]
 80061a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061a2:	6852      	ldr	r2, [r2, #4]
 80061a4:	b2cd      	uxtb	r5, r1
 80061a6:	b18b      	cbz	r3, 80061cc <_sungetc_r+0x44>
 80061a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80061aa:	4293      	cmp	r3, r2
 80061ac:	dd08      	ble.n	80061c0 <_sungetc_r+0x38>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	3301      	adds	r3, #1
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	e7e9      	b.n	8006194 <_sungetc_r+0xc>
 80061c0:	4621      	mov	r1, r4
 80061c2:	f000 fcc4 	bl	8006b4e <__submore>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d0f1      	beq.n	80061ae <_sungetc_r+0x26>
 80061ca:	e7e1      	b.n	8006190 <_sungetc_r+0x8>
 80061cc:	6921      	ldr	r1, [r4, #16]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	b151      	cbz	r1, 80061e8 <_sungetc_r+0x60>
 80061d2:	4299      	cmp	r1, r3
 80061d4:	d208      	bcs.n	80061e8 <_sungetc_r+0x60>
 80061d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80061da:	42a9      	cmp	r1, r5
 80061dc:	d104      	bne.n	80061e8 <_sungetc_r+0x60>
 80061de:	3b01      	subs	r3, #1
 80061e0:	3201      	adds	r2, #1
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	6062      	str	r2, [r4, #4]
 80061e6:	e7d5      	b.n	8006194 <_sungetc_r+0xc>
 80061e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80061ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80061f2:	2303      	movs	r3, #3
 80061f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80061f6:	4623      	mov	r3, r4
 80061f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	2301      	movs	r3, #1
 8006200:	e7dc      	b.n	80061bc <_sungetc_r+0x34>

08006202 <__ssrefill_r>:
 8006202:	b510      	push	{r4, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006208:	b169      	cbz	r1, 8006226 <__ssrefill_r+0x24>
 800620a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800620e:	4299      	cmp	r1, r3
 8006210:	d001      	beq.n	8006216 <__ssrefill_r+0x14>
 8006212:	f7ff fd69 	bl	8005ce8 <_free_r>
 8006216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006218:	6063      	str	r3, [r4, #4]
 800621a:	2000      	movs	r0, #0
 800621c:	6360      	str	r0, [r4, #52]	@ 0x34
 800621e:	b113      	cbz	r3, 8006226 <__ssrefill_r+0x24>
 8006220:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	bd10      	pop	{r4, pc}
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	6063      	str	r3, [r4, #4]
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f043 0320 	orr.w	r3, r3, #32
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	e7f3      	b.n	8006224 <__ssrefill_r+0x22>

0800623c <__ssvfiscanf_r>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006246:	2100      	movs	r1, #0
 8006248:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800624c:	49a6      	ldr	r1, [pc, #664]	@ (80064e8 <__ssvfiscanf_r+0x2ac>)
 800624e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006250:	f10d 0804 	add.w	r8, sp, #4
 8006254:	49a5      	ldr	r1, [pc, #660]	@ (80064ec <__ssvfiscanf_r+0x2b0>)
 8006256:	4fa6      	ldr	r7, [pc, #664]	@ (80064f0 <__ssvfiscanf_r+0x2b4>)
 8006258:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800625c:	4606      	mov	r6, r0
 800625e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	f892 9000 	ldrb.w	r9, [r2]
 8006266:	f1b9 0f00 	cmp.w	r9, #0
 800626a:	f000 8158 	beq.w	800651e <__ssvfiscanf_r+0x2e2>
 800626e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8006272:	f013 0308 	ands.w	r3, r3, #8
 8006276:	f102 0501 	add.w	r5, r2, #1
 800627a:	d019      	beq.n	80062b0 <__ssvfiscanf_r+0x74>
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd0f      	ble.n	80062a2 <__ssvfiscanf_r+0x66>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	781a      	ldrb	r2, [r3, #0]
 8006286:	5cba      	ldrb	r2, [r7, r2]
 8006288:	0712      	lsls	r2, r2, #28
 800628a:	d401      	bmi.n	8006290 <__ssvfiscanf_r+0x54>
 800628c:	462a      	mov	r2, r5
 800628e:	e7e8      	b.n	8006262 <__ssvfiscanf_r+0x26>
 8006290:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006292:	3201      	adds	r2, #1
 8006294:	9245      	str	r2, [sp, #276]	@ 0x114
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	3301      	adds	r3, #1
 800629a:	3a01      	subs	r2, #1
 800629c:	6062      	str	r2, [r4, #4]
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	e7ec      	b.n	800627c <__ssvfiscanf_r+0x40>
 80062a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80062a4:	4621      	mov	r1, r4
 80062a6:	4630      	mov	r0, r6
 80062a8:	4798      	blx	r3
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0e9      	beq.n	8006282 <__ssvfiscanf_r+0x46>
 80062ae:	e7ed      	b.n	800628c <__ssvfiscanf_r+0x50>
 80062b0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80062b4:	f040 8085 	bne.w	80063c2 <__ssvfiscanf_r+0x186>
 80062b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80062ba:	9343      	str	r3, [sp, #268]	@ 0x10c
 80062bc:	7853      	ldrb	r3, [r2, #1]
 80062be:	2b2a      	cmp	r3, #42	@ 0x2a
 80062c0:	bf02      	ittt	eq
 80062c2:	2310      	moveq	r3, #16
 80062c4:	1c95      	addeq	r5, r2, #2
 80062c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80062c8:	220a      	movs	r2, #10
 80062ca:	46aa      	mov	sl, r5
 80062cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80062d0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d91e      	bls.n	8006316 <__ssvfiscanf_r+0xda>
 80062d8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80064f4 <__ssvfiscanf_r+0x2b8>
 80062dc:	2203      	movs	r2, #3
 80062de:	4658      	mov	r0, fp
 80062e0:	f7f9 ff86 	bl	80001f0 <memchr>
 80062e4:	b138      	cbz	r0, 80062f6 <__ssvfiscanf_r+0xba>
 80062e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80062e8:	eba0 000b 	sub.w	r0, r0, fp
 80062ec:	2301      	movs	r3, #1
 80062ee:	4083      	lsls	r3, r0
 80062f0:	4313      	orrs	r3, r2
 80062f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80062f4:	4655      	mov	r5, sl
 80062f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062fa:	2b78      	cmp	r3, #120	@ 0x78
 80062fc:	d806      	bhi.n	800630c <__ssvfiscanf_r+0xd0>
 80062fe:	2b57      	cmp	r3, #87	@ 0x57
 8006300:	d810      	bhi.n	8006324 <__ssvfiscanf_r+0xe8>
 8006302:	2b25      	cmp	r3, #37	@ 0x25
 8006304:	d05d      	beq.n	80063c2 <__ssvfiscanf_r+0x186>
 8006306:	d857      	bhi.n	80063b8 <__ssvfiscanf_r+0x17c>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d075      	beq.n	80063f8 <__ssvfiscanf_r+0x1bc>
 800630c:	2303      	movs	r3, #3
 800630e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006310:	230a      	movs	r3, #10
 8006312:	9342      	str	r3, [sp, #264]	@ 0x108
 8006314:	e088      	b.n	8006428 <__ssvfiscanf_r+0x1ec>
 8006316:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006318:	fb02 1103 	mla	r1, r2, r3, r1
 800631c:	3930      	subs	r1, #48	@ 0x30
 800631e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006320:	4655      	mov	r5, sl
 8006322:	e7d2      	b.n	80062ca <__ssvfiscanf_r+0x8e>
 8006324:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006328:	2a20      	cmp	r2, #32
 800632a:	d8ef      	bhi.n	800630c <__ssvfiscanf_r+0xd0>
 800632c:	a101      	add	r1, pc, #4	@ (adr r1, 8006334 <__ssvfiscanf_r+0xf8>)
 800632e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006407 	.word	0x08006407
 8006338:	0800630d 	.word	0x0800630d
 800633c:	0800630d 	.word	0x0800630d
 8006340:	08006461 	.word	0x08006461
 8006344:	0800630d 	.word	0x0800630d
 8006348:	0800630d 	.word	0x0800630d
 800634c:	0800630d 	.word	0x0800630d
 8006350:	0800630d 	.word	0x0800630d
 8006354:	0800630d 	.word	0x0800630d
 8006358:	0800630d 	.word	0x0800630d
 800635c:	0800630d 	.word	0x0800630d
 8006360:	08006477 	.word	0x08006477
 8006364:	0800645d 	.word	0x0800645d
 8006368:	080063bf 	.word	0x080063bf
 800636c:	080063bf 	.word	0x080063bf
 8006370:	080063bf 	.word	0x080063bf
 8006374:	0800630d 	.word	0x0800630d
 8006378:	08006419 	.word	0x08006419
 800637c:	0800630d 	.word	0x0800630d
 8006380:	0800630d 	.word	0x0800630d
 8006384:	0800630d 	.word	0x0800630d
 8006388:	0800630d 	.word	0x0800630d
 800638c:	08006487 	.word	0x08006487
 8006390:	08006421 	.word	0x08006421
 8006394:	080063ff 	.word	0x080063ff
 8006398:	0800630d 	.word	0x0800630d
 800639c:	0800630d 	.word	0x0800630d
 80063a0:	08006483 	.word	0x08006483
 80063a4:	0800630d 	.word	0x0800630d
 80063a8:	0800645d 	.word	0x0800645d
 80063ac:	0800630d 	.word	0x0800630d
 80063b0:	0800630d 	.word	0x0800630d
 80063b4:	08006407 	.word	0x08006407
 80063b8:	3b45      	subs	r3, #69	@ 0x45
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d8a6      	bhi.n	800630c <__ssvfiscanf_r+0xd0>
 80063be:	2305      	movs	r3, #5
 80063c0:	e031      	b.n	8006426 <__ssvfiscanf_r+0x1ea>
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dd0d      	ble.n	80063e4 <__ssvfiscanf_r+0x1a8>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	454a      	cmp	r2, r9
 80063ce:	f040 80a6 	bne.w	800651e <__ssvfiscanf_r+0x2e2>
 80063d2:	3301      	adds	r3, #1
 80063d4:	6862      	ldr	r2, [r4, #4]
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80063da:	3a01      	subs	r2, #1
 80063dc:	3301      	adds	r3, #1
 80063de:	6062      	str	r2, [r4, #4]
 80063e0:	9345      	str	r3, [sp, #276]	@ 0x114
 80063e2:	e753      	b.n	800628c <__ssvfiscanf_r+0x50>
 80063e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80063e6:	4621      	mov	r1, r4
 80063e8:	4630      	mov	r0, r6
 80063ea:	4798      	blx	r3
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d0eb      	beq.n	80063c8 <__ssvfiscanf_r+0x18c>
 80063f0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f040 808b 	bne.w	800650e <__ssvfiscanf_r+0x2d2>
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	e08b      	b.n	8006516 <__ssvfiscanf_r+0x2da>
 80063fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006400:	f042 0220 	orr.w	r2, r2, #32
 8006404:	9241      	str	r2, [sp, #260]	@ 0x104
 8006406:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800640c:	9241      	str	r2, [sp, #260]	@ 0x104
 800640e:	2210      	movs	r2, #16
 8006410:	2b6e      	cmp	r3, #110	@ 0x6e
 8006412:	9242      	str	r2, [sp, #264]	@ 0x108
 8006414:	d902      	bls.n	800641c <__ssvfiscanf_r+0x1e0>
 8006416:	e005      	b.n	8006424 <__ssvfiscanf_r+0x1e8>
 8006418:	2300      	movs	r3, #0
 800641a:	9342      	str	r3, [sp, #264]	@ 0x108
 800641c:	2303      	movs	r3, #3
 800641e:	e002      	b.n	8006426 <__ssvfiscanf_r+0x1ea>
 8006420:	2308      	movs	r3, #8
 8006422:	9342      	str	r3, [sp, #264]	@ 0x108
 8006424:	2304      	movs	r3, #4
 8006426:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	dd39      	ble.n	80064a2 <__ssvfiscanf_r+0x266>
 800642e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006430:	0659      	lsls	r1, r3, #25
 8006432:	d404      	bmi.n	800643e <__ssvfiscanf_r+0x202>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	5cba      	ldrb	r2, [r7, r2]
 800643a:	0712      	lsls	r2, r2, #28
 800643c:	d438      	bmi.n	80064b0 <__ssvfiscanf_r+0x274>
 800643e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006440:	2b02      	cmp	r3, #2
 8006442:	dc47      	bgt.n	80064d4 <__ssvfiscanf_r+0x298>
 8006444:	466b      	mov	r3, sp
 8006446:	4622      	mov	r2, r4
 8006448:	a941      	add	r1, sp, #260	@ 0x104
 800644a:	4630      	mov	r0, r6
 800644c:	f000 f9f8 	bl	8006840 <_scanf_chars>
 8006450:	2801      	cmp	r0, #1
 8006452:	d064      	beq.n	800651e <__ssvfiscanf_r+0x2e2>
 8006454:	2802      	cmp	r0, #2
 8006456:	f47f af19 	bne.w	800628c <__ssvfiscanf_r+0x50>
 800645a:	e7c9      	b.n	80063f0 <__ssvfiscanf_r+0x1b4>
 800645c:	220a      	movs	r2, #10
 800645e:	e7d7      	b.n	8006410 <__ssvfiscanf_r+0x1d4>
 8006460:	4629      	mov	r1, r5
 8006462:	4640      	mov	r0, r8
 8006464:	f000 fb3a 	bl	8006adc <__sccl>
 8006468:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800646a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800646e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006470:	4605      	mov	r5, r0
 8006472:	2301      	movs	r3, #1
 8006474:	e7d7      	b.n	8006426 <__ssvfiscanf_r+0x1ea>
 8006476:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800647c:	9341      	str	r3, [sp, #260]	@ 0x104
 800647e:	2300      	movs	r3, #0
 8006480:	e7d1      	b.n	8006426 <__ssvfiscanf_r+0x1ea>
 8006482:	2302      	movs	r3, #2
 8006484:	e7cf      	b.n	8006426 <__ssvfiscanf_r+0x1ea>
 8006486:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006488:	06c3      	lsls	r3, r0, #27
 800648a:	f53f aeff 	bmi.w	800628c <__ssvfiscanf_r+0x50>
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006492:	1d19      	adds	r1, r3, #4
 8006494:	9100      	str	r1, [sp, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	07c0      	lsls	r0, r0, #31
 800649a:	bf4c      	ite	mi
 800649c:	801a      	strhmi	r2, [r3, #0]
 800649e:	601a      	strpl	r2, [r3, #0]
 80064a0:	e6f4      	b.n	800628c <__ssvfiscanf_r+0x50>
 80064a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80064a4:	4621      	mov	r1, r4
 80064a6:	4630      	mov	r0, r6
 80064a8:	4798      	blx	r3
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d0bf      	beq.n	800642e <__ssvfiscanf_r+0x1f2>
 80064ae:	e79f      	b.n	80063f0 <__ssvfiscanf_r+0x1b4>
 80064b0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80064b2:	3201      	adds	r2, #1
 80064b4:	9245      	str	r2, [sp, #276]	@ 0x114
 80064b6:	6862      	ldr	r2, [r4, #4]
 80064b8:	3a01      	subs	r2, #1
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	6062      	str	r2, [r4, #4]
 80064be:	dd02      	ble.n	80064c6 <__ssvfiscanf_r+0x28a>
 80064c0:	3301      	adds	r3, #1
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	e7b6      	b.n	8006434 <__ssvfiscanf_r+0x1f8>
 80064c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80064c8:	4621      	mov	r1, r4
 80064ca:	4630      	mov	r0, r6
 80064cc:	4798      	blx	r3
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d0b0      	beq.n	8006434 <__ssvfiscanf_r+0x1f8>
 80064d2:	e78d      	b.n	80063f0 <__ssvfiscanf_r+0x1b4>
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	dc0f      	bgt.n	80064f8 <__ssvfiscanf_r+0x2bc>
 80064d8:	466b      	mov	r3, sp
 80064da:	4622      	mov	r2, r4
 80064dc:	a941      	add	r1, sp, #260	@ 0x104
 80064de:	4630      	mov	r0, r6
 80064e0:	f000 fa08 	bl	80068f4 <_scanf_i>
 80064e4:	e7b4      	b.n	8006450 <__ssvfiscanf_r+0x214>
 80064e6:	bf00      	nop
 80064e8:	08006189 	.word	0x08006189
 80064ec:	08006203 	.word	0x08006203
 80064f0:	08006f2f 	.word	0x08006f2f
 80064f4:	08006ee6 	.word	0x08006ee6
 80064f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <__ssvfiscanf_r+0x2e8>)
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f43f aec6 	beq.w	800628c <__ssvfiscanf_r+0x50>
 8006500:	466b      	mov	r3, sp
 8006502:	4622      	mov	r2, r4
 8006504:	a941      	add	r1, sp, #260	@ 0x104
 8006506:	4630      	mov	r0, r6
 8006508:	f3af 8000 	nop.w
 800650c:	e7a0      	b.n	8006450 <__ssvfiscanf_r+0x214>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	065b      	lsls	r3, r3, #25
 8006512:	f53f af71 	bmi.w	80063f8 <__ssvfiscanf_r+0x1bc>
 8006516:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006520:	e7f9      	b.n	8006516 <__ssvfiscanf_r+0x2da>
 8006522:	bf00      	nop
 8006524:	00000000 	.word	0x00000000

08006528 <_printf_common>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	4616      	mov	r6, r2
 800652e:	4698      	mov	r8, r3
 8006530:	688a      	ldr	r2, [r1, #8]
 8006532:	690b      	ldr	r3, [r1, #16]
 8006534:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006538:	4293      	cmp	r3, r2
 800653a:	bfb8      	it	lt
 800653c:	4613      	movlt	r3, r2
 800653e:	6033      	str	r3, [r6, #0]
 8006540:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006544:	4607      	mov	r7, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b10a      	cbz	r2, 800654e <_printf_common+0x26>
 800654a:	3301      	adds	r3, #1
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	0699      	lsls	r1, r3, #26
 8006552:	bf42      	ittt	mi
 8006554:	6833      	ldrmi	r3, [r6, #0]
 8006556:	3302      	addmi	r3, #2
 8006558:	6033      	strmi	r3, [r6, #0]
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	f015 0506 	ands.w	r5, r5, #6
 8006560:	d106      	bne.n	8006570 <_printf_common+0x48>
 8006562:	f104 0a19 	add.w	sl, r4, #25
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	6832      	ldr	r2, [r6, #0]
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	42ab      	cmp	r3, r5
 800656e:	dc26      	bgt.n	80065be <_printf_common+0x96>
 8006570:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	3b00      	subs	r3, #0
 8006578:	bf18      	it	ne
 800657a:	2301      	movne	r3, #1
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d42b      	bmi.n	80065d8 <_printf_common+0xb0>
 8006580:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006584:	4641      	mov	r1, r8
 8006586:	4638      	mov	r0, r7
 8006588:	47c8      	blx	r9
 800658a:	3001      	adds	r0, #1
 800658c:	d01e      	beq.n	80065cc <_printf_common+0xa4>
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	6922      	ldr	r2, [r4, #16]
 8006592:	f003 0306 	and.w	r3, r3, #6
 8006596:	2b04      	cmp	r3, #4
 8006598:	bf02      	ittt	eq
 800659a:	68e5      	ldreq	r5, [r4, #12]
 800659c:	6833      	ldreq	r3, [r6, #0]
 800659e:	1aed      	subeq	r5, r5, r3
 80065a0:	68a3      	ldr	r3, [r4, #8]
 80065a2:	bf0c      	ite	eq
 80065a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a8:	2500      	movne	r5, #0
 80065aa:	4293      	cmp	r3, r2
 80065ac:	bfc4      	itt	gt
 80065ae:	1a9b      	subgt	r3, r3, r2
 80065b0:	18ed      	addgt	r5, r5, r3
 80065b2:	2600      	movs	r6, #0
 80065b4:	341a      	adds	r4, #26
 80065b6:	42b5      	cmp	r5, r6
 80065b8:	d11a      	bne.n	80065f0 <_printf_common+0xc8>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e008      	b.n	80065d0 <_printf_common+0xa8>
 80065be:	2301      	movs	r3, #1
 80065c0:	4652      	mov	r2, sl
 80065c2:	4641      	mov	r1, r8
 80065c4:	4638      	mov	r0, r7
 80065c6:	47c8      	blx	r9
 80065c8:	3001      	adds	r0, #1
 80065ca:	d103      	bne.n	80065d4 <_printf_common+0xac>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	3501      	adds	r5, #1
 80065d6:	e7c6      	b.n	8006566 <_printf_common+0x3e>
 80065d8:	18e1      	adds	r1, r4, r3
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	2030      	movs	r0, #48	@ 0x30
 80065de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065e2:	4422      	add	r2, r4
 80065e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065ec:	3302      	adds	r3, #2
 80065ee:	e7c7      	b.n	8006580 <_printf_common+0x58>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4622      	mov	r2, r4
 80065f4:	4641      	mov	r1, r8
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c8      	blx	r9
 80065fa:	3001      	adds	r0, #1
 80065fc:	d0e6      	beq.n	80065cc <_printf_common+0xa4>
 80065fe:	3601      	adds	r6, #1
 8006600:	e7d9      	b.n	80065b6 <_printf_common+0x8e>
	...

08006604 <_printf_i>:
 8006604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	7e0f      	ldrb	r7, [r1, #24]
 800660a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800660c:	2f78      	cmp	r7, #120	@ 0x78
 800660e:	4691      	mov	r9, r2
 8006610:	4680      	mov	r8, r0
 8006612:	460c      	mov	r4, r1
 8006614:	469a      	mov	sl, r3
 8006616:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800661a:	d807      	bhi.n	800662c <_printf_i+0x28>
 800661c:	2f62      	cmp	r7, #98	@ 0x62
 800661e:	d80a      	bhi.n	8006636 <_printf_i+0x32>
 8006620:	2f00      	cmp	r7, #0
 8006622:	f000 80d1 	beq.w	80067c8 <_printf_i+0x1c4>
 8006626:	2f58      	cmp	r7, #88	@ 0x58
 8006628:	f000 80b8 	beq.w	800679c <_printf_i+0x198>
 800662c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006630:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006634:	e03a      	b.n	80066ac <_printf_i+0xa8>
 8006636:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800663a:	2b15      	cmp	r3, #21
 800663c:	d8f6      	bhi.n	800662c <_printf_i+0x28>
 800663e:	a101      	add	r1, pc, #4	@ (adr r1, 8006644 <_printf_i+0x40>)
 8006640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006644:	0800669d 	.word	0x0800669d
 8006648:	080066b1 	.word	0x080066b1
 800664c:	0800662d 	.word	0x0800662d
 8006650:	0800662d 	.word	0x0800662d
 8006654:	0800662d 	.word	0x0800662d
 8006658:	0800662d 	.word	0x0800662d
 800665c:	080066b1 	.word	0x080066b1
 8006660:	0800662d 	.word	0x0800662d
 8006664:	0800662d 	.word	0x0800662d
 8006668:	0800662d 	.word	0x0800662d
 800666c:	0800662d 	.word	0x0800662d
 8006670:	080067af 	.word	0x080067af
 8006674:	080066db 	.word	0x080066db
 8006678:	08006769 	.word	0x08006769
 800667c:	0800662d 	.word	0x0800662d
 8006680:	0800662d 	.word	0x0800662d
 8006684:	080067d1 	.word	0x080067d1
 8006688:	0800662d 	.word	0x0800662d
 800668c:	080066db 	.word	0x080066db
 8006690:	0800662d 	.word	0x0800662d
 8006694:	0800662d 	.word	0x0800662d
 8006698:	08006771 	.word	0x08006771
 800669c:	6833      	ldr	r3, [r6, #0]
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6032      	str	r2, [r6, #0]
 80066a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066ac:	2301      	movs	r3, #1
 80066ae:	e09c      	b.n	80067ea <_printf_i+0x1e6>
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	1d19      	adds	r1, r3, #4
 80066b6:	6031      	str	r1, [r6, #0]
 80066b8:	0606      	lsls	r6, r0, #24
 80066ba:	d501      	bpl.n	80066c0 <_printf_i+0xbc>
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	e003      	b.n	80066c8 <_printf_i+0xc4>
 80066c0:	0645      	lsls	r5, r0, #25
 80066c2:	d5fb      	bpl.n	80066bc <_printf_i+0xb8>
 80066c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066c8:	2d00      	cmp	r5, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xd0>
 80066cc:	232d      	movs	r3, #45	@ 0x2d
 80066ce:	426d      	negs	r5, r5
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d4:	4858      	ldr	r0, [pc, #352]	@ (8006838 <_printf_i+0x234>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e011      	b.n	80066fe <_printf_i+0xfa>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	0608      	lsls	r0, r1, #24
 80066e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0xe8>
 80066e6:	0649      	lsls	r1, r1, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2ad      	uxthmi	r5, r5
 80066ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ee:	4852      	ldr	r0, [pc, #328]	@ (8006838 <_printf_i+0x234>)
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	bf14      	ite	ne
 80066f4:	230a      	movne	r3, #10
 80066f6:	2308      	moveq	r3, #8
 80066f8:	2100      	movs	r1, #0
 80066fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066fe:	6866      	ldr	r6, [r4, #4]
 8006700:	60a6      	str	r6, [r4, #8]
 8006702:	2e00      	cmp	r6, #0
 8006704:	db05      	blt.n	8006712 <_printf_i+0x10e>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	432e      	orrs	r6, r5
 800670a:	f021 0104 	bic.w	r1, r1, #4
 800670e:	6021      	str	r1, [r4, #0]
 8006710:	d04b      	beq.n	80067aa <_printf_i+0x1a6>
 8006712:	4616      	mov	r6, r2
 8006714:	fbb5 f1f3 	udiv	r1, r5, r3
 8006718:	fb03 5711 	mls	r7, r3, r1, r5
 800671c:	5dc7      	ldrb	r7, [r0, r7]
 800671e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006722:	462f      	mov	r7, r5
 8006724:	42bb      	cmp	r3, r7
 8006726:	460d      	mov	r5, r1
 8006728:	d9f4      	bls.n	8006714 <_printf_i+0x110>
 800672a:	2b08      	cmp	r3, #8
 800672c:	d10b      	bne.n	8006746 <_printf_i+0x142>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	07df      	lsls	r7, r3, #31
 8006732:	d508      	bpl.n	8006746 <_printf_i+0x142>
 8006734:	6923      	ldr	r3, [r4, #16]
 8006736:	6861      	ldr	r1, [r4, #4]
 8006738:	4299      	cmp	r1, r3
 800673a:	bfde      	ittt	le
 800673c:	2330      	movle	r3, #48	@ 0x30
 800673e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006742:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006746:	1b92      	subs	r2, r2, r6
 8006748:	6122      	str	r2, [r4, #16]
 800674a:	f8cd a000 	str.w	sl, [sp]
 800674e:	464b      	mov	r3, r9
 8006750:	aa03      	add	r2, sp, #12
 8006752:	4621      	mov	r1, r4
 8006754:	4640      	mov	r0, r8
 8006756:	f7ff fee7 	bl	8006528 <_printf_common>
 800675a:	3001      	adds	r0, #1
 800675c:	d14a      	bne.n	80067f4 <_printf_i+0x1f0>
 800675e:	f04f 30ff 	mov.w	r0, #4294967295
 8006762:	b004      	add	sp, #16
 8006764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	f043 0320 	orr.w	r3, r3, #32
 800676e:	6023      	str	r3, [r4, #0]
 8006770:	4832      	ldr	r0, [pc, #200]	@ (800683c <_printf_i+0x238>)
 8006772:	2778      	movs	r7, #120	@ 0x78
 8006774:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	6831      	ldr	r1, [r6, #0]
 800677c:	061f      	lsls	r7, r3, #24
 800677e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006782:	d402      	bmi.n	800678a <_printf_i+0x186>
 8006784:	065f      	lsls	r7, r3, #25
 8006786:	bf48      	it	mi
 8006788:	b2ad      	uxthmi	r5, r5
 800678a:	6031      	str	r1, [r6, #0]
 800678c:	07d9      	lsls	r1, r3, #31
 800678e:	bf44      	itt	mi
 8006790:	f043 0320 	orrmi.w	r3, r3, #32
 8006794:	6023      	strmi	r3, [r4, #0]
 8006796:	b11d      	cbz	r5, 80067a0 <_printf_i+0x19c>
 8006798:	2310      	movs	r3, #16
 800679a:	e7ad      	b.n	80066f8 <_printf_i+0xf4>
 800679c:	4826      	ldr	r0, [pc, #152]	@ (8006838 <_printf_i+0x234>)
 800679e:	e7e9      	b.n	8006774 <_printf_i+0x170>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	f023 0320 	bic.w	r3, r3, #32
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	e7f6      	b.n	8006798 <_printf_i+0x194>
 80067aa:	4616      	mov	r6, r2
 80067ac:	e7bd      	b.n	800672a <_printf_i+0x126>
 80067ae:	6833      	ldr	r3, [r6, #0]
 80067b0:	6825      	ldr	r5, [r4, #0]
 80067b2:	6961      	ldr	r1, [r4, #20]
 80067b4:	1d18      	adds	r0, r3, #4
 80067b6:	6030      	str	r0, [r6, #0]
 80067b8:	062e      	lsls	r6, r5, #24
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	d501      	bpl.n	80067c2 <_printf_i+0x1be>
 80067be:	6019      	str	r1, [r3, #0]
 80067c0:	e002      	b.n	80067c8 <_printf_i+0x1c4>
 80067c2:	0668      	lsls	r0, r5, #25
 80067c4:	d5fb      	bpl.n	80067be <_printf_i+0x1ba>
 80067c6:	8019      	strh	r1, [r3, #0]
 80067c8:	2300      	movs	r3, #0
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	4616      	mov	r6, r2
 80067ce:	e7bc      	b.n	800674a <_printf_i+0x146>
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	6032      	str	r2, [r6, #0]
 80067d6:	681e      	ldr	r6, [r3, #0]
 80067d8:	6862      	ldr	r2, [r4, #4]
 80067da:	2100      	movs	r1, #0
 80067dc:	4630      	mov	r0, r6
 80067de:	f7f9 fd07 	bl	80001f0 <memchr>
 80067e2:	b108      	cbz	r0, 80067e8 <_printf_i+0x1e4>
 80067e4:	1b80      	subs	r0, r0, r6
 80067e6:	6060      	str	r0, [r4, #4]
 80067e8:	6863      	ldr	r3, [r4, #4]
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	2300      	movs	r3, #0
 80067ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f2:	e7aa      	b.n	800674a <_printf_i+0x146>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	4632      	mov	r2, r6
 80067f8:	4649      	mov	r1, r9
 80067fa:	4640      	mov	r0, r8
 80067fc:	47d0      	blx	sl
 80067fe:	3001      	adds	r0, #1
 8006800:	d0ad      	beq.n	800675e <_printf_i+0x15a>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	079b      	lsls	r3, r3, #30
 8006806:	d413      	bmi.n	8006830 <_printf_i+0x22c>
 8006808:	68e0      	ldr	r0, [r4, #12]
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	4298      	cmp	r0, r3
 800680e:	bfb8      	it	lt
 8006810:	4618      	movlt	r0, r3
 8006812:	e7a6      	b.n	8006762 <_printf_i+0x15e>
 8006814:	2301      	movs	r3, #1
 8006816:	4632      	mov	r2, r6
 8006818:	4649      	mov	r1, r9
 800681a:	4640      	mov	r0, r8
 800681c:	47d0      	blx	sl
 800681e:	3001      	adds	r0, #1
 8006820:	d09d      	beq.n	800675e <_printf_i+0x15a>
 8006822:	3501      	adds	r5, #1
 8006824:	68e3      	ldr	r3, [r4, #12]
 8006826:	9903      	ldr	r1, [sp, #12]
 8006828:	1a5b      	subs	r3, r3, r1
 800682a:	42ab      	cmp	r3, r5
 800682c:	dcf2      	bgt.n	8006814 <_printf_i+0x210>
 800682e:	e7eb      	b.n	8006808 <_printf_i+0x204>
 8006830:	2500      	movs	r5, #0
 8006832:	f104 0619 	add.w	r6, r4, #25
 8006836:	e7f5      	b.n	8006824 <_printf_i+0x220>
 8006838:	08006ef1 	.word	0x08006ef1
 800683c:	08006f02 	.word	0x08006f02

08006840 <_scanf_chars>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4615      	mov	r5, r2
 8006846:	688a      	ldr	r2, [r1, #8]
 8006848:	4680      	mov	r8, r0
 800684a:	460c      	mov	r4, r1
 800684c:	b932      	cbnz	r2, 800685c <_scanf_chars+0x1c>
 800684e:	698a      	ldr	r2, [r1, #24]
 8006850:	2a00      	cmp	r2, #0
 8006852:	bf14      	ite	ne
 8006854:	f04f 32ff 	movne.w	r2, #4294967295
 8006858:	2201      	moveq	r2, #1
 800685a:	608a      	str	r2, [r1, #8]
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80068f0 <_scanf_chars+0xb0>
 8006862:	06d1      	lsls	r1, r2, #27
 8006864:	bf5f      	itttt	pl
 8006866:	681a      	ldrpl	r2, [r3, #0]
 8006868:	1d11      	addpl	r1, r2, #4
 800686a:	6019      	strpl	r1, [r3, #0]
 800686c:	6816      	ldrpl	r6, [r2, #0]
 800686e:	2700      	movs	r7, #0
 8006870:	69a0      	ldr	r0, [r4, #24]
 8006872:	b188      	cbz	r0, 8006898 <_scanf_chars+0x58>
 8006874:	2801      	cmp	r0, #1
 8006876:	d107      	bne.n	8006888 <_scanf_chars+0x48>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	6963      	ldr	r3, [r4, #20]
 800687e:	5c9b      	ldrb	r3, [r3, r2]
 8006880:	b953      	cbnz	r3, 8006898 <_scanf_chars+0x58>
 8006882:	2f00      	cmp	r7, #0
 8006884:	d031      	beq.n	80068ea <_scanf_chars+0xaa>
 8006886:	e022      	b.n	80068ce <_scanf_chars+0x8e>
 8006888:	2802      	cmp	r0, #2
 800688a:	d120      	bne.n	80068ce <_scanf_chars+0x8e>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006894:	071b      	lsls	r3, r3, #28
 8006896:	d41a      	bmi.n	80068ce <_scanf_chars+0x8e>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	06da      	lsls	r2, r3, #27
 800689c:	bf5e      	ittt	pl
 800689e:	682b      	ldrpl	r3, [r5, #0]
 80068a0:	781b      	ldrbpl	r3, [r3, #0]
 80068a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80068a6:	682a      	ldr	r2, [r5, #0]
 80068a8:	686b      	ldr	r3, [r5, #4]
 80068aa:	3201      	adds	r2, #1
 80068ac:	602a      	str	r2, [r5, #0]
 80068ae:	68a2      	ldr	r2, [r4, #8]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	3a01      	subs	r2, #1
 80068b4:	606b      	str	r3, [r5, #4]
 80068b6:	3701      	adds	r7, #1
 80068b8:	60a2      	str	r2, [r4, #8]
 80068ba:	b142      	cbz	r2, 80068ce <_scanf_chars+0x8e>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dcd7      	bgt.n	8006870 <_scanf_chars+0x30>
 80068c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80068c4:	4629      	mov	r1, r5
 80068c6:	4640      	mov	r0, r8
 80068c8:	4798      	blx	r3
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d0d0      	beq.n	8006870 <_scanf_chars+0x30>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	f013 0310 	ands.w	r3, r3, #16
 80068d4:	d105      	bne.n	80068e2 <_scanf_chars+0xa2>
 80068d6:	68e2      	ldr	r2, [r4, #12]
 80068d8:	3201      	adds	r2, #1
 80068da:	60e2      	str	r2, [r4, #12]
 80068dc:	69a2      	ldr	r2, [r4, #24]
 80068de:	b102      	cbz	r2, 80068e2 <_scanf_chars+0xa2>
 80068e0:	7033      	strb	r3, [r6, #0]
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	443b      	add	r3, r7
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	bf00      	nop
 80068f0:	08006f2f 	.word	0x08006f2f

080068f4 <_scanf_i>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	4698      	mov	r8, r3
 80068fa:	4b74      	ldr	r3, [pc, #464]	@ (8006acc <_scanf_i+0x1d8>)
 80068fc:	460c      	mov	r4, r1
 80068fe:	4682      	mov	sl, r0
 8006900:	4616      	mov	r6, r2
 8006902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006906:	b087      	sub	sp, #28
 8006908:	ab03      	add	r3, sp, #12
 800690a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800690e:	4b70      	ldr	r3, [pc, #448]	@ (8006ad0 <_scanf_i+0x1dc>)
 8006910:	69a1      	ldr	r1, [r4, #24]
 8006912:	4a70      	ldr	r2, [pc, #448]	@ (8006ad4 <_scanf_i+0x1e0>)
 8006914:	2903      	cmp	r1, #3
 8006916:	bf08      	it	eq
 8006918:	461a      	moveq	r2, r3
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	9201      	str	r2, [sp, #4]
 800691e:	1e5a      	subs	r2, r3, #1
 8006920:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006924:	bf88      	it	hi
 8006926:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800692a:	4627      	mov	r7, r4
 800692c:	bf82      	ittt	hi
 800692e:	eb03 0905 	addhi.w	r9, r3, r5
 8006932:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006936:	60a3      	strhi	r3, [r4, #8]
 8006938:	f857 3b1c 	ldr.w	r3, [r7], #28
 800693c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006940:	bf98      	it	ls
 8006942:	f04f 0900 	movls.w	r9, #0
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	463d      	mov	r5, r7
 800694a:	f04f 0b00 	mov.w	fp, #0
 800694e:	6831      	ldr	r1, [r6, #0]
 8006950:	ab03      	add	r3, sp, #12
 8006952:	7809      	ldrb	r1, [r1, #0]
 8006954:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006958:	2202      	movs	r2, #2
 800695a:	f7f9 fc49 	bl	80001f0 <memchr>
 800695e:	b328      	cbz	r0, 80069ac <_scanf_i+0xb8>
 8006960:	f1bb 0f01 	cmp.w	fp, #1
 8006964:	d159      	bne.n	8006a1a <_scanf_i+0x126>
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	b92a      	cbnz	r2, 8006976 <_scanf_i+0x82>
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	2108      	movs	r1, #8
 800696e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006972:	6061      	str	r1, [r4, #4]
 8006974:	6022      	str	r2, [r4, #0]
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	68a2      	ldr	r2, [r4, #8]
 8006980:	1e51      	subs	r1, r2, #1
 8006982:	60a1      	str	r1, [r4, #8]
 8006984:	b192      	cbz	r2, 80069ac <_scanf_i+0xb8>
 8006986:	6832      	ldr	r2, [r6, #0]
 8006988:	1c51      	adds	r1, r2, #1
 800698a:	6031      	str	r1, [r6, #0]
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	f805 2b01 	strb.w	r2, [r5], #1
 8006992:	6872      	ldr	r2, [r6, #4]
 8006994:	3a01      	subs	r2, #1
 8006996:	2a00      	cmp	r2, #0
 8006998:	6072      	str	r2, [r6, #4]
 800699a:	dc07      	bgt.n	80069ac <_scanf_i+0xb8>
 800699c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80069a0:	4631      	mov	r1, r6
 80069a2:	4650      	mov	r0, sl
 80069a4:	4790      	blx	r2
 80069a6:	2800      	cmp	r0, #0
 80069a8:	f040 8085 	bne.w	8006ab6 <_scanf_i+0x1c2>
 80069ac:	f10b 0b01 	add.w	fp, fp, #1
 80069b0:	f1bb 0f03 	cmp.w	fp, #3
 80069b4:	d1cb      	bne.n	800694e <_scanf_i+0x5a>
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	b90b      	cbnz	r3, 80069be <_scanf_i+0xca>
 80069ba:	230a      	movs	r3, #10
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	6863      	ldr	r3, [r4, #4]
 80069c0:	4945      	ldr	r1, [pc, #276]	@ (8006ad8 <_scanf_i+0x1e4>)
 80069c2:	6960      	ldr	r0, [r4, #20]
 80069c4:	1ac9      	subs	r1, r1, r3
 80069c6:	f000 f889 	bl	8006adc <__sccl>
 80069ca:	f04f 0b00 	mov.w	fp, #0
 80069ce:	68a3      	ldr	r3, [r4, #8]
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d03d      	beq.n	8006a52 <_scanf_i+0x15e>
 80069d6:	6831      	ldr	r1, [r6, #0]
 80069d8:	6960      	ldr	r0, [r4, #20]
 80069da:	f891 c000 	ldrb.w	ip, [r1]
 80069de:	f810 000c 	ldrb.w	r0, [r0, ip]
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d035      	beq.n	8006a52 <_scanf_i+0x15e>
 80069e6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80069ea:	d124      	bne.n	8006a36 <_scanf_i+0x142>
 80069ec:	0510      	lsls	r0, r2, #20
 80069ee:	d522      	bpl.n	8006a36 <_scanf_i+0x142>
 80069f0:	f10b 0b01 	add.w	fp, fp, #1
 80069f4:	f1b9 0f00 	cmp.w	r9, #0
 80069f8:	d003      	beq.n	8006a02 <_scanf_i+0x10e>
 80069fa:	3301      	adds	r3, #1
 80069fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	6873      	ldr	r3, [r6, #4]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	6073      	str	r3, [r6, #4]
 8006a0a:	dd1b      	ble.n	8006a44 <_scanf_i+0x150>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	6033      	str	r3, [r6, #0]
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	e7d9      	b.n	80069ce <_scanf_i+0xda>
 8006a1a:	f1bb 0f02 	cmp.w	fp, #2
 8006a1e:	d1ae      	bne.n	800697e <_scanf_i+0x8a>
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006a26:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006a2a:	d1c4      	bne.n	80069b6 <_scanf_i+0xc2>
 8006a2c:	2110      	movs	r1, #16
 8006a2e:	6061      	str	r1, [r4, #4]
 8006a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a34:	e7a2      	b.n	800697c <_scanf_i+0x88>
 8006a36:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006a3a:	6022      	str	r2, [r4, #0]
 8006a3c:	780b      	ldrb	r3, [r1, #0]
 8006a3e:	f805 3b01 	strb.w	r3, [r5], #1
 8006a42:	e7de      	b.n	8006a02 <_scanf_i+0x10e>
 8006a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	4798      	blx	r3
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d0df      	beq.n	8006a12 <_scanf_i+0x11e>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	05d9      	lsls	r1, r3, #23
 8006a56:	d50d      	bpl.n	8006a74 <_scanf_i+0x180>
 8006a58:	42bd      	cmp	r5, r7
 8006a5a:	d909      	bls.n	8006a70 <_scanf_i+0x17c>
 8006a5c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a64:	4632      	mov	r2, r6
 8006a66:	4650      	mov	r0, sl
 8006a68:	4798      	blx	r3
 8006a6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8006a6e:	464d      	mov	r5, r9
 8006a70:	42bd      	cmp	r5, r7
 8006a72:	d028      	beq.n	8006ac6 <_scanf_i+0x1d2>
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	f012 0210 	ands.w	r2, r2, #16
 8006a7a:	d113      	bne.n	8006aa4 <_scanf_i+0x1b0>
 8006a7c:	702a      	strb	r2, [r5, #0]
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	9e01      	ldr	r6, [sp, #4]
 8006a82:	4639      	mov	r1, r7
 8006a84:	4650      	mov	r0, sl
 8006a86:	47b0      	blx	r6
 8006a88:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8c:	6821      	ldr	r1, [r4, #0]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	f8c8 2000 	str.w	r2, [r8]
 8006a94:	f011 0f20 	tst.w	r1, #32
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	d00f      	beq.n	8006abc <_scanf_i+0x1c8>
 8006a9c:	6018      	str	r0, [r3, #0]
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	60e3      	str	r3, [r4, #12]
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	1bed      	subs	r5, r5, r7
 8006aa8:	445d      	add	r5, fp
 8006aaa:	442b      	add	r3, r5
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	b007      	add	sp, #28
 8006ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab6:	f04f 0b00 	mov.w	fp, #0
 8006aba:	e7ca      	b.n	8006a52 <_scanf_i+0x15e>
 8006abc:	07ca      	lsls	r2, r1, #31
 8006abe:	bf4c      	ite	mi
 8006ac0:	8018      	strhmi	r0, [r3, #0]
 8006ac2:	6018      	strpl	r0, [r3, #0]
 8006ac4:	e7eb      	b.n	8006a9e <_scanf_i+0x1aa>
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e7f2      	b.n	8006ab0 <_scanf_i+0x1bc>
 8006aca:	bf00      	nop
 8006acc:	08006ebc 	.word	0x08006ebc
 8006ad0:	08006d85 	.word	0x08006d85
 8006ad4:	08006e65 	.word	0x08006e65
 8006ad8:	08006f23 	.word	0x08006f23

08006adc <__sccl>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	780b      	ldrb	r3, [r1, #0]
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	2b5e      	cmp	r3, #94	@ 0x5e
 8006ae4:	bf0b      	itete	eq
 8006ae6:	784b      	ldrbeq	r3, [r1, #1]
 8006ae8:	1c4a      	addne	r2, r1, #1
 8006aea:	1c8a      	addeq	r2, r1, #2
 8006aec:	2100      	movne	r1, #0
 8006aee:	bf08      	it	eq
 8006af0:	2101      	moveq	r1, #1
 8006af2:	3801      	subs	r0, #1
 8006af4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006af8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006afc:	42a8      	cmp	r0, r5
 8006afe:	d1fb      	bne.n	8006af8 <__sccl+0x1c>
 8006b00:	b90b      	cbnz	r3, 8006b06 <__sccl+0x2a>
 8006b02:	1e50      	subs	r0, r2, #1
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
 8006b06:	f081 0101 	eor.w	r1, r1, #1
 8006b0a:	54e1      	strb	r1, [r4, r3]
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4602      	mov	r2, r0
 8006b10:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b14:	2d2d      	cmp	r5, #45	@ 0x2d
 8006b16:	d005      	beq.n	8006b24 <__sccl+0x48>
 8006b18:	2d5d      	cmp	r5, #93	@ 0x5d
 8006b1a:	d016      	beq.n	8006b4a <__sccl+0x6e>
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	d0f1      	beq.n	8006b04 <__sccl+0x28>
 8006b20:	462b      	mov	r3, r5
 8006b22:	e7f2      	b.n	8006b0a <__sccl+0x2e>
 8006b24:	7846      	ldrb	r6, [r0, #1]
 8006b26:	2e5d      	cmp	r6, #93	@ 0x5d
 8006b28:	d0fa      	beq.n	8006b20 <__sccl+0x44>
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	dcf8      	bgt.n	8006b20 <__sccl+0x44>
 8006b2e:	3002      	adds	r0, #2
 8006b30:	461a      	mov	r2, r3
 8006b32:	3201      	adds	r2, #1
 8006b34:	4296      	cmp	r6, r2
 8006b36:	54a1      	strb	r1, [r4, r2]
 8006b38:	dcfb      	bgt.n	8006b32 <__sccl+0x56>
 8006b3a:	1af2      	subs	r2, r6, r3
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	1c5d      	adds	r5, r3, #1
 8006b40:	42b3      	cmp	r3, r6
 8006b42:	bfa8      	it	ge
 8006b44:	2200      	movge	r2, #0
 8006b46:	18ab      	adds	r3, r5, r2
 8006b48:	e7e1      	b.n	8006b0e <__sccl+0x32>
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	e7da      	b.n	8006b04 <__sccl+0x28>

08006b4e <__submore>:
 8006b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	460c      	mov	r4, r1
 8006b54:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006b56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b5a:	4299      	cmp	r1, r3
 8006b5c:	d11d      	bne.n	8006b9a <__submore+0x4c>
 8006b5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b62:	f7ff f92d 	bl	8005dc0 <_malloc_r>
 8006b66:	b918      	cbnz	r0, 8006b70 <__submore+0x22>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b74:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006b76:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006b7a:	6360      	str	r0, [r4, #52]	@ 0x34
 8006b7c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006b80:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006b84:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006b88:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006b8c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006b90:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006b94:	6020      	str	r0, [r4, #0]
 8006b96:	2000      	movs	r0, #0
 8006b98:	e7e8      	b.n	8006b6c <__submore+0x1e>
 8006b9a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006b9c:	0077      	lsls	r7, r6, #1
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	f000 f848 	bl	8006c34 <_realloc_r>
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0de      	beq.n	8006b68 <__submore+0x1a>
 8006baa:	eb00 0806 	add.w	r8, r0, r6
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f000 f830 	bl	8006c18 <memcpy>
 8006bb8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006bbc:	f8c4 8000 	str.w	r8, [r4]
 8006bc0:	e7e9      	b.n	8006b96 <__submore+0x48>

08006bc2 <memmove>:
 8006bc2:	4288      	cmp	r0, r1
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	eb01 0402 	add.w	r4, r1, r2
 8006bca:	d902      	bls.n	8006bd2 <memmove+0x10>
 8006bcc:	4284      	cmp	r4, r0
 8006bce:	4623      	mov	r3, r4
 8006bd0:	d807      	bhi.n	8006be2 <memmove+0x20>
 8006bd2:	1e43      	subs	r3, r0, #1
 8006bd4:	42a1      	cmp	r1, r4
 8006bd6:	d008      	beq.n	8006bea <memmove+0x28>
 8006bd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be0:	e7f8      	b.n	8006bd4 <memmove+0x12>
 8006be2:	4402      	add	r2, r0
 8006be4:	4601      	mov	r1, r0
 8006be6:	428a      	cmp	r2, r1
 8006be8:	d100      	bne.n	8006bec <memmove+0x2a>
 8006bea:	bd10      	pop	{r4, pc}
 8006bec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bf4:	e7f7      	b.n	8006be6 <memmove+0x24>
	...

08006bf8 <_sbrk_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d06      	ldr	r5, [pc, #24]	@ (8006c14 <_sbrk_r+0x1c>)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	f7fb f9c8 	bl	8001f98 <_sbrk>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_sbrk_r+0x1a>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_sbrk_r+0x1a>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	200007dc 	.word	0x200007dc

08006c18 <memcpy>:
 8006c18:	440a      	add	r2, r1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c20:	d100      	bne.n	8006c24 <memcpy+0xc>
 8006c22:	4770      	bx	lr
 8006c24:	b510      	push	{r4, lr}
 8006c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2e:	4291      	cmp	r1, r2
 8006c30:	d1f9      	bne.n	8006c26 <memcpy+0xe>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <_realloc_r>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	4607      	mov	r7, r0
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	460d      	mov	r5, r1
 8006c3e:	b921      	cbnz	r1, 8006c4a <_realloc_r+0x16>
 8006c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	4611      	mov	r1, r2
 8006c46:	f7ff b8bb 	b.w	8005dc0 <_malloc_r>
 8006c4a:	b92a      	cbnz	r2, 8006c58 <_realloc_r+0x24>
 8006c4c:	f7ff f84c 	bl	8005ce8 <_free_r>
 8006c50:	4625      	mov	r5, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	f000 f906 	bl	8006e68 <_malloc_usable_size_r>
 8006c5c:	4284      	cmp	r4, r0
 8006c5e:	4606      	mov	r6, r0
 8006c60:	d802      	bhi.n	8006c68 <_realloc_r+0x34>
 8006c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c66:	d8f4      	bhi.n	8006c52 <_realloc_r+0x1e>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff f8a8 	bl	8005dc0 <_malloc_r>
 8006c70:	4680      	mov	r8, r0
 8006c72:	b908      	cbnz	r0, 8006c78 <_realloc_r+0x44>
 8006c74:	4645      	mov	r5, r8
 8006c76:	e7ec      	b.n	8006c52 <_realloc_r+0x1e>
 8006c78:	42b4      	cmp	r4, r6
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	bf28      	it	cs
 8006c80:	4632      	movcs	r2, r6
 8006c82:	f7ff ffc9 	bl	8006c18 <memcpy>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff f82d 	bl	8005ce8 <_free_r>
 8006c8e:	e7f1      	b.n	8006c74 <_realloc_r+0x40>

08006c90 <_strtol_l.isra.0>:
 8006c90:	2b24      	cmp	r3, #36	@ 0x24
 8006c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c96:	4686      	mov	lr, r0
 8006c98:	4690      	mov	r8, r2
 8006c9a:	d801      	bhi.n	8006ca0 <_strtol_l.isra.0+0x10>
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d106      	bne.n	8006cae <_strtol_l.isra.0+0x1e>
 8006ca0:	f7fe fff6 	bl	8005c90 <__errno>
 8006ca4:	2316      	movs	r3, #22
 8006ca6:	6003      	str	r3, [r0, #0]
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cae:	4834      	ldr	r0, [pc, #208]	@ (8006d80 <_strtol_l.isra.0+0xf0>)
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cb8:	5d06      	ldrb	r6, [r0, r4]
 8006cba:	f016 0608 	ands.w	r6, r6, #8
 8006cbe:	d1f8      	bne.n	8006cb2 <_strtol_l.isra.0+0x22>
 8006cc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8006cc2:	d110      	bne.n	8006ce6 <_strtol_l.isra.0+0x56>
 8006cc4:	782c      	ldrb	r4, [r5, #0]
 8006cc6:	2601      	movs	r6, #1
 8006cc8:	1c95      	adds	r5, r2, #2
 8006cca:	f033 0210 	bics.w	r2, r3, #16
 8006cce:	d115      	bne.n	8006cfc <_strtol_l.isra.0+0x6c>
 8006cd0:	2c30      	cmp	r4, #48	@ 0x30
 8006cd2:	d10d      	bne.n	8006cf0 <_strtol_l.isra.0+0x60>
 8006cd4:	782a      	ldrb	r2, [r5, #0]
 8006cd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006cda:	2a58      	cmp	r2, #88	@ 0x58
 8006cdc:	d108      	bne.n	8006cf0 <_strtol_l.isra.0+0x60>
 8006cde:	786c      	ldrb	r4, [r5, #1]
 8006ce0:	3502      	adds	r5, #2
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	e00a      	b.n	8006cfc <_strtol_l.isra.0+0x6c>
 8006ce6:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ce8:	bf04      	itt	eq
 8006cea:	782c      	ldrbeq	r4, [r5, #0]
 8006cec:	1c95      	addeq	r5, r2, #2
 8006cee:	e7ec      	b.n	8006cca <_strtol_l.isra.0+0x3a>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1f6      	bne.n	8006ce2 <_strtol_l.isra.0+0x52>
 8006cf4:	2c30      	cmp	r4, #48	@ 0x30
 8006cf6:	bf14      	ite	ne
 8006cf8:	230a      	movne	r3, #10
 8006cfa:	2308      	moveq	r3, #8
 8006cfc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006d00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d04:	2200      	movs	r2, #0
 8006d06:	fbbc f9f3 	udiv	r9, ip, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d10:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006d14:	2f09      	cmp	r7, #9
 8006d16:	d80f      	bhi.n	8006d38 <_strtol_l.isra.0+0xa8>
 8006d18:	463c      	mov	r4, r7
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	dd1b      	ble.n	8006d56 <_strtol_l.isra.0+0xc6>
 8006d1e:	1c57      	adds	r7, r2, #1
 8006d20:	d007      	beq.n	8006d32 <_strtol_l.isra.0+0xa2>
 8006d22:	4581      	cmp	r9, r0
 8006d24:	d314      	bcc.n	8006d50 <_strtol_l.isra.0+0xc0>
 8006d26:	d101      	bne.n	8006d2c <_strtol_l.isra.0+0x9c>
 8006d28:	45a2      	cmp	sl, r4
 8006d2a:	db11      	blt.n	8006d50 <_strtol_l.isra.0+0xc0>
 8006d2c:	fb00 4003 	mla	r0, r0, r3, r4
 8006d30:	2201      	movs	r2, #1
 8006d32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d36:	e7eb      	b.n	8006d10 <_strtol_l.isra.0+0x80>
 8006d38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006d3c:	2f19      	cmp	r7, #25
 8006d3e:	d801      	bhi.n	8006d44 <_strtol_l.isra.0+0xb4>
 8006d40:	3c37      	subs	r4, #55	@ 0x37
 8006d42:	e7ea      	b.n	8006d1a <_strtol_l.isra.0+0x8a>
 8006d44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006d48:	2f19      	cmp	r7, #25
 8006d4a:	d804      	bhi.n	8006d56 <_strtol_l.isra.0+0xc6>
 8006d4c:	3c57      	subs	r4, #87	@ 0x57
 8006d4e:	e7e4      	b.n	8006d1a <_strtol_l.isra.0+0x8a>
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	e7ed      	b.n	8006d32 <_strtol_l.isra.0+0xa2>
 8006d56:	1c53      	adds	r3, r2, #1
 8006d58:	d108      	bne.n	8006d6c <_strtol_l.isra.0+0xdc>
 8006d5a:	2322      	movs	r3, #34	@ 0x22
 8006d5c:	f8ce 3000 	str.w	r3, [lr]
 8006d60:	4660      	mov	r0, ip
 8006d62:	f1b8 0f00 	cmp.w	r8, #0
 8006d66:	d0a0      	beq.n	8006caa <_strtol_l.isra.0+0x1a>
 8006d68:	1e69      	subs	r1, r5, #1
 8006d6a:	e006      	b.n	8006d7a <_strtol_l.isra.0+0xea>
 8006d6c:	b106      	cbz	r6, 8006d70 <_strtol_l.isra.0+0xe0>
 8006d6e:	4240      	negs	r0, r0
 8006d70:	f1b8 0f00 	cmp.w	r8, #0
 8006d74:	d099      	beq.n	8006caa <_strtol_l.isra.0+0x1a>
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d1f6      	bne.n	8006d68 <_strtol_l.isra.0+0xd8>
 8006d7a:	f8c8 1000 	str.w	r1, [r8]
 8006d7e:	e794      	b.n	8006caa <_strtol_l.isra.0+0x1a>
 8006d80:	08006f2f 	.word	0x08006f2f

08006d84 <_strtol_r>:
 8006d84:	f7ff bf84 	b.w	8006c90 <_strtol_l.isra.0>

08006d88 <_strtoul_l.isra.0>:
 8006d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	4e34      	ldr	r6, [pc, #208]	@ (8006e60 <_strtoul_l.isra.0+0xd8>)
 8006d8e:	4686      	mov	lr, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	4628      	mov	r0, r5
 8006d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d98:	5d37      	ldrb	r7, [r6, r4]
 8006d9a:	f017 0708 	ands.w	r7, r7, #8
 8006d9e:	d1f8      	bne.n	8006d92 <_strtoul_l.isra.0+0xa>
 8006da0:	2c2d      	cmp	r4, #45	@ 0x2d
 8006da2:	d110      	bne.n	8006dc6 <_strtoul_l.isra.0+0x3e>
 8006da4:	782c      	ldrb	r4, [r5, #0]
 8006da6:	2701      	movs	r7, #1
 8006da8:	1c85      	adds	r5, r0, #2
 8006daa:	f033 0010 	bics.w	r0, r3, #16
 8006dae:	d115      	bne.n	8006ddc <_strtoul_l.isra.0+0x54>
 8006db0:	2c30      	cmp	r4, #48	@ 0x30
 8006db2:	d10d      	bne.n	8006dd0 <_strtoul_l.isra.0+0x48>
 8006db4:	7828      	ldrb	r0, [r5, #0]
 8006db6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006dba:	2858      	cmp	r0, #88	@ 0x58
 8006dbc:	d108      	bne.n	8006dd0 <_strtoul_l.isra.0+0x48>
 8006dbe:	786c      	ldrb	r4, [r5, #1]
 8006dc0:	3502      	adds	r5, #2
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	e00a      	b.n	8006ddc <_strtoul_l.isra.0+0x54>
 8006dc6:	2c2b      	cmp	r4, #43	@ 0x2b
 8006dc8:	bf04      	itt	eq
 8006dca:	782c      	ldrbeq	r4, [r5, #0]
 8006dcc:	1c85      	addeq	r5, r0, #2
 8006dce:	e7ec      	b.n	8006daa <_strtoul_l.isra.0+0x22>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f6      	bne.n	8006dc2 <_strtoul_l.isra.0+0x3a>
 8006dd4:	2c30      	cmp	r4, #48	@ 0x30
 8006dd6:	bf14      	ite	ne
 8006dd8:	230a      	movne	r3, #10
 8006dda:	2308      	moveq	r3, #8
 8006ddc:	f04f 38ff 	mov.w	r8, #4294967295
 8006de0:	2600      	movs	r6, #0
 8006de2:	fbb8 f8f3 	udiv	r8, r8, r3
 8006de6:	fb03 f908 	mul.w	r9, r3, r8
 8006dea:	ea6f 0909 	mvn.w	r9, r9
 8006dee:	4630      	mov	r0, r6
 8006df0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006df4:	f1bc 0f09 	cmp.w	ip, #9
 8006df8:	d810      	bhi.n	8006e1c <_strtoul_l.isra.0+0x94>
 8006dfa:	4664      	mov	r4, ip
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	dd1e      	ble.n	8006e3e <_strtoul_l.isra.0+0xb6>
 8006e00:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006e04:	d007      	beq.n	8006e16 <_strtoul_l.isra.0+0x8e>
 8006e06:	4580      	cmp	r8, r0
 8006e08:	d316      	bcc.n	8006e38 <_strtoul_l.isra.0+0xb0>
 8006e0a:	d101      	bne.n	8006e10 <_strtoul_l.isra.0+0x88>
 8006e0c:	45a1      	cmp	r9, r4
 8006e0e:	db13      	blt.n	8006e38 <_strtoul_l.isra.0+0xb0>
 8006e10:	fb00 4003 	mla	r0, r0, r3, r4
 8006e14:	2601      	movs	r6, #1
 8006e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e1a:	e7e9      	b.n	8006df0 <_strtoul_l.isra.0+0x68>
 8006e1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006e20:	f1bc 0f19 	cmp.w	ip, #25
 8006e24:	d801      	bhi.n	8006e2a <_strtoul_l.isra.0+0xa2>
 8006e26:	3c37      	subs	r4, #55	@ 0x37
 8006e28:	e7e8      	b.n	8006dfc <_strtoul_l.isra.0+0x74>
 8006e2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006e2e:	f1bc 0f19 	cmp.w	ip, #25
 8006e32:	d804      	bhi.n	8006e3e <_strtoul_l.isra.0+0xb6>
 8006e34:	3c57      	subs	r4, #87	@ 0x57
 8006e36:	e7e1      	b.n	8006dfc <_strtoul_l.isra.0+0x74>
 8006e38:	f04f 36ff 	mov.w	r6, #4294967295
 8006e3c:	e7eb      	b.n	8006e16 <_strtoul_l.isra.0+0x8e>
 8006e3e:	1c73      	adds	r3, r6, #1
 8006e40:	d106      	bne.n	8006e50 <_strtoul_l.isra.0+0xc8>
 8006e42:	2322      	movs	r3, #34	@ 0x22
 8006e44:	f8ce 3000 	str.w	r3, [lr]
 8006e48:	4630      	mov	r0, r6
 8006e4a:	b932      	cbnz	r2, 8006e5a <_strtoul_l.isra.0+0xd2>
 8006e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e50:	b107      	cbz	r7, 8006e54 <_strtoul_l.isra.0+0xcc>
 8006e52:	4240      	negs	r0, r0
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d0f9      	beq.n	8006e4c <_strtoul_l.isra.0+0xc4>
 8006e58:	b106      	cbz	r6, 8006e5c <_strtoul_l.isra.0+0xd4>
 8006e5a:	1e69      	subs	r1, r5, #1
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	e7f5      	b.n	8006e4c <_strtoul_l.isra.0+0xc4>
 8006e60:	08006f2f 	.word	0x08006f2f

08006e64 <_strtoul_r>:
 8006e64:	f7ff bf90 	b.w	8006d88 <_strtoul_l.isra.0>

08006e68 <_malloc_usable_size_r>:
 8006e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6c:	1f18      	subs	r0, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfbc      	itt	lt
 8006e72:	580b      	ldrlt	r3, [r1, r0]
 8006e74:	18c0      	addlt	r0, r0, r3
 8006e76:	4770      	bx	lr

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
