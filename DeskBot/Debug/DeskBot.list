
DeskBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b50  08003b50  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b50  08003b50  00004b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b58  08003b58  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003b60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000010  08003b70  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08003b70  0000525c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d869  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d25  00000000  00000000  000128a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000145d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  000152e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bab  00000000  00000000  00015d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e894  00000000  00000000  0002c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000962b6  00000000  00000000  0003b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  000d145c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d4b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003b20 	.word	0x08003b20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003b20 	.word	0x08003b20

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <PID_Init>:
 *  Created on: May 31, 2025
 *      Author: cole
 */
#include "controller.h"

void PID_Init(PIDController* pid, float kp, float ki, float kd, float out_min, float out_max) {
 8000504:	b480      	push	{r7}
 8000506:	b087      	sub	sp, #28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6178      	str	r0, [r7, #20]
 800050c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000510:	edc7 0a03 	vstr	s1, [r7, #12]
 8000514:	ed87 1a02 	vstr	s2, [r7, #8]
 8000518:	edc7 1a01 	vstr	s3, [r7, #4]
 800051c:	ed87 2a00 	vstr	s4, [r7]
	pid->kp = kp;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
	pid->output =0;
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
	pid->out_min = out_min;
 8000544:	edd7 7a01 	vldr	s15, [r7, #4]
 8000548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800054c:	ee17 2a90 	vmov	r2, s15
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	619a      	str	r2, [r3, #24]
	pid->out_max = out_max;
 8000554:	edd7 7a00 	vldr	s15, [r7]
 8000558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800055c:	ee17 2a90 	vmov	r2, s15
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	61da      	str	r2, [r3, #28]
}
 8000564:	bf00      	nop
 8000566:	371c      	adds	r7, #28
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <PID_Update>:

int PID_Update(PIDController* pid, int setpoint, int measured, int dt) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
	int error = setpoint - measured;
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	617b      	str	r3, [r7, #20]
	pid->integral += error*dt;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	68da      	ldr	r2, [r3, #12]
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	6839      	ldr	r1, [r7, #0]
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	441a      	add	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	60da      	str	r2, [r3, #12]
	int derivative = (error - pid->prev_error)/dt;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	1ad2      	subs	r2, r2, r3
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80005a6:	613b      	str	r3, [r7, #16]

	pid->output = pid->kp*error + pid->ki*pid->integral + pid->kd*derivative;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	ed93 7a00 	vldr	s14, [r3]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	ee07 3a90 	vmov	s15, r3
 80005b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	edd3 6a01 	vldr	s13, [r3, #4]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	ee07 3a90 	vmov	s15, r3
 80005ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005f2:	ee17 2a90 	vmov	r2, s15
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	615a      	str	r2, [r3, #20]

	// Clamp output
	if (pid->output > pid->out_max) pid->output = pid->out_max;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	429a      	cmp	r2, r3
 8000604:	dd04      	ble.n	8000610 <PID_Update+0xa0>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	e009      	b.n	8000624 <PID_Update+0xb4>
	else if (pid->output < pid->out_min) pid->output = pid->out_min;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	429a      	cmp	r2, r3
 800061a:	da03      	bge.n	8000624 <PID_Update+0xb4>
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	699a      	ldr	r2, [r3, #24]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	615a      	str	r2, [r3, #20]

	pid->prev_error = error;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	611a      	str	r2, [r3, #16]
	return pid->output;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	695b      	ldr	r3, [r3, #20]
}
 800062e:	4618      	mov	r0, r3
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 ffb8 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f85e 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 fb2a 	bl	8000ca0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800064c:	f000 f8b8 	bl	80007c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000650:	f000 f908 	bl	8000864 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000654:	f000 f95e 	bl	8000914 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000658:	f000 f9b0 	bl	80009bc <MX_TIM3_Init>
  MX_TIM4_Init();
 800065c:	f000 fa02 	bl	8000a64 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000660:	f000 fa7a 	bl	8000b58 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000664:	f000 faf2 	bl	8000c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	481b      	ldr	r0, [pc, #108]	@ (80006d8 <main+0x9c>)
 800066c:	f002 fa16 	bl	8002a9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000670:	2104      	movs	r1, #4
 8000672:	4819      	ldr	r0, [pc, #100]	@ (80006d8 <main+0x9c>)
 8000674:	f002 fa12 	bl	8002a9c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000678:	213c      	movs	r1, #60	@ 0x3c
 800067a:	4818      	ldr	r0, [pc, #96]	@ (80006dc <main+0xa0>)
 800067c:	f002 fb64 	bl	8002d48 <HAL_TIM_Encoder_Start>

  Motor_Init(&motor_1,&htim4,TIM_CHANNEL_1,TIM_CHANNEL_2);
 8000680:	2304      	movs	r3, #4
 8000682:	2200      	movs	r2, #0
 8000684:	4914      	ldr	r1, [pc, #80]	@ (80006d8 <main+0x9c>)
 8000686:	4816      	ldr	r0, [pc, #88]	@ (80006e0 <main+0xa4>)
 8000688:	f000 fb9c 	bl	8000dc4 <Motor_Init>
  PID_Init(&motor_control_1,0.05,0.00001,0,-100,100);
 800068c:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 80006e4 <main+0xa8>
 8000690:	eddf 1a15 	vldr	s3, [pc, #84]	@ 80006e8 <main+0xac>
 8000694:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80006ec <main+0xb0>
 8000698:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80006f0 <main+0xb4>
 800069c:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80006f4 <main+0xb8>
 80006a0:	4815      	ldr	r0, [pc, #84]	@ (80006f8 <main+0xbc>)
 80006a2:	f7ff ff2f 	bl	8000504 <PID_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(20);
 80006a6:	2014      	movs	r0, #20
 80006a8:	f000 fff6 	bl	8001698 <HAL_Delay>
    encoder_position = __HAL_TIM_GET_COUNTER(&htim1);
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <main+0xa0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <main+0xc0>)
 80006b6:	601a      	str	r2, [r3, #0]
    Set_Duty(&motor_1,PID_Update(&motor_control_1,setpoint,encoder_position,20));
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <main+0xc4>)
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <main+0xc0>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	2314      	movs	r3, #20
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <main+0xbc>)
 80006c4:	f7ff ff54 	bl	8000570 <PID_Update>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4619      	mov	r1, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <main+0xa4>)
 80006ce:	f000 fb92 	bl	8000df6 <Set_Duty>
	HAL_Delay(20);
 80006d2:	bf00      	nop
 80006d4:	e7e7      	b.n	80006a6 <main+0x6a>
 80006d6:	bf00      	nop
 80006d8:	2000014c 	.word	0x2000014c
 80006dc:	20000074 	.word	0x20000074
 80006e0:	20000224 	.word	0x20000224
 80006e4:	42c80000 	.word	0x42c80000
 80006e8:	c2c80000 	.word	0xc2c80000
 80006ec:	00000000 	.word	0x00000000
 80006f0:	3727c5ac 	.word	0x3727c5ac
 80006f4:	3d4ccccd 	.word	0x3d4ccccd
 80006f8:	20000234 	.word	0x20000234
 80006fc:	20000254 	.word	0x20000254
 8000700:	20000000 	.word	0x20000000

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f9d8 	bl	8003ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <SystemClock_Config+0xb4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a21      	ldr	r2, [pc, #132]	@ (80007b8 <SystemClock_Config+0xb4>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemClock_Config+0xb4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <SystemClock_Config+0xb8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1b      	ldr	r2, [pc, #108]	@ (80007bc <SystemClock_Config+0xb8>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <SystemClock_Config+0xb8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fca9 	bl	80020cc <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000780:	f000 fb1a 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 ff0c 	bl	80025bc <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007aa:	f000 fb05 	bl	8000db8 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d2:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007d4:	4a21      	ldr	r2, [pc, #132]	@ (800085c <MX_ADC1_Init+0x9c>)
 80007d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007de:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_ADC1_Init+0x98>)
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <MX_ADC1_Init+0xa0>)
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_ADC1_Init+0x98>)
 800081a:	2201      	movs	r2, #1
 800081c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <MX_ADC1_Init+0x98>)
 8000820:	f000 ff5e 	bl	80016e0 <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 fac5 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800082e:	2306      	movs	r3, #6
 8000830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <MX_ADC1_Init+0x98>)
 8000840:	f000 ff92 	bl	8001768 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800084a:	f000 fab5 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000002c 	.word	0x2000002c
 800085c:	40012000 	.word	0x40012000
 8000860:	0f000001 	.word	0x0f000001

08000864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	@ 0x30
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2224      	movs	r2, #36	@ 0x24
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f003 f928 	bl	8003ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_TIM1_Init+0xa8>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_TIM1_Init+0xac>)
 8000884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_TIM1_Init+0xa8>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_TIM1_Init+0xa8>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_TIM1_Init+0xa8>)
 8000894:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000898:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_TIM1_Init+0xa8>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_TIM1_Init+0xa8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_TIM1_Init+0xa8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_TIM1_Init+0xa8>)
 80008d8:	f002 f990 	bl	8002bfc <HAL_TIM_Encoder_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008e2:	f000 fa69 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <MX_TIM1_Init+0xa8>)
 80008f4:	f002 fdb6 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80008fe:	f000 fa5b 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3730      	adds	r7, #48	@ 0x30
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000074 	.word	0x20000074
 8000910:	40010000 	.word	0x40010000

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	@ 0x30
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2224      	movs	r2, #36	@ 0x24
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f8d0 	bl	8003ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 8000932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 8000946:	f04f 32ff 	mov.w	r2, #4294967295
 800094a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000958:	2301      	movs	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000960:	2301      	movs	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000970:	2301      	movs	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 8000984:	f002 f93a 	bl	8002bfc <HAL_TIM_Encoder_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800098e:	f000 fa13 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_TIM2_Init+0xa4>)
 80009a0:	f002 fd60 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009aa:	f000 fa05 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	@ 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000bc 	.word	0x200000bc

080009bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	@ 0x30
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2224      	movs	r2, #36	@ 0x24
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f87c 	bl	8003ac8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 80009da:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <MX_TIM3_Init+0xa4>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 80009ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 8000a2a:	f002 f8e7 	bl	8002bfc <HAL_TIM_Encoder_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f000 f9c0 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_TIM3_Init+0xa0>)
 8000a46:	f002 fd0d 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a50:	f000 f9b2 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	@ 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000104 	.word	0x20000104
 8000a60:	40000400 	.word	0x40000400

08000a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a86:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000a88:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <MX_TIM4_Init+0xf0>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a8c:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4799;
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000a9a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000aac:	4828      	ldr	r0, [pc, #160]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000aae:	f001 ffa5 	bl	80029fc <HAL_TIM_PWM_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000ab8:	f000 f97e 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4821      	ldr	r0, [pc, #132]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000acc:	f002 fcca 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ad6:	f000 f96f 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	@ 0x60
 8000adc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	4817      	ldr	r0, [pc, #92]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000af2:	f002 f9b7 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000afc:	f000 f95c 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2204      	movs	r2, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4812      	ldr	r0, [pc, #72]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000b08:	f002 f9ac 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b12:	f000 f951 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2208      	movs	r2, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000b1e:	f002 f9a1 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000b28:	f000 f946 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	220c      	movs	r2, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000b34:	f002 f996 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000b3e:	f000 f93b 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <MX_TIM4_Init+0xec>)
 8000b44:	f000 fc20 	bl	8001388 <HAL_TIM_MspPostInit>

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000014c 	.word	0x2000014c
 8000b54:	40000800 	.word	0x40000800

08000b58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b7a:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000b7c:	4a32      	ldr	r2, [pc, #200]	@ (8000c48 <MX_TIM5_Init+0xf0>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b80:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b2f      	ldr	r3, [pc, #188]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b94:	4b2b      	ldr	r3, [pc, #172]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ba0:	4828      	ldr	r0, [pc, #160]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000ba2:	f001 ff2b 	bl	80029fc <HAL_TIM_PWM_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 f904 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4821      	ldr	r0, [pc, #132]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000bc0:	f002 fc50 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000bca:	f000 f8f5 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bce:	2360      	movs	r3, #96	@ 0x60
 8000bd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4817      	ldr	r0, [pc, #92]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000be6:	f002 f93d 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000bf0:	f000 f8e2 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4812      	ldr	r0, [pc, #72]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000bfc:	f002 f932 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 f8d7 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000c12:	f002 f927 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000c1c:	f000 f8cc 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	220c      	movs	r2, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000c28:	f002 f91c 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000c32:	f000 f8c1 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c36:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <MX_TIM5_Init+0xec>)
 8000c38:	f000 fba6 	bl	8001388 <HAL_TIM_MspPostInit>

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	@ 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000194 	.word	0x20000194
 8000c48:	40000c00 	.word	0x40000c00

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c84:	f002 fc5c 	bl	8003540 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8e:	f000 f893 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001dc 	.word	0x200001dc
 8000c9c:	40011000 	.word	0x40011000

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b3b      	ldr	r3, [pc, #236]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b38      	ldr	r3, [pc, #224]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a33      	ldr	r2, [pc, #204]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b31      	ldr	r3, [pc, #196]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a25      	ldr	r2, [pc, #148]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <MX_GPIO_Init+0x108>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d2c:	481f      	ldr	r0, [pc, #124]	@ (8000dac <MX_GPIO_Init+0x10c>)
 8000d2e:	f001 f9b3 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4818      	ldr	r0, [pc, #96]	@ (8000dac <MX_GPIO_Init+0x10c>)
 8000d4c:	f001 f820 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d50:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4811      	ldr	r0, [pc, #68]	@ (8000dac <MX_GPIO_Init+0x10c>)
 8000d66:	f001 f813 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000d6a:	f240 4304 	movw	r3, #1028	@ 0x404
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_GPIO_Init+0x110>)
 8000d80:	f001 f806 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_GPIO_Init+0x114>)
 8000d9a:	f000 fff9 	bl	8001d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40020000 	.word	0x40020000

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <Motor_Init>:
 *  Created on: Apr 17, 2025
 *      Author: cole
 */
#include "motor.h"

void Motor_Init(motor_t* p_mot,TIM_HandleTypeDef *htim, uint32_t channelA, uint32_t channelB){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	603b      	str	r3, [r7, #0]
	p_mot->htim = htim;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	601a      	str	r2, [r3, #0]
	p_mot->channelA = channelA;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	605a      	str	r2, [r3, #4]
	p_mot->channelB = channelB;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	609a      	str	r2, [r3, #8]
	p_mot->dutyCycle = 0;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <Set_Duty>:
void Coast(motor_t* p_mot){
	__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
	__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,0);
}

void Set_Duty(motor_t* p_mot,int32_t speed) { //100% is 4799
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
	if(!speed){
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d152      	bne.n	8000eac <Set_Duty+0xb6>
		p_mot->dutyCycle = 4799;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000e0c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,4799);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <Set_Duty+0x2e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e22:	e01b      	b.n	8000e5c <Set_Duty+0x66>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d106      	bne.n	8000e3a <Set_Duty+0x44>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8000e36:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e38:	e010      	b.n	8000e5c <Set_Duty+0x66>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d106      	bne.n	8000e50 <Set_Duty+0x5a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8000e4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e4e:	e005      	b.n	8000e5c <Set_Duty+0x66>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,4799);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <Set_Duty+0x7c>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000e6e:	635a      	str	r2, [r3, #52]	@ 0x34
	else if (speed < 0 && speed >= -100) {
		p_mot->dutyCycle = -48*speed-1;
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-48*speed-1);
	}
}
 8000e70:	e0f5      	b.n	800105e <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,4799);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d106      	bne.n	8000e88 <Set_Duty+0x92>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8000e84:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e86:	e0ea      	b.n	800105e <Set_Duty+0x268>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d106      	bne.n	8000e9e <Set_Duty+0xa8>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8000e9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e9c:	e0df      	b.n	800105e <Set_Duty+0x268>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	f241 23bf 	movw	r3, #4799	@ 0x12bf
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000eaa:	e0d8      	b.n	800105e <Set_Duty+0x268>
	else if(speed > 0 && speed <= 100) {
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dd68      	ble.n	8000f84 <Set_Duty+0x18e>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b64      	cmp	r3, #100	@ 0x64
 8000eb6:	dc65      	bgt.n	8000f84 <Set_Duty+0x18e>
		p_mot->dutyCycle = 48*speed-1;
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,48*speed-1);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10a      	bne.n	8000ee6 <Set_Duty+0xf0>
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ee4:	e02a      	b.n	8000f3c <Set_Duty+0x146>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d10b      	bne.n	8000f06 <Set_Duty+0x110>
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	1e59      	subs	r1, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	460b      	mov	r3, r1
 8000f02:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f04:	e01a      	b.n	8000f3c <Set_Duty+0x146>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d10b      	bne.n	8000f26 <Set_Duty+0x130>
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	1e59      	subs	r1, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	460b      	mov	r3, r1
 8000f22:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f24:	e00a      	b.n	8000f3c <Set_Duty+0x146>
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	1e59      	subs	r1, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,0);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <Set_Duty+0x15a>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f4e:	e086      	b.n	800105e <Set_Duty+0x268>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d105      	bne.n	8000f64 <Set_Duty+0x16e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f62:	e07c      	b.n	800105e <Set_Duty+0x268>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d105      	bne.n	8000f78 <Set_Duty+0x182>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	2300      	movs	r3, #0
 8000f74:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f76:	e072      	b.n	800105e <Set_Duty+0x268>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	e06c      	b.n	800105e <Set_Duty+0x268>
	else if (speed < 0 && speed >= -100) {
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da69      	bge.n	800105e <Set_Duty+0x268>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000f90:	db65      	blt.n	800105e <Set_Duty+0x268>
		p_mot->dutyCycle = -48*speed-1;
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	4613      	mov	r3, r2
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <Set_Duty+0x1c0>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb4:	e018      	b.n	8000fe8 <Set_Duty+0x1f2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d105      	bne.n	8000fca <Set_Duty+0x1d4>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6393      	str	r3, [r2, #56]	@ 0x38
 8000fc8:	e00e      	b.n	8000fe8 <Set_Duty+0x1f2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d105      	bne.n	8000fde <Set_Duty+0x1e8>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000fdc:	e004      	b.n	8000fe8 <Set_Duty+0x1f2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-48*speed-1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10a      	bne.n	8001006 <Set_Duty+0x210>
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	1e5a      	subs	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001004:	e02b      	b.n	800105e <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-48*speed-1);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d10b      	bne.n	8001026 <Set_Duty+0x230>
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	1e59      	subs	r1, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	460b      	mov	r3, r1
 8001022:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001024:	e01b      	b.n	800105e <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-48*speed-1);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b08      	cmp	r3, #8
 800102c:	d10b      	bne.n	8001046 <Set_Duty+0x250>
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4613      	mov	r3, r2
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	1e59      	subs	r1, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	460b      	mov	r3, r1
 8001042:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001044:	e00b      	b.n	800105e <Set_Duty+0x268>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-48*speed-1);
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	1e59      	subs	r1, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	460b      	mov	r3, r1
 800105a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800105c:	e7ff      	b.n	800105e <Set_Duty+0x268>
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a24      	ldr	r2, [pc, #144]	@ (800116c <HAL_ADC_MspInit+0xb0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d141      	bne.n	8001162 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a22      	ldr	r2, [pc, #136]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 80010e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_ADC_MspInit+0xb4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001132:	23c0      	movs	r3, #192	@ 0xc0
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <HAL_ADC_MspInit+0xb8>)
 8001146:	f000 fe23 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114a:	2303      	movs	r3, #3
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4806      	ldr	r0, [pc, #24]	@ (8001178 <HAL_ADC_MspInit+0xbc>)
 800115e:	f000 fe17 	bl	8001d90 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	@ 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40012000 	.word	0x40012000
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400

0800117c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	@ 0x38
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a5a      	ldr	r2, [pc, #360]	@ (8001304 <HAL_TIM_Encoder_MspInit+0x188>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12d      	bne.n	80011fa <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
 80011a2:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a58      	ldr	r2, [pc, #352]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b56      	ldr	r3, [pc, #344]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
 80011b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	4b52      	ldr	r3, [pc, #328]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a51      	ldr	r2, [pc, #324]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	4846      	ldr	r0, [pc, #280]	@ (800130c <HAL_TIM_Encoder_MspInit+0x190>)
 80011f4:	f000 fdcc 	bl	8001d90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011f8:	e080      	b.n	80012fc <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001202:	d14a      	bne.n	800129a <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	4b3f      	ldr	r3, [pc, #252]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a3e      	ldr	r2, [pc, #248]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b3c      	ldr	r3, [pc, #240]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a37      	ldr	r2, [pc, #220]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b35      	ldr	r3, [pc, #212]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	4b31      	ldr	r3, [pc, #196]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	4a30      	ldr	r2, [pc, #192]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	6313      	str	r3, [r2, #48]	@ 0x30
 800124c:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001258:	2320      	movs	r3, #32
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001268:	2301      	movs	r3, #1
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	4826      	ldr	r0, [pc, #152]	@ (800130c <HAL_TIM_Encoder_MspInit+0x190>)
 8001274:	f000 fd8c 	bl	8001d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001278:	2308      	movs	r3, #8
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001288:	2301      	movs	r3, #1
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	481f      	ldr	r0, [pc, #124]	@ (8001310 <HAL_TIM_Encoder_MspInit+0x194>)
 8001294:	f000 fd7c 	bl	8001d90 <HAL_GPIO_Init>
}
 8001298:	e030      	b.n	80012fc <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1d      	ldr	r2, [pc, #116]	@ (8001314 <HAL_TIM_Encoder_MspInit+0x198>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d12b      	bne.n	80012fc <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	4a16      	ldr	r2, [pc, #88]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <HAL_TIM_Encoder_MspInit+0x18c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012dc:	2330      	movs	r3, #48	@ 0x30
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ec:	2302      	movs	r3, #2
 80012ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	@ (8001310 <HAL_TIM_Encoder_MspInit+0x194>)
 80012f8:	f000 fd4a 	bl	8001d90 <HAL_GPIO_Init>
}
 80012fc:	bf00      	nop
 80012fe:	3738      	adds	r7, #56	@ 0x38
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010000 	.word	0x40010000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40000400 	.word	0x40000400

08001318 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a15      	ldr	r2, [pc, #84]	@ (800137c <HAL_TIM_PWM_MspInit+0x64>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10e      	bne.n	8001348 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_TIM_PWM_MspInit+0x68>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <HAL_TIM_PWM_MspInit+0x68>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_TIM_PWM_MspInit+0x68>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001346:	e012      	b.n	800136e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <HAL_TIM_PWM_MspInit+0x6c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10d      	bne.n	800136e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_TIM_PWM_MspInit+0x68>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_TIM_PWM_MspInit+0x68>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <HAL_TIM_PWM_MspInit+0x68>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40000800 	.word	0x40000800
 8001380:	40023800 	.word	0x40023800
 8001384:	40000c00 	.word	0x40000c00

08001388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <HAL_TIM_MspPostInit+0xb0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d11f      	bne.n	80013ea <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_TIM_MspPostInit+0xb4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a22      	ldr	r2, [pc, #136]	@ (800143c <HAL_TIM_MspPostInit+0xb4>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_TIM_MspPostInit+0xb4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013c6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013d8:	2302      	movs	r3, #2
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4817      	ldr	r0, [pc, #92]	@ (8001440 <HAL_TIM_MspPostInit+0xb8>)
 80013e4:	f000 fcd4 	bl	8001d90 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80013e8:	e022      	b.n	8001430 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <HAL_TIM_MspPostInit+0xbc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11d      	bne.n	8001430 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_TIM_MspPostInit+0xb4>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_TIM_MspPostInit+0xb4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6313      	str	r3, [r2, #48]	@ 0x30
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_TIM_MspPostInit+0xb4>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001410:	230f      	movs	r3, #15
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4807      	ldr	r0, [pc, #28]	@ (8001448 <HAL_TIM_MspPostInit+0xc0>)
 800142c:	f000 fcb0 	bl	8001d90 <HAL_GPIO_Init>
}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40000800 	.word	0x40000800
 800143c:	40023800 	.word	0x40023800
 8001440:	40020400 	.word	0x40020400
 8001444:	40000c00 	.word	0x40000c00
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_UART_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80014a6:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b8:	2307      	movs	r3, #7
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_UART_MspInit+0x8c>)
 80014c4:	f000 fc64 	bl	8001d90 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f891 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f002 faa3 	bl	8003ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff f853 	bl	800063c <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015a4:	08003b60 	.word	0x08003b60
  ldr r2, =_sbss
 80015a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015ac:	2000025c 	.word	0x2000025c

080015b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 fba3 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fd40 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fbad 	bl	8001d76 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 fb83 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000004 	.word	0x20000004
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20000008 	.word	0x20000008

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c
 800167c:	20000258 	.word	0x20000258

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000258 	.word	0x20000258

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff ffee 	bl	8001680 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffde 	bl	8001680 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e033      	b.n	800175e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fcdc 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001726:	f023 0302 	bic.w	r3, r3, #2
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f94a 	bl	80019cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f023 0303 	bic.w	r3, r3, #3
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
 800174e:	e001      	b.n	8001754 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x1c>
 8001780:	2302      	movs	r3, #2
 8001782:	e113      	b.n	80019ac <HAL_ADC_ConfigChannel+0x244>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b09      	cmp	r3, #9
 8001792:	d925      	bls.n	80017e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68d9      	ldr	r1, [r3, #12]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	3b1e      	subs	r3, #30
 80017aa:	2207      	movs	r2, #7
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43da      	mvns	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	400a      	ands	r2, r1
 80017b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68d9      	ldr	r1, [r3, #12]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4403      	add	r3, r0
 80017d2:	3b1e      	subs	r3, #30
 80017d4:	409a      	lsls	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	e022      	b.n	8001826 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6919      	ldr	r1, [r3, #16]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	2207      	movs	r2, #7
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	400a      	ands	r2, r1
 8001802:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6919      	ldr	r1, [r3, #16]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	4603      	mov	r3, r0
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4403      	add	r3, r0
 800181c:	409a      	lsls	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b06      	cmp	r3, #6
 800182c:	d824      	bhi.n	8001878 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b05      	subs	r3, #5
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b05      	subs	r3, #5
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34
 8001876:	e04c      	b.n	8001912 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b0c      	cmp	r3, #12
 800187e:	d824      	bhi.n	80018ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b23      	subs	r3, #35	@ 0x23
 8001892:	221f      	movs	r2, #31
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b23      	subs	r3, #35	@ 0x23
 80018bc:	fa00 f203 	lsl.w	r2, r0, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018c8:	e023      	b.n	8001912 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b41      	subs	r3, #65	@ 0x41
 80018dc:	221f      	movs	r2, #31
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3b41      	subs	r3, #65	@ 0x41
 8001906:	fa00 f203 	lsl.w	r2, r0, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <HAL_ADC_ConfigChannel+0x250>)
 8001914:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <HAL_ADC_ConfigChannel+0x254>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d10f      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1d8>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b12      	cmp	r3, #18
 8001926:	d10b      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_ADC_ConfigChannel+0x254>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12b      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x23a>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <HAL_ADC_ConfigChannel+0x258>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d003      	beq.n	800195c <HAL_ADC_ConfigChannel+0x1f4>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b11      	cmp	r3, #17
 800195a:	d122      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a11      	ldr	r2, [pc, #68]	@ (80019c0 <HAL_ADC_ConfigChannel+0x258>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d111      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_ADC_ConfigChannel+0x260>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	0c9a      	lsrs	r2, r3, #18
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001994:	e002      	b.n	800199c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3b01      	subs	r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40012300 	.word	0x40012300
 80019bc:	40012000 	.word	0x40012000
 80019c0:	10000012 	.word	0x10000012
 80019c4:	20000004 	.word	0x20000004
 80019c8:	431bde83 	.word	0x431bde83

080019cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d4:	4b79      	ldr	r3, [pc, #484]	@ (8001bbc <ADC_Init+0x1f0>)
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	021a      	lsls	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	4a58      	ldr	r2, [pc, #352]	@ (8001bc0 <ADC_Init+0x1f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d022      	beq.n	8001aaa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6899      	ldr	r1, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6899      	ldr	r1, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	e00f      	b.n	8001aca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ac8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0202 	bic.w	r2, r2, #2
 8001ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7e1b      	ldrb	r3, [r3, #24]
 8001ae4:	005a      	lsls	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01b      	beq.n	8001b30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b06:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	3b01      	subs	r3, #1
 8001b24:	035a      	lsls	r2, r3, #13
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	e007      	b.n	8001b40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b3e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	051a      	lsls	r2, r3, #20
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b82:	025a      	lsls	r2, r3, #9
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6899      	ldr	r1, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	029a      	lsls	r2, r3, #10
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40012300 	.word	0x40012300
 8001bc0:	0f000001 	.word	0x0f000001

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	@ (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	@ (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	@ 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	@ (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff47 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff5c 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffb0 	bl	8001ce4 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e159      	b.n	8002060 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dac:	2201      	movs	r2, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8148 	bne.w	800205a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d005      	beq.n	8001de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d130      	bne.n	8001e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 0201 	and.w	r2, r3, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d017      	beq.n	8001e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d123      	bne.n	8001ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0203 	and.w	r2, r3, #3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a2 	beq.w	800205a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b57      	ldr	r3, [pc, #348]	@ (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4a56      	ldr	r2, [pc, #344]	@ (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f26:	4b54      	ldr	r3, [pc, #336]	@ (8002078 <HAL_GPIO_Init+0x2e8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f32:	4a52      	ldr	r2, [pc, #328]	@ (800207c <HAL_GPIO_Init+0x2ec>)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a49      	ldr	r2, [pc, #292]	@ (8002080 <HAL_GPIO_Init+0x2f0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d019      	beq.n	8001f92 <HAL_GPIO_Init+0x202>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a48      	ldr	r2, [pc, #288]	@ (8002084 <HAL_GPIO_Init+0x2f4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x1fe>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a47      	ldr	r2, [pc, #284]	@ (8002088 <HAL_GPIO_Init+0x2f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x1fa>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a46      	ldr	r2, [pc, #280]	@ (800208c <HAL_GPIO_Init+0x2fc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x1f6>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a45      	ldr	r2, [pc, #276]	@ (8002090 <HAL_GPIO_Init+0x300>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x1f2>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e008      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f82:	2307      	movs	r3, #7
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x204>
 8001f92:	2300      	movs	r3, #0
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f002 0203 	and.w	r2, r2, #3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa4:	4935      	ldr	r1, [pc, #212]	@ (800207c <HAL_GPIO_Init+0x2ec>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a24      	ldr	r2, [pc, #144]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202a:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <HAL_GPIO_Init+0x304>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002054:	4a0f      	ldr	r2, [pc, #60]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3301      	adds	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	f67f aea2 	bls.w	8001dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40013800 	.word	0x40013800
 8002080:	40020000 	.word	0x40020000
 8002084:	40020400 	.word	0x40020400
 8002088:	40020800 	.word	0x40020800
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40021000 	.word	0x40021000
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e267      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d075      	beq.n	80021d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ea:	4b88      	ldr	r3, [pc, #544]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d00c      	beq.n	8002110 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f6:	4b85      	ldr	r3, [pc, #532]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d112      	bne.n	8002128 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b82      	ldr	r3, [pc, #520]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800210a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800210e:	d10b      	bne.n	8002128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	4b7e      	ldr	r3, [pc, #504]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d05b      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d157      	bne.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e242      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002130:	d106      	bne.n	8002140 <HAL_RCC_OscConfig+0x74>
 8002132:	4b76      	ldr	r3, [pc, #472]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a75      	ldr	r2, [pc, #468]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xb0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b70      	ldr	r3, [pc, #448]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6f      	ldr	r2, [pc, #444]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b6d      	ldr	r3, [pc, #436]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6c      	ldr	r2, [pc, #432]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xb0>
 8002164:	4b69      	ldr	r3, [pc, #420]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a68      	ldr	r2, [pc, #416]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b66      	ldr	r3, [pc, #408]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a65      	ldr	r2, [pc, #404]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fa7c 	bl	8001680 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fa78 	bl	8001680 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e207      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xc0>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fa68 	bl	8001680 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fa64 	bl	8001680 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1f3      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b51      	ldr	r3, [pc, #324]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021e2:	4b4a      	ldr	r3, [pc, #296]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b44      	ldr	r3, [pc, #272]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x152>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1c7      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4937      	ldr	r1, [pc, #220]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_RCC_OscConfig+0x244>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff fa1d 	bl	8001680 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7ff fa19 	bl	8001680 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a8      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b28      	ldr	r3, [pc, #160]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4925      	ldr	r1, [pc, #148]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <HAL_RCC_OscConfig+0x244>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff f9fc 	bl	8001680 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff f9f8 	bl	8001680 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e187      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d036      	beq.n	8002324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_RCC_OscConfig+0x248>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7ff f9dc 	bl	8001680 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff f9d8 	bl	8001680 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e167      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_RCC_OscConfig+0x240>)
 80022e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x200>
 80022ea:	e01b      	b.n	8002324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCC_OscConfig+0x248>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7ff f9c5 	bl	8001680 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	e00e      	b.n	8002318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fa:	f7ff f9c1 	bl	8001680 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d907      	bls.n	8002318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e150      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	42470000 	.word	0x42470000
 8002314:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ea      	bne.n	80022fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8097 	beq.w	8002460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002336:	4b81      	ldr	r3, [pc, #516]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	4b7d      	ldr	r3, [pc, #500]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a7c      	ldr	r2, [pc, #496]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b7a      	ldr	r3, [pc, #488]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b77      	ldr	r3, [pc, #476]	@ (8002540 <HAL_RCC_OscConfig+0x474>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b74      	ldr	r3, [pc, #464]	@ (8002540 <HAL_RCC_OscConfig+0x474>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a73      	ldr	r2, [pc, #460]	@ (8002540 <HAL_RCC_OscConfig+0x474>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7ff f981 	bl	8001680 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7ff f97d 	bl	8001680 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e10c      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x474>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2ea>
 80023a8:	4b64      	ldr	r3, [pc, #400]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ac:	4a63      	ldr	r2, [pc, #396]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b4:	e01c      	b.n	80023f0 <HAL_RCC_OscConfig+0x324>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x30c>
 80023be:	4b5f      	ldr	r3, [pc, #380]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	4a5e      	ldr	r2, [pc, #376]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ca:	4b5c      	ldr	r3, [pc, #368]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	4a5b      	ldr	r2, [pc, #364]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0x324>
 80023d8:	4b58      	ldr	r3, [pc, #352]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4a57      	ldr	r2, [pc, #348]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e4:	4b55      	ldr	r3, [pc, #340]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	4a54      	ldr	r2, [pc, #336]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d015      	beq.n	8002424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7ff f942 	bl	8001680 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7ff f93e 	bl	8001680 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0cb      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002416:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0ee      	beq.n	8002400 <HAL_RCC_OscConfig+0x334>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff f92c 	bl	8001680 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff f928 	bl	8001680 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0b5      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002442:	4b3e      	ldr	r3, [pc, #248]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ee      	bne.n	800242c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	4a38      	ldr	r2, [pc, #224]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 800245a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a1 	beq.w	80025ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800246a:	4b34      	ldr	r3, [pc, #208]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b08      	cmp	r3, #8
 8002474:	d05c      	beq.n	8002530 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d141      	bne.n	8002502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <HAL_RCC_OscConfig+0x478>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff f8fc 	bl	8001680 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff f8f8 	bl	8001680 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e087      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	491b      	ldr	r1, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <HAL_RCC_OscConfig+0x478>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7ff f8d1 	bl	8001680 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7ff f8cd 	bl	8001680 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e05c      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x416>
 8002500:	e054      	b.n	80025ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <HAL_RCC_OscConfig+0x478>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff f8ba 	bl	8001680 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7ff f8b6 	bl	8001680 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e045      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_RCC_OscConfig+0x470>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
 800252e:	e03d      	b.n	80025ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e038      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	40007000 	.word	0x40007000
 8002544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x4ec>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d028      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d121      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11a      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800257e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0cc      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b68      	ldr	r3, [pc, #416]	@ (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d90c      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b65      	ldr	r3, [pc, #404]	@ (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a58      	ldr	r2, [pc, #352]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800261a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a52      	ldr	r2, [pc, #328]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d044      	beq.n	80026dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d119      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d003      	beq.n	800267a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002676:	2b03      	cmp	r3, #3
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267a:	4b3f      	ldr	r3, [pc, #252]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b3b      	ldr	r3, [pc, #236]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e067      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b37      	ldr	r3, [pc, #220]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4934      	ldr	r1, [pc, #208]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026ac:	f7fe ffe8 	bl	8001680 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7fe ffe4 	bl	8001680 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e04f      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d20c      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	@ (800277c <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ff48 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00
 8002778:	40023800 	.word	0x40023800
 800277c:	08003b38 	.word	0x08003b38
 8002780:	20000004 	.word	0x20000004
 8002784:	20000008 	.word	0x20000008

08002788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b094      	sub	sp, #80	@ 0x50
 800278e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a0:	4b79      	ldr	r3, [pc, #484]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x40>
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	f200 80e1 	bhi.w	8002974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x34>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ba:	e0db      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b73      	ldr	r3, [pc, #460]	@ (800298c <HAL_RCC_GetSysClockFreq+0x204>)
 80027be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027c0:	e0db      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b73      	ldr	r3, [pc, #460]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x208>)
 80027c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027c6:	e0d8      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027de:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	2200      	movs	r2, #0
 80027e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027fa:	4622      	mov	r2, r4
 80027fc:	462b      	mov	r3, r5
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280c:	0150      	lsls	r0, r2, #5
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4621      	mov	r1, r4
 8002814:	1a51      	subs	r1, r2, r1
 8002816:	6139      	str	r1, [r7, #16]
 8002818:	4629      	mov	r1, r5
 800281a:	eb63 0301 	sbc.w	r3, r3, r1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800282c:	4659      	mov	r1, fp
 800282e:	018b      	lsls	r3, r1, #6
 8002830:	4651      	mov	r1, sl
 8002832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002836:	4651      	mov	r1, sl
 8002838:	018a      	lsls	r2, r1, #6
 800283a:	4651      	mov	r1, sl
 800283c:	ebb2 0801 	subs.w	r8, r2, r1
 8002840:	4659      	mov	r1, fp
 8002842:	eb63 0901 	sbc.w	r9, r3, r1
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800285a:	4690      	mov	r8, r2
 800285c:	4699      	mov	r9, r3
 800285e:	4623      	mov	r3, r4
 8002860:	eb18 0303 	adds.w	r3, r8, r3
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	462b      	mov	r3, r5
 8002868:	eb49 0303 	adc.w	r3, r9, r3
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800287a:	4629      	mov	r1, r5
 800287c:	024b      	lsls	r3, r1, #9
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002884:	4621      	mov	r1, r4
 8002886:	024a      	lsls	r2, r1, #9
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288e:	2200      	movs	r2, #0
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002898:	f7fd fc9e 	bl	80001d8 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028a4:	e058      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a6:	4b38      	ldr	r3, [pc, #224]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	2200      	movs	r2, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	4611      	mov	r1, r2
 80028b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80028bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028c0:	4642      	mov	r2, r8
 80028c2:	464b      	mov	r3, r9
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f04f 0100 	mov.w	r1, #0
 80028cc:	0159      	lsls	r1, r3, #5
 80028ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d2:	0150      	lsls	r0, r2, #5
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4641      	mov	r1, r8
 80028da:	ebb2 0a01 	subs.w	sl, r2, r1
 80028de:	4649      	mov	r1, r9
 80028e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f8:	ebb2 040a 	subs.w	r4, r2, sl
 80028fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	00eb      	lsls	r3, r5, #3
 800290a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290e:	00e2      	lsls	r2, r4, #3
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	4643      	mov	r3, r8
 8002916:	18e3      	adds	r3, r4, r3
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	eb45 0303 	adc.w	r3, r5, r3
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292e:	4629      	mov	r1, r5
 8002930:	028b      	lsls	r3, r1, #10
 8002932:	4621      	mov	r1, r4
 8002934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002938:	4621      	mov	r1, r4
 800293a:	028a      	lsls	r2, r1, #10
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002942:	2200      	movs	r2, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	61fa      	str	r2, [r7, #28]
 8002948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294c:	f7fd fc44 	bl	80001d8 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002958:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x200>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	3301      	adds	r3, #1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800296a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetSysClockFreq+0x204>)
 8002976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800297c:	4618      	mov	r0, r3
 800297e:	3750      	adds	r7, #80	@ 0x50
 8002980:	46bd      	mov	sp, r7
 8002982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	00f42400 	.word	0x00f42400
 8002990:	007a1200 	.word	0x007a1200

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029b0:	f7ff fff0 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0a9b      	lsrs	r3, r3, #10
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	08003b48 	.word	0x08003b48

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d8:	f7ff ffdc 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0b5b      	lsrs	r3, r3, #13
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	@ (80029f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08003b48 	.word	0x08003b48

080029fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e041      	b.n	8002a92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fc78 	bl	8001318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f000 fad4 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_TIM_PWM_Start+0x24>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e022      	b.n	8002b06 <HAL_TIM_PWM_Start+0x6a>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d109      	bne.n	8002ada <HAL_TIM_PWM_Start+0x3e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e015      	b.n	8002b06 <HAL_TIM_PWM_Start+0x6a>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d109      	bne.n	8002af4 <HAL_TIM_PWM_Start+0x58>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e008      	b.n	8002b06 <HAL_TIM_PWM_Start+0x6a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e068      	b.n	8002be0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x82>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b1c:	e013      	b.n	8002b46 <HAL_TIM_PWM_Start+0xaa>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x92>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b2c:	e00b      	b.n	8002b46 <HAL_TIM_PWM_Start+0xaa>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d104      	bne.n	8002b3e <HAL_TIM_PWM_Start+0xa2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b3c:	e003      	b.n	8002b46 <HAL_TIM_PWM_Start+0xaa>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fc62 	bl	8003418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a23      	ldr	r2, [pc, #140]	@ (8002be8 <HAL_TIM_PWM_Start+0x14c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_TIM_PWM_Start+0x14c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d018      	beq.n	8002baa <HAL_TIM_PWM_Start+0x10e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b80:	d013      	beq.n	8002baa <HAL_TIM_PWM_Start+0x10e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <HAL_TIM_PWM_Start+0x150>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_TIM_PWM_Start+0x10e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <HAL_TIM_PWM_Start+0x154>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d009      	beq.n	8002baa <HAL_TIM_PWM_Start+0x10e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <HAL_TIM_PWM_Start+0x158>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_TIM_PWM_Start+0x10e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <HAL_TIM_PWM_Start+0x15c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d111      	bne.n	8002bce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d010      	beq.n	8002bde <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	e007      	b.n	8002bde <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	40014000 	.word	0x40014000

08002bfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e097      	b.n	8002d40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe faa9 	bl	800117c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c40:	f023 0307 	bic.w	r3, r3, #7
 8002c44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 f9c9 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c9c:	f023 030c 	bic.w	r3, r3, #12
 8002ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ca8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	031b      	lsls	r3, r3, #12
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002ce2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d110      	bne.n	8002d9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d7e:	7b7b      	ldrb	r3, [r7, #13]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d001      	beq.n	8002d88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e069      	b.n	8002e5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d98:	e031      	b.n	8002dfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d110      	bne.n	8002dc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002da0:	7bbb      	ldrb	r3, [r7, #14]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da6:	7b3b      	ldrb	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d001      	beq.n	8002db0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e055      	b.n	8002e5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dc0:	e01d      	b.n	8002dfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d108      	bne.n	8002dda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dc8:	7bbb      	ldrb	r3, [r7, #14]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dce:	7b7b      	ldrb	r3, [r7, #13]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dd4:	7b3b      	ldrb	r3, [r7, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e03e      	b.n	8002e5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_TIM_Encoder_Start+0xc4>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d008      	beq.n	8002e1c <HAL_TIM_Encoder_Start+0xd4>
 8002e0a:	e00f      	b.n	8002e2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2201      	movs	r2, #1
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 faff 	bl	8003418 <TIM_CCxChannelCmd>
      break;
 8002e1a:	e016      	b.n	8002e4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	2104      	movs	r1, #4
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 faf7 	bl	8003418 <TIM_CCxChannelCmd>
      break;
 8002e2a:	e00e      	b.n	8002e4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 faef 	bl	8003418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2104      	movs	r1, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fae8 	bl	8003418 <TIM_CCxChannelCmd>
      break;
 8002e48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0ae      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	f200 809f 	bhi.w	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e92:	a201      	add	r2, pc, #4	@ (adr r2, 8002e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002fd1 	.word	0x08002fd1
 8002ea0:	08002fd1 	.word	0x08002fd1
 8002ea4:	08002fd1 	.word	0x08002fd1
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002fd1 	.word	0x08002fd1
 8002eb0:	08002fd1 	.word	0x08002fd1
 8002eb4:	08002fd1 	.word	0x08002fd1
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002fd1 	.word	0x08002fd1
 8002ec0:	08002fd1 	.word	0x08002fd1
 8002ec4:	08002fd1 	.word	0x08002fd1
 8002ec8:	08002f8f 	.word	0x08002f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f914 	bl	8003100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      break;
 8002f0a:	e064      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f95a 	bl	80031cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
      break;
 8002f4c:	e043      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f9a5 	bl	80032a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0208 	orr.w	r2, r2, #8
 8002f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0204 	bic.w	r2, r2, #4
 8002f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
      break;
 8002f8c:	e023      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f9ef 	bl	8003378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	61da      	str	r2, [r3, #28]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3a      	ldr	r2, [pc, #232]	@ (80030e4 <TIM_Base_SetConfig+0xfc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d00b      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a37      	ldr	r2, [pc, #220]	@ (80030e8 <TIM_Base_SetConfig+0x100>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a36      	ldr	r2, [pc, #216]	@ (80030ec <TIM_Base_SetConfig+0x104>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x38>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a35      	ldr	r2, [pc, #212]	@ (80030f0 <TIM_Base_SetConfig+0x108>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2b      	ldr	r2, [pc, #172]	@ (80030e4 <TIM_Base_SetConfig+0xfc>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01b      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003040:	d017      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a28      	ldr	r2, [pc, #160]	@ (80030e8 <TIM_Base_SetConfig+0x100>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a27      	ldr	r2, [pc, #156]	@ (80030ec <TIM_Base_SetConfig+0x104>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00f      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a26      	ldr	r2, [pc, #152]	@ (80030f0 <TIM_Base_SetConfig+0x108>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00b      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <TIM_Base_SetConfig+0x10c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <TIM_Base_SetConfig+0x110>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_Base_SetConfig+0x8a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a23      	ldr	r2, [pc, #140]	@ (80030fc <TIM_Base_SetConfig+0x114>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d108      	bne.n	8003084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	@ (80030e4 <TIM_Base_SetConfig+0xfc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d103      	bne.n	80030b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]
  }
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800

08003100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f023 0201 	bic.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0302 	bic.w	r3, r3, #2
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <TIM_OC1_SetConfig+0xc8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10c      	bne.n	8003176 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0308 	bic.w	r3, r3, #8
 8003162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a13      	ldr	r2, [pc, #76]	@ (80031c8 <TIM_OC1_SetConfig+0xc8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800318c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40010000 	.word	0x40010000

080031cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 0210 	bic.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0320 	bic.w	r3, r3, #32
 8003216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <TIM_OC2_SetConfig+0xd4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10d      	bne.n	8003248 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <TIM_OC2_SetConfig+0xd4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d113      	bne.n	8003278 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000

080032a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <TIM_OC3_SetConfig+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10d      	bne.n	800331e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800331c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a14      	ldr	r2, [pc, #80]	@ (8003374 <TIM_OC3_SetConfig+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000

08003378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <TIM_OC4_SetConfig+0x9c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d109      	bne.n	80033ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000

08003418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1a      	ldr	r2, [r3, #32]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e050      	b.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	@ (800352c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c8:	d013      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a18      	ldr	r2, [pc, #96]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a15      	ldr	r2, [pc, #84]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a13      	ldr	r2, [pc, #76]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40014000 	.word	0x40014000

08003540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e042      	b.n	80035d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd ff70 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	@ 0x24
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f82b 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b0c0      	sub	sp, #256	@ 0x100
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fc:	68d9      	ldr	r1, [r3, #12]
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	ea40 0301 	orr.w	r3, r0, r1
 8003608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	431a      	orrs	r2, r3
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003638:	f021 010c 	bic.w	r1, r1, #12
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003646:	430b      	orrs	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	ea40 0301 	orr.w	r3, r0, r1
 8003666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b8f      	ldr	r3, [pc, #572]	@ (80038ac <UART_SetConfig+0x2cc>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d005      	beq.n	8003680 <UART_SetConfig+0xa0>
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b8d      	ldr	r3, [pc, #564]	@ (80038b0 <UART_SetConfig+0x2d0>)
 800367c:	429a      	cmp	r2, r3
 800367e:	d104      	bne.n	800368a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7ff f9a8 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8003684:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003688:	e003      	b.n	8003692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800368a:	f7ff f98f 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 800368e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369c:	f040 810c 	bne.w	80038b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036ba:	415b      	adcs	r3, r3
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036c2:	4621      	mov	r1, r4
 80036c4:	eb12 0801 	adds.w	r8, r2, r1
 80036c8:	4629      	mov	r1, r5
 80036ca:	eb43 0901 	adc.w	r9, r3, r1
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e2:	4690      	mov	r8, r2
 80036e4:	4699      	mov	r9, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	eb18 0303 	adds.w	r3, r8, r3
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036f0:	462b      	mov	r3, r5
 80036f2:	eb49 0303 	adc.w	r3, r9, r3
 80036f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003706:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800370a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800370e:	460b      	mov	r3, r1
 8003710:	18db      	adds	r3, r3, r3
 8003712:	653b      	str	r3, [r7, #80]	@ 0x50
 8003714:	4613      	mov	r3, r2
 8003716:	eb42 0303 	adc.w	r3, r2, r3
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54
 800371c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003724:	f7fc fd58 	bl	80001d8 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <UART_SetConfig+0x2d4>)
 800372e:	fba3 2302 	umull	r2, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	011c      	lsls	r4, r3, #4
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003740:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003750:	415b      	adcs	r3, r3
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003758:	4641      	mov	r1, r8
 800375a:	eb12 0a01 	adds.w	sl, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0b01 	adc.w	fp, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003778:	4692      	mov	sl, r2
 800377a:	469b      	mov	fp, r3
 800377c:	4643      	mov	r3, r8
 800377e:	eb1a 0303 	adds.w	r3, sl, r3
 8003782:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003786:	464b      	mov	r3, r9
 8003788:	eb4b 0303 	adc.w	r3, fp, r3
 800378c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800379c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037a4:	460b      	mov	r3, r1
 80037a6:	18db      	adds	r3, r3, r3
 80037a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037aa:	4613      	mov	r3, r2
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ba:	f7fc fd0d 	bl	80001d8 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	4b3b      	ldr	r3, [pc, #236]	@ (80038b4 <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2264      	movs	r2, #100	@ 0x64
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	1acb      	subs	r3, r1, r3
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037da:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <UART_SetConfig+0x2d4>)
 80037dc:	fba3 2302 	umull	r2, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003804:	415b      	adcs	r3, r3
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800380c:	4641      	mov	r1, r8
 800380e:	1851      	adds	r1, r2, r1
 8003810:	6339      	str	r1, [r7, #48]	@ 0x30
 8003812:	4649      	mov	r1, r9
 8003814:	414b      	adcs	r3, r1
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003824:	4659      	mov	r1, fp
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4651      	mov	r1, sl
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4642      	mov	r2, r8
 800383a:	189b      	adds	r3, r3, r2
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003858:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800385c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003876:	f7fc fcaf 	bl	80001d8 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <UART_SetConfig+0x2d4>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2164      	movs	r1, #100	@ 0x64
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	3332      	adds	r3, #50	@ 0x32
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <UART_SetConfig+0x2d4>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4422      	add	r2, r4
 80038a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038a8:	e106      	b.n	8003ab8 <UART_SetConfig+0x4d8>
 80038aa:	bf00      	nop
 80038ac:	40011000 	.word	0x40011000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038ca:	4642      	mov	r2, r8
 80038cc:	464b      	mov	r3, r9
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	6239      	str	r1, [r7, #32]
 80038d2:	415b      	adcs	r3, r3
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038da:	4641      	mov	r1, r8
 80038dc:	1854      	adds	r4, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb43 0501 	adc.w	r5, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003900:	464b      	mov	r3, r9
 8003902:	eb45 0303 	adc.w	r3, r5, r3
 8003906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003926:	4629      	mov	r1, r5
 8003928:	008b      	lsls	r3, r1, #2
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003930:	4621      	mov	r1, r4
 8003932:	008a      	lsls	r2, r1, #2
 8003934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003938:	f7fc fc4e 	bl	80001d8 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b60      	ldr	r3, [pc, #384]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	011c      	lsls	r4, r3, #4
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003954:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	1891      	adds	r1, r2, r2
 8003962:	61b9      	str	r1, [r7, #24]
 8003964:	415b      	adcs	r3, r3
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396c:	4641      	mov	r1, r8
 800396e:	1851      	adds	r1, r2, r1
 8003970:	6139      	str	r1, [r7, #16]
 8003972:	4649      	mov	r1, r9
 8003974:	414b      	adcs	r3, r1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003984:	4659      	mov	r1, fp
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4651      	mov	r1, sl
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4642      	mov	r2, r8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a0:	464b      	mov	r3, r9
 80039a2:	460a      	mov	r2, r1
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039c4:	4649      	mov	r1, r9
 80039c6:	008b      	lsls	r3, r1, #2
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ce:	4641      	mov	r1, r8
 80039d0:	008a      	lsls	r2, r1, #2
 80039d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039d6:	f7fc fbff 	bl	80001d8 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	4b38      	ldr	r3, [pc, #224]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 80039e2:	fba3 2301 	umull	r2, r3, r3, r1
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2264      	movs	r2, #100	@ 0x64
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	1acb      	subs	r3, r1, r3
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	3332      	adds	r3, #50	@ 0x32
 80039f4:	4a33      	ldr	r2, [pc, #204]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a00:	441c      	add	r4, r3
 8003a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a06:	2200      	movs	r2, #0
 8003a08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a20:	4641      	mov	r1, r8
 8003a22:	1851      	adds	r1, r2, r1
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	4649      	mov	r1, r9
 8003a28:	414b      	adcs	r3, r1
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4651      	mov	r1, sl
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a52:	464b      	mov	r3, r9
 8003a54:	460a      	mov	r2, r1
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a74:	4649      	mov	r1, r9
 8003a76:	008b      	lsls	r3, r1, #2
 8003a78:	4641      	mov	r1, r8
 8003a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7e:	4641      	mov	r1, r8
 8003a80:	008a      	lsls	r2, r1, #2
 8003a82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a86:	f7fc fba7 	bl	80001d8 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	@ 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	@ 0x32
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4422      	add	r2, r4
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <memset>:
 8003ac8:	4402      	add	r2, r0
 8003aca:	4603      	mov	r3, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memset+0xa>
 8003ad0:	4770      	bx	lr
 8003ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad6:	e7f9      	b.n	8003acc <memset+0x4>

08003ad8 <__libc_init_array>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4d0d      	ldr	r5, [pc, #52]	@ (8003b10 <__libc_init_array+0x38>)
 8003adc:	4c0d      	ldr	r4, [pc, #52]	@ (8003b14 <__libc_init_array+0x3c>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	42a6      	cmp	r6, r4
 8003ae6:	d109      	bne.n	8003afc <__libc_init_array+0x24>
 8003ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8003b18 <__libc_init_array+0x40>)
 8003aea:	4c0c      	ldr	r4, [pc, #48]	@ (8003b1c <__libc_init_array+0x44>)
 8003aec:	f000 f818 	bl	8003b20 <_init>
 8003af0:	1b64      	subs	r4, r4, r5
 8003af2:	10a4      	asrs	r4, r4, #2
 8003af4:	2600      	movs	r6, #0
 8003af6:	42a6      	cmp	r6, r4
 8003af8:	d105      	bne.n	8003b06 <__libc_init_array+0x2e>
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b00:	4798      	blx	r3
 8003b02:	3601      	adds	r6, #1
 8003b04:	e7ee      	b.n	8003ae4 <__libc_init_array+0xc>
 8003b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0a:	4798      	blx	r3
 8003b0c:	3601      	adds	r6, #1
 8003b0e:	e7f2      	b.n	8003af6 <__libc_init_array+0x1e>
 8003b10:	08003b58 	.word	0x08003b58
 8003b14:	08003b58 	.word	0x08003b58
 8003b18:	08003b58 	.word	0x08003b58
 8003b1c:	08003b5c 	.word	0x08003b5c

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
