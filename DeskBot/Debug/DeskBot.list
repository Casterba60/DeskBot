
DeskBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004168  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004328  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  08004334  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08004334  000064f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebad  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  00014be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00016c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  000179d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd1  00000000  00000000  00018450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1d2  00000000  00000000  0002f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009648f  00000000  00000000  0003e3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  000d48c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d8118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042e8 	.word	0x080042e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080042e8 	.word	0x080042e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <PID_Init>:
 *      Author: cole
 */
#include "controller.h"

void PID_Init(PIDController* pid, float kp, float ki, float kd, int integral_clamp, int tolerable_error, int out_min, int out_max)
{
 8000504:	b480      	push	{r7}
 8000506:	b089      	sub	sp, #36	@ 0x24
 8000508:	af00      	add	r7, sp, #0
 800050a:	61f8      	str	r0, [r7, #28]
 800050c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000510:	edc7 0a05 	vstr	s1, [r7, #20]
 8000514:	ed87 1a04 	vstr	s2, [r7, #16]
 8000518:	60f9      	str	r1, [r7, #12]
 800051a:	60ba      	str	r2, [r7, #8]
 800051c:	607b      	str	r3, [r7, #4]
	pid->kp = kp;
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	609a      	str	r2, [r3, #8]
	pid->integral = 0;
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
	pid->output = 0;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
	pid->integral_clamp = integral_clamp;
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	611a      	str	r2, [r3, #16]
	pid->out_min = out_min;
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	621a      	str	r2, [r3, #32]
	pid->out_max = out_max;
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000552:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->tolerable_error = tolerable_error;
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	615a      	str	r2, [r3, #20]
}
 800055a:	bf00      	nop
 800055c:	3724      	adds	r7, #36	@ 0x24
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <PID_Update>:

int PID_Update(PIDController* pid, int setpoint, int measured, int dt)
{
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	603b      	str	r3, [r7, #0]
	int error = setpoint - measured;
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	617b      	str	r3, [r7, #20]

	pid->integral += error*dt/40; //scale integral error down
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68da      	ldr	r2, [r3, #12]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	6839      	ldr	r1, [r7, #0]
 8000586:	fb01 f303 	mul.w	r3, r1, r3
 800058a:	493e      	ldr	r1, [pc, #248]	@ (8000684 <PID_Update+0x11c>)
 800058c:	fb81 0103 	smull	r0, r1, r1, r3
 8000590:	1109      	asrs	r1, r1, #4
 8000592:	17db      	asrs	r3, r3, #31
 8000594:	1acb      	subs	r3, r1, r3
 8000596:	441a      	add	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	60da      	str	r2, [r3, #12]
	//clamp integral
	if (pid->integral > pid->integral_clamp)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dd04      	ble.n	80005b2 <PID_Update+0x4a>
	{
		pid->integral = pid->integral_clamp;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	691a      	ldr	r2, [r3, #16]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	e00b      	b.n	80005ca <PID_Update+0x62>
	}
	else if  (pid->integral < -1*pid->integral_clamp)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	425b      	negs	r3, r3
 80005bc:	429a      	cmp	r2, r3
 80005be:	da04      	bge.n	80005ca <PID_Update+0x62>
	{
		pid->integral = -1*pid->integral_clamp;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	425a      	negs	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	60da      	str	r2, [r3, #12]
	}

	if(abs(error) < pid->tolerable_error)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	429a      	cmp	r2, r3
 80005da:	da02      	bge.n	80005e2 <PID_Update+0x7a>
	{
		pid->integral = 0;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
	}

	int derivative = (error - pid->prev_error)/dt;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	1ad2      	subs	r2, r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f0:	613b      	str	r3, [r7, #16]

	pid->output = pid->kp*error + pid->ki*pid->integral + pid->kd*derivative;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	ed93 7a00 	vldr	s14, [r3]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	edd3 6a01 	vldr	s13, [r3, #4]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800061c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	edd3 6a02 	vldr	s13, [r3, #8]
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	ee07 3a90 	vmov	s15, r3
 800062c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063c:	ee17 2a90 	vmov	r2, s15
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	61da      	str	r2, [r3, #28]

	// Clamp output
	if (pid->output > pid->out_max)
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800064c:	429a      	cmp	r2, r3
 800064e:	dd04      	ble.n	800065a <PID_Update+0xf2>
	{
		pid->output = pid->out_max;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	e009      	b.n	800066e <PID_Update+0x106>
	}
	else if (pid->output < pid->out_min)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	69da      	ldr	r2, [r3, #28]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	429a      	cmp	r2, r3
 8000664:	da03      	bge.n	800066e <PID_Update+0x106>
	{
		pid->output = pid->out_min;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a1a      	ldr	r2, [r3, #32]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	61da      	str	r2, [r3, #28]
	}

	pid->prev_error = error;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	619a      	str	r2, [r3, #24]
	return pid->output;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	69db      	ldr	r3, [r3, #28]
}
 8000678:	4618      	mov	r0, r3
 800067a:	371c      	adds	r7, #28
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	66666667 	.word	0x66666667

08000688 <Read_Encoder>:

#include "joint.h"

//HELPER FUNCTIONS:
void Read_Encoder(joint* joint, int dt_ms)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

	int curr_count = __HAL_TIM_GET_COUNTER(joint->encoderHandle);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069a:	60bb      	str	r3, [r7, #8]
	int delta = curr_count - joint->previousEncoderCount;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	60fb      	str	r3, [r7, #12]

	 // Handle 16-bit counter overflow/underflow
	if (delta > 32767) {
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80006ac:	db04      	blt.n	80006b8 <Read_Encoder+0x30>
		delta -= 65536;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e007      	b.n	80006c8 <Read_Encoder+0x40>
	}
	else if (delta < -32768) {
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80006be:	da03      	bge.n	80006c8 <Read_Encoder+0x40>
		delta += 65536;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80006c6:	60fb      	str	r3, [r7, #12]
	}
	if (!joint->encoder_init) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <Read_Encoder+0x52>
		delta = 0;  // Avoid spike on first call
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
	    joint->encoder_init = 1;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	671a      	str	r2, [r3, #112]	@ 0x70
	}

	joint->previousEncoderCount = curr_count;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	66da      	str	r2, [r3, #108]	@ 0x6c

	joint->actual_velocity = delta / dt_ms;
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	65da      	str	r2, [r3, #92]	@ 0x5c
	joint->actual_position = joint->actual_position + delta;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	441a      	add	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <Joint_Init>:

//DEF FUNCTIONS
void Joint_Init(joint* joint, motor_t* p_mot, TIM_HandleTypeDef* encoderHandle,
		PIDController* pos_pid,PIDController* vel_pid)
{
 8000704:	b4b0      	push	{r4, r5, r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
 8000710:	603b      	str	r3, [r7, #0]
	joint->position_pid = *pos_pid;
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	4614      	mov	r4, r2
 8000718:	461d      	mov	r5, r3
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000726:	e884 0003 	stmia.w	r4, {r0, r1}
	joint->velocity_pid = *vel_pid;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6a3a      	ldr	r2, [r7, #32]
 800072e:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8000732:	4615      	mov	r5, r2
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000740:	e884 0003 	stmia.w	r4, {r0, r1}

	joint->desired_position = 0;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2200      	movs	r2, #0
 8000748:	651a      	str	r2, [r3, #80]	@ 0x50
	joint->desired_velocity = 0;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2200      	movs	r2, #0
 800074e:	655a      	str	r2, [r3, #84]	@ 0x54
	joint->actual_position = 0;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2200      	movs	r2, #0
 8000754:	659a      	str	r2, [r3, #88]	@ 0x58
	joint->actual_velocity = 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	2200      	movs	r2, #0
 800075a:	65da      	str	r2, [r3, #92]	@ 0x5c
	joint->control_output = 0;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2200      	movs	r2, #0
 8000760:	661a      	str	r2, [r3, #96]	@ 0x60

	joint->p_mot = p_mot;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	665a      	str	r2, [r3, #100]	@ 0x64
	joint->encoderHandle = encoderHandle;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	669a      	str	r2, [r3, #104]	@ 0x68
	joint->enable = 1;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2201      	movs	r2, #1
 8000772:	675a      	str	r2, [r3, #116]	@ 0x74

	joint->previousEncoderCount = 0;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2200      	movs	r2, #0
 8000778:	66da      	str	r2, [r3, #108]	@ 0x6c
	joint->encoder_init = 0;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bcb0      	pop	{r4, r5, r7}
 8000788:	4770      	bx	lr
	...

0800078c <Joint_Update>:

void Joint_Update(joint* joint, int dt_ms)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	static int outer_loop_counter = 0;

	Read_Encoder(joint,dt_ms); //gets position and velocity
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff75 	bl	8000688 <Read_Encoder>

	if(!joint->enable){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d035      	beq.n	8000812 <Joint_Update+0x86>
		return;
	}
	//run outer loop every 10 calls
	if(outer_loop_counter == 0)
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <Joint_Update+0x90>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10f      	bne.n	80007ce <Joint_Update+0x42>
	{
		joint->desired_velocity = PID_Update(&joint->position_pid,
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4622      	mov	r2, r4
 80007c4:	f7ff fed0 	bl	8000568 <PID_Update>
 80007c8:	4602      	mov	r2, r0
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	655a      	str	r2, [r3, #84]	@ 0x54
											joint->desired_position,
											joint->actual_position,10*dt_ms);
	}
	//inner loop
	joint->control_output = PID_Update(&joint->velocity_pid,
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f7ff fec3 	bl	8000568 <PID_Update>
 80007e2:	4602      	mov	r2, r0
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	661a      	str	r2, [r3, #96]	@ 0x60
										joint->desired_velocity,
										joint->actual_velocity,dt_ms);
	Set_Duty(joint->p_mot,joint->control_output);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f0:	4619      	mov	r1, r3
 80007f2:	4610      	mov	r0, r2
 80007f4:	f000 fccf 	bl	8001196 <Set_Duty>

	outer_loop_counter++;
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <Joint_Update+0x90>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <Joint_Update+0x90>)
 8000800:	6013      	str	r3, [r2, #0]
	if(outer_loop_counter >= 2){ //ratio of outer loop to inner loop control
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <Joint_Update+0x90>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	dd04      	ble.n	8000814 <Joint_Update+0x88>
		outer_loop_counter = 0;
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <Joint_Update+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e000      	b.n	8000814 <Joint_Update+0x88>
		return;
 8000812:	bf00      	nop
	}
}
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	bf00      	nop
 800081c:	20000028 	.word	0x20000028

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f001 f8c3 	bl	80019b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f8f5 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 fbe5 	bl	8000ffc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000832:	f000 f94f 	bl	8000ad4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000836:	f000 f99f 	bl	8000b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 800083a:	f000 f9f5 	bl	8000c28 <MX_TIM2_Init>
  MX_TIM3_Init();
 800083e:	f000 fa47 	bl	8000cd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000842:	f000 fa99 	bl	8000d78 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000846:	f000 fb11 	bl	8000e6c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800084a:	f000 fbad 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800084e:	f000 fb87 	bl	8000f60 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000852:	2100      	movs	r1, #0
 8000854:	4858      	ldr	r0, [pc, #352]	@ (80009b8 <main+0x198>)
 8000856:	f002 fbd9 	bl	800300c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800085a:	2104      	movs	r1, #4
 800085c:	4856      	ldr	r0, [pc, #344]	@ (80009b8 <main+0x198>)
 800085e:	f002 fbd5 	bl	800300c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000862:	2108      	movs	r1, #8
 8000864:	4854      	ldr	r0, [pc, #336]	@ (80009b8 <main+0x198>)
 8000866:	f002 fbd1 	bl	800300c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800086a:	210c      	movs	r1, #12
 800086c:	4852      	ldr	r0, [pc, #328]	@ (80009b8 <main+0x198>)
 800086e:	f002 fbcd 	bl	800300c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	4851      	ldr	r0, [pc, #324]	@ (80009bc <main+0x19c>)
 8000876:	f002 fbc9 	bl	800300c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 800087a:	2104      	movs	r1, #4
 800087c:	484f      	ldr	r0, [pc, #316]	@ (80009bc <main+0x19c>)
 800087e:	f002 fbc5 	bl	800300c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000882:	213c      	movs	r1, #60	@ 0x3c
 8000884:	484e      	ldr	r0, [pc, #312]	@ (80009c0 <main+0x1a0>)
 8000886:	f002 fd17 	bl	80032b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800088a:	213c      	movs	r1, #60	@ 0x3c
 800088c:	484d      	ldr	r0, [pc, #308]	@ (80009c4 <main+0x1a4>)
 800088e:	f002 fd13 	bl	80032b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000892:	213c      	movs	r1, #60	@ 0x3c
 8000894:	484c      	ldr	r0, [pc, #304]	@ (80009c8 <main+0x1a8>)
 8000896:	f002 fd0f 	bl	80032b8 <HAL_TIM_Encoder_Start>

  Motor_Init(&motor_1,&htim4,TIM_CHANNEL_1,TIM_CHANNEL_2);
 800089a:	2304      	movs	r3, #4
 800089c:	2200      	movs	r2, #0
 800089e:	4946      	ldr	r1, [pc, #280]	@ (80009b8 <main+0x198>)
 80008a0:	484a      	ldr	r0, [pc, #296]	@ (80009cc <main+0x1ac>)
 80008a2:	f000 fc5f 	bl	8001164 <Motor_Init>
  Motor_Init(&motor_2,&htim4,TIM_CHANNEL_3,TIM_CHANNEL_4);
 80008a6:	230c      	movs	r3, #12
 80008a8:	2208      	movs	r2, #8
 80008aa:	4943      	ldr	r1, [pc, #268]	@ (80009b8 <main+0x198>)
 80008ac:	4848      	ldr	r0, [pc, #288]	@ (80009d0 <main+0x1b0>)
 80008ae:	f000 fc59 	bl	8001164 <Motor_Init>
  Motor_Init(&motor_3,&htim5,TIM_CHANNEL_1,TIM_CHANNEL_2);
 80008b2:	2304      	movs	r3, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	4941      	ldr	r1, [pc, #260]	@ (80009bc <main+0x19c>)
 80008b8:	4846      	ldr	r0, [pc, #280]	@ (80009d4 <main+0x1b4>)
 80008ba:	f000 fc53 	bl	8001164 <Motor_Init>

  //PID_Init(PIDController* pid, float kp, float ki, float kd, float out_min, float out_max);
  PID_Init(&motor1_pos,0.4,0.062,40,750,15,-150,150);//max/min is ticks/ms
 80008be:	2396      	movs	r3, #150	@ 0x96
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	f06f 0395 	mvn.w	r3, #149	@ 0x95
 80008c6:	220f      	movs	r2, #15
 80008c8:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80008cc:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 80009d8 <main+0x1b8>
 80008d0:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80009dc <main+0x1bc>
 80008d4:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80009e0 <main+0x1c0>
 80008d8:	4842      	ldr	r0, [pc, #264]	@ (80009e4 <main+0x1c4>)
 80008da:	f7ff fe13 	bl	8000504 <PID_Init>
  PID_Init(&motor1_vel,0.4,0.085,60,350,3,-80,80); //output is PWM signal
 80008de:	2350      	movs	r3, #80	@ 0x50
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80008e6:	2203      	movs	r2, #3
 80008e8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80008ec:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 80009e8 <main+0x1c8>
 80008f0:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80009ec <main+0x1cc>
 80008f4:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80009e0 <main+0x1c0>
 80008f8:	483d      	ldr	r0, [pc, #244]	@ (80009f0 <main+0x1d0>)
 80008fa:	f7ff fe03 	bl	8000504 <PID_Init>

  PID_Init(&motor2_pos,0.4,0.062,0,750,20,-200,200);//max/min is ticks/ms
 80008fe:	23c8      	movs	r3, #200	@ 0xc8
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000906:	2214      	movs	r2, #20
 8000908:	f240 21ee 	movw	r1, #750	@ 0x2ee
 800090c:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 80009f4 <main+0x1d4>
 8000910:	eddf 0a32 	vldr	s1, [pc, #200]	@ 80009dc <main+0x1bc>
 8000914:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80009e0 <main+0x1c0>
 8000918:	4837      	ldr	r0, [pc, #220]	@ (80009f8 <main+0x1d8>)
 800091a:	f7ff fdf3 	bl	8000504 <PID_Init>
  PID_Init(&motor2_vel,0.4,0.085,0,350,4,-80,80); //output is PWM signal
 800091e:	2350      	movs	r3, #80	@ 0x50
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8000926:	2204      	movs	r2, #4
 8000928:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800092c:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 80009f4 <main+0x1d4>
 8000930:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80009ec <main+0x1cc>
 8000934:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80009e0 <main+0x1c0>
 8000938:	4830      	ldr	r0, [pc, #192]	@ (80009fc <main+0x1dc>)
 800093a:	f7ff fde3 	bl	8000504 <PID_Init>

  PID_Init(&motor3_pos,0.4,0.062,0,750,20,-200,200);//max/min is ticks/ms
 800093e:	23c8      	movs	r3, #200	@ 0xc8
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	f06f 03c7 	mvn.w	r3, #199	@ 0xc7
 8000946:	2214      	movs	r2, #20
 8000948:	f240 21ee 	movw	r1, #750	@ 0x2ee
 800094c:	ed9f 1a29 	vldr	s2, [pc, #164]	@ 80009f4 <main+0x1d4>
 8000950:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80009dc <main+0x1bc>
 8000954:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80009e0 <main+0x1c0>
 8000958:	4829      	ldr	r0, [pc, #164]	@ (8000a00 <main+0x1e0>)
 800095a:	f7ff fdd3 	bl	8000504 <PID_Init>
  PID_Init(&motor3_vel,0.4,0.085,0,350,4,-80,80); //output is PWM signal
 800095e:	2350      	movs	r3, #80	@ 0x50
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8000966:	2204      	movs	r2, #4
 8000968:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800096c:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 80009f4 <main+0x1d4>
 8000970:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80009ec <main+0x1cc>
 8000974:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80009e0 <main+0x1c0>
 8000978:	4822      	ldr	r0, [pc, #136]	@ (8000a04 <main+0x1e4>)
 800097a:	f7ff fdc3 	bl	8000504 <PID_Init>

  //Joint_Init(Joint* joint, motor* p_mot, TIM_HandleTypeDef* encoderHandle,
	//PIDController* pos_pid,PIDController* vel_pid);
  Joint_Init(&shoulderYaw,&motor_1,&htim1,&motor1_pos,&motor1_vel);
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <main+0x1d0>)
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <main+0x1c4>)
 8000984:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <main+0x1a0>)
 8000986:	4911      	ldr	r1, [pc, #68]	@ (80009cc <main+0x1ac>)
 8000988:	481f      	ldr	r0, [pc, #124]	@ (8000a08 <main+0x1e8>)
 800098a:	f7ff febb 	bl	8000704 <Joint_Init>
  Joint_Init(&shoulderPitch,&motor_2,&htim2,&motor2_pos,&motor2_vel);
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <main+0x1dc>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <main+0x1d8>)
 8000994:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <main+0x1a4>)
 8000996:	490e      	ldr	r1, [pc, #56]	@ (80009d0 <main+0x1b0>)
 8000998:	481c      	ldr	r0, [pc, #112]	@ (8000a0c <main+0x1ec>)
 800099a:	f7ff feb3 	bl	8000704 <Joint_Init>
  Joint_Init(&elbowPitch,&motor_3,&htim3,&motor3_pos,&motor3_vel);
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <main+0x1e4>)
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <main+0x1e0>)
 80009a4:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <main+0x1a8>)
 80009a6:	490b      	ldr	r1, [pc, #44]	@ (80009d4 <main+0x1b4>)
 80009a8:	4819      	ldr	r0, [pc, #100]	@ (8000a10 <main+0x1f0>)
 80009aa:	f7ff feab 	bl	8000704 <Joint_Init>

  HAL_TIM_Base_Start_IT(&htim10);
 80009ae:	4819      	ldr	r0, [pc, #100]	@ (8000a14 <main+0x1f4>)
 80009b0:	f002 fa7a 	bl	8002ea8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <main+0x194>
 80009b8:	2000014c 	.word	0x2000014c
 80009bc:	20000194 	.word	0x20000194
 80009c0:	20000074 	.word	0x20000074
 80009c4:	200000bc 	.word	0x200000bc
 80009c8:	20000104 	.word	0x20000104
 80009cc:	2000026c 	.word	0x2000026c
 80009d0:	2000027c 	.word	0x2000027c
 80009d4:	2000028c 	.word	0x2000028c
 80009d8:	42200000 	.word	0x42200000
 80009dc:	3d7df3b6 	.word	0x3d7df3b6
 80009e0:	3ecccccd 	.word	0x3ecccccd
 80009e4:	2000029c 	.word	0x2000029c
 80009e8:	42700000 	.word	0x42700000
 80009ec:	3dae147b 	.word	0x3dae147b
 80009f0:	200002c4 	.word	0x200002c4
 80009f4:	00000000 	.word	0x00000000
 80009f8:	200002ec 	.word	0x200002ec
 80009fc:	20000314 	.word	0x20000314
 8000a00:	2000033c 	.word	0x2000033c
 8000a04:	20000364 	.word	0x20000364
 8000a08:	2000038c 	.word	0x2000038c
 8000a0c:	20000404 	.word	0x20000404
 8000a10:	2000047c 	.word	0x2000047c
 8000a14:	200001dc 	.word	0x200001dc

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	@ 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	@ 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fc32 	bl	8004290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <SystemClock_Config+0xb4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <SystemClock_Config+0xb4>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <SystemClock_Config+0xb4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <SystemClock_Config+0xb8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <SystemClock_Config+0xb8>)
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <SystemClock_Config+0xb8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fd25 	bl	80024d8 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a94:	f000 fb60 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 ff88 	bl	80029c8 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000abe:	f000 fb4b 	bl	8001158 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	@ 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	@ (8000b70 <MX_ADC1_Init+0x9c>)
 8000aea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b14:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <MX_ADC1_Init+0xa0>)
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b34:	f000 ffae 	bl	8001a94 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f000 fb0b 	bl	8001158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b42:	2306      	movs	r3, #6
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_ADC1_Init+0x98>)
 8000b54:	f000 ffe2 	bl	8001b1c <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b5e:	f000 fafb 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000002c 	.word	0x2000002c
 8000b70:	40012000 	.word	0x40012000
 8000b74:	0f000001 	.word	0x0f000001

08000b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2224      	movs	r2, #36	@ 0x24
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fb82 	bl	8004290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000b96:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <MX_TIM1_Init+0xac>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000bec:	f002 fabe 	bl	800316c <HAL_TIM_Encoder_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bf6:	f000 faaf 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <MX_TIM1_Init+0xa8>)
 8000c08:	f002 fffc 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c12:	f000 faa1 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3730      	adds	r7, #48	@ 0x30
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000074 	.word	0x20000074
 8000c24:	40010000 	.word	0x40010000

08000c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2224      	movs	r2, #36	@ 0x24
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fb2a 	bl	8004290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c44:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c70:	2302      	movs	r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c74:	2301      	movs	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000c98:	f002 fa68 	bl	800316c <HAL_TIM_Encoder_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ca2:	f000 fa59 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <MX_TIM2_Init+0xa4>)
 8000cb4:	f002 ffa6 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cbe:	f000 fa4b 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	@ 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000bc 	.word	0x200000bc

08000cd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2224      	movs	r2, #36	@ 0x24
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fad6 	bl	8004290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cec:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000cee:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <MX_TIM3_Init+0xa4>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000d3e:	f002 fa15 	bl	800316c <HAL_TIM_Encoder_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d48:	f000 fa06 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_TIM3_Init+0xa0>)
 8000d5a:	f002 ff53 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d64:	f000 f9f8 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3730      	adds	r7, #48	@ 0x30
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000104 	.word	0x20000104
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d9a:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000d9c:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <MX_TIM4_Init+0xf0>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000da0:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8000dac:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000dae:	f240 128f 	movw	r2, #399	@ 0x18f
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc0:	4828      	ldr	r0, [pc, #160]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000dc2:	f002 f8d3 	bl	8002f6c <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f000 f9c4 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4821      	ldr	r0, [pc, #132]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000de0:	f002 ff10 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000dea:	f000 f9b5 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	@ 0x60
 8000df0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4817      	ldr	r0, [pc, #92]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000e06:	f002 fbd5 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e10:	f000 f9a2 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000e1c:	f002 fbca 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e26:	f000 f997 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000e32:	f002 fbbf 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000e3c:	f000 f98c 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	220c      	movs	r2, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000e48:	f002 fbb4 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000e52:	f000 f981 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e56:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <MX_TIM4_Init+0xec>)
 8000e58:	f000 fc86 	bl	8001768 <HAL_TIM_MspPostInit>

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	@ 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000014c 	.word	0x2000014c
 8000e68:	40000800 	.word	0x40000800

08000e6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e8e:	4b32      	ldr	r3, [pc, #200]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000e90:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <MX_TIM5_Init+0xf0>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 399;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000ea2:	f240 128f 	movw	r2, #399	@ 0x18f
 8000ea6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000eb4:	4828      	ldr	r0, [pc, #160]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000eb6:	f002 f859 	bl	8002f6c <HAL_TIM_PWM_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f000 f94a 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4821      	ldr	r0, [pc, #132]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000ed4:	f002 fe96 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000ede:	f000 f93b 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee2:	2360      	movs	r3, #96	@ 0x60
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4817      	ldr	r0, [pc, #92]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000efa:	f002 fb5b 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000f04:	f000 f928 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000f10:	f002 fb50 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000f1a:	f000 f91d 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2208      	movs	r2, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000f26:	f002 fb45 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000f30:	f000 f912 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	220c      	movs	r2, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000f3c:	f002 fb3a 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000f46:	f000 f907 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <MX_TIM5_Init+0xec>)
 8000f4c:	f000 fc0c 	bl	8001768 <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	@ 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000194 	.word	0x20000194
 8000f5c:	40000c00 	.word	0x40000c00

08000f60 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <MX_TIM10_Init+0x44>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f70:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 799;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f7a:	f240 321f 	movw	r2, #799	@ 0x31f
 8000f7e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_TIM10_Init+0x40>)
 8000f8e:	f001 ff3b 	bl	8002e08 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000f98:	f000 f8de 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001dc 	.word	0x200001dc
 8000fa4:	40014400 	.word	0x40014400

08000fa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_USART1_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f002 fe92 	bl	8003d08 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f8b5 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	40011000 	.word	0x40011000

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b3b      	ldr	r3, [pc, #236]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a3a      	ldr	r2, [pc, #232]	@ (8001104 <MX_GPIO_Init+0x108>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a33      	ldr	r2, [pc, #204]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a2c      	ldr	r2, [pc, #176]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b2a      	ldr	r3, [pc, #168]	@ (8001104 <MX_GPIO_Init+0x108>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <MX_GPIO_Init+0x108>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <MX_GPIO_Init+0x108>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001088:	481f      	ldr	r0, [pc, #124]	@ (8001108 <MX_GPIO_Init+0x10c>)
 800108a:	f001 fa0b 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4818      	ldr	r0, [pc, #96]	@ (8001108 <MX_GPIO_Init+0x10c>)
 80010a8:	f001 f878 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010ac:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	@ (8001108 <MX_GPIO_Init+0x10c>)
 80010c2:	f001 f86b 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80010c6:	f240 4304 	movw	r3, #1028	@ 0x404
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <MX_GPIO_Init+0x110>)
 80010dc:	f001 f85e 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010e0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <MX_GPIO_Init+0x114>)
 80010f6:	f001 f851 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	@ 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800
 800110c:	40020400 	.word	0x40020400
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		//PID CONTROL HERE
		Joint_Update(&shoulderYaw,50);
 8001126:	2132      	movs	r1, #50	@ 0x32
 8001128:	4808      	ldr	r0, [pc, #32]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800112a:	f7ff fb2f 	bl	800078c <Joint_Update>
		Joint_Update(&shoulderPitch,50);
 800112e:	2132      	movs	r1, #50	@ 0x32
 8001130:	4807      	ldr	r0, [pc, #28]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001132:	f7ff fb2b 	bl	800078c <Joint_Update>
		Joint_Update(&elbowPitch,50);
 8001136:	2132      	movs	r1, #50	@ 0x32
 8001138:	4806      	ldr	r0, [pc, #24]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800113a:	f7ff fb27 	bl	800078c <Joint_Update>
	}
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40014400 	.word	0x40014400
 800114c:	2000038c 	.word	0x2000038c
 8001150:	20000404 	.word	0x20000404
 8001154:	2000047c 	.word	0x2000047c

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <Error_Handler+0x8>

08001164 <Motor_Init>:
 *  Created on: Apr 17, 2025
 *      Author: cole
 */
#include "motor.h"

void Motor_Init(motor_t* p_mot,TIM_HandleTypeDef *htim, uint32_t channelA, uint32_t channelB){
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
	p_mot->htim = htim;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
	p_mot->channelA = channelA;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]
	p_mot->channelB = channelB;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	609a      	str	r2, [r3, #8]
	p_mot->dutyCycle = 0;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <Set_Duty>:
void Coast(motor_t* p_mot){
	__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
	__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,0);
}

void Set_Duty(motor_t* p_mot,int32_t speed) { //100% is 399
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	if(!speed){
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d152      	bne.n	800124c <Set_Duty+0xb6>
		p_mot->dutyCycle = 399;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f240 128f 	movw	r2, #399	@ 0x18f
 80011ac:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,399);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <Set_Duty+0x2e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f240 128f 	movw	r2, #399	@ 0x18f
 80011c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80011c2:	e01b      	b.n	80011fc <Set_Duty+0x66>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d106      	bne.n	80011da <Set_Duty+0x44>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f240 138f 	movw	r3, #399	@ 0x18f
 80011d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80011d8:	e010      	b.n	80011fc <Set_Duty+0x66>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d106      	bne.n	80011f0 <Set_Duty+0x5a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f240 138f 	movw	r3, #399	@ 0x18f
 80011ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011ee:	e005      	b.n	80011fc <Set_Duty+0x66>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f240 138f 	movw	r3, #399	@ 0x18f
 80011fa:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,399);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <Set_Duty+0x7c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f240 128f 	movw	r2, #399	@ 0x18f
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
	else if (speed < 0 && speed >= -100) {
		p_mot->dutyCycle = -4*speed-1;
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-4*speed-1);
	}
}
 8001210:	e0e6      	b.n	80013e0 <Set_Duty+0x24a>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,399);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d106      	bne.n	8001228 <Set_Duty+0x92>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	f240 138f 	movw	r3, #399	@ 0x18f
 8001224:	6393      	str	r3, [r2, #56]	@ 0x38
 8001226:	e0db      	b.n	80013e0 <Set_Duty+0x24a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d106      	bne.n	800123e <Set_Duty+0xa8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f240 138f 	movw	r3, #399	@ 0x18f
 800123a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800123c:	e0d0      	b.n	80013e0 <Set_Duty+0x24a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f240 138f 	movw	r3, #399	@ 0x18f
 8001248:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800124a:	e0c9      	b.n	80013e0 <Set_Duty+0x24a>
	else if(speed > 0 && speed <= 100) {
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	dd59      	ble.n	8001306 <Set_Duty+0x170>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b64      	cmp	r3, #100	@ 0x64
 8001256:	dc56      	bgt.n	8001306 <Set_Duty+0x170>
		p_mot->dutyCycle = 4*speed-1;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,4*speed-1);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <Set_Duty+0xe4>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34
 8001278:	e021      	b.n	80012be <Set_Duty+0x128>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d108      	bne.n	8001294 <Set_Duty+0xfe>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	1e59      	subs	r1, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	460b      	mov	r3, r1
 8001290:	6393      	str	r3, [r2, #56]	@ 0x38
 8001292:	e014      	b.n	80012be <Set_Duty+0x128>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b08      	cmp	r3, #8
 800129a:	d108      	bne.n	80012ae <Set_Duty+0x118>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	1e59      	subs	r1, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	460b      	mov	r3, r1
 80012aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012ac:	e007      	b.n	80012be <Set_Duty+0x128>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	1e59      	subs	r1, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	460b      	mov	r3, r1
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,0);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <Set_Duty+0x13c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d0:	e086      	b.n	80013e0 <Set_Duty+0x24a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d105      	bne.n	80012e6 <Set_Duty+0x150>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80012e4:	e07c      	b.n	80013e0 <Set_Duty+0x24a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d105      	bne.n	80012fa <Set_Duty+0x164>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012f8:	e072      	b.n	80013e0 <Set_Duty+0x24a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	e06c      	b.n	80013e0 <Set_Duty+0x24a>
	else if (speed < 0 && speed >= -100) {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	da69      	bge.n	80013e0 <Set_Duty+0x24a>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001312:	db65      	blt.n	80013e0 <Set_Duty+0x24a>
		p_mot->dutyCycle = -4*speed-1;
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4613      	mov	r3, r2
 8001318:	079b      	lsls	r3, r3, #30
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelA,0);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d105      	bne.n	8001338 <Set_Duty+0x1a2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34
 8001336:	e018      	b.n	800136a <Set_Duty+0x1d4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d105      	bne.n	800134c <Set_Duty+0x1b6>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	6393      	str	r3, [r2, #56]	@ 0x38
 800134a:	e00e      	b.n	800136a <Set_Duty+0x1d4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d105      	bne.n	8001360 <Set_Duty+0x1ca>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800135e:	e004      	b.n	800136a <Set_Duty+0x1d4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-4*speed-1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10a      	bne.n	8001388 <Set_Duty+0x1f2>
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4613      	mov	r3, r2
 8001376:	079b      	lsls	r3, r3, #30
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001386:	e02b      	b.n	80013e0 <Set_Duty+0x24a>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-4*speed-1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d10b      	bne.n	80013a8 <Set_Duty+0x212>
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	4613      	mov	r3, r2
 8001394:	079b      	lsls	r3, r3, #30
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	1e59      	subs	r1, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80013a6:	e01b      	b.n	80013e0 <Set_Duty+0x24a>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-4*speed-1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d10b      	bne.n	80013c8 <Set_Duty+0x232>
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4613      	mov	r3, r2
 80013b4:	079b      	lsls	r3, r3, #30
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	1e59      	subs	r1, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	460b      	mov	r3, r1
 80013c4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80013c6:	e00b      	b.n	80013e0 <Set_Duty+0x24a>
		__HAL_TIM_SET_COMPARE(p_mot->htim,p_mot->channelB,-4*speed-1);
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	079b      	lsls	r3, r3, #30
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	1e59      	subs	r1, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	460b      	mov	r3, r1
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80013de:	e7ff      	b.n	80013e0 <Set_Duty+0x24a>
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a24      	ldr	r2, [pc, #144]	@ (80014ec <HAL_ADC_MspInit+0xb0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d141      	bne.n	80014e2 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_ADC_MspInit+0xb4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014b2:	23c0      	movs	r3, #192	@ 0xc0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b6:	2303      	movs	r3, #3
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <HAL_ADC_MspInit+0xb8>)
 80014c6:	f000 fe69 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ca:	2303      	movs	r3, #3
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <HAL_ADC_MspInit+0xbc>)
 80014de:	f000 fe5d 	bl	800219c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40012000 	.word	0x40012000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	@ 0x38
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <HAL_TIM_Encoder_MspInit+0x198>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d135      	bne.n	800158a <HAL_TIM_Encoder_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
 8001522:	4b5d      	ldr	r3, [pc, #372]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a5c      	ldr	r2, [pc, #368]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b5a      	ldr	r3, [pc, #360]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	623b      	str	r3, [r7, #32]
 8001538:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a55      	ldr	r2, [pc, #340]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b53      	ldr	r3, [pc, #332]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001568:	2301      	movs	r3, #1
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	484a      	ldr	r0, [pc, #296]	@ (800169c <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001574:	f000 fe12 	bl	800219c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2019      	movs	r0, #25
 800157e:	f000 fdd6 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001582:	2019      	movs	r0, #25
 8001584:	f000 fdef 	bl	8002166 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001588:	e080      	b.n	800168c <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001592:	d14a      	bne.n	800162a <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	4b3f      	ldr	r3, [pc, #252]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159c:	4a3e      	ldr	r2, [pc, #248]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	4a37      	ldr	r2, [pc, #220]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	6313      	str	r3, [r2, #48]	@ 0x30
 80015dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e8:	2320      	movs	r3, #32
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f8:	2301      	movs	r3, #1
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4826      	ldr	r0, [pc, #152]	@ (800169c <HAL_TIM_Encoder_MspInit+0x1a0>)
 8001604:	f000 fdca 	bl	800219c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001608:	2308      	movs	r3, #8
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001618:	2301      	movs	r3, #1
 800161a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	481f      	ldr	r0, [pc, #124]	@ (80016a0 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001624:	f000 fdba 	bl	800219c <HAL_GPIO_Init>
}
 8001628:	e030      	b.n	800168c <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM3)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d12b      	bne.n	800168c <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_TIM_Encoder_MspInit+0x19c>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800166c:	2330      	movs	r3, #48	@ 0x30
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800167c:	2302      	movs	r3, #2
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	@ (80016a0 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001688:	f000 fd88 	bl	800219c <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	@ 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40010000 	.word	0x40010000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40000400 	.word	0x40000400

080016a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a15      	ldr	r2, [pc, #84]	@ (800170c <HAL_TIM_PWM_MspInit+0x64>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10e      	bne.n	80016d8 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <HAL_TIM_PWM_MspInit+0x68>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <HAL_TIM_PWM_MspInit+0x68>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <HAL_TIM_PWM_MspInit+0x68>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80016d6:	e012      	b.n	80016fe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <HAL_TIM_PWM_MspInit+0x6c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10d      	bne.n	80016fe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_TIM_PWM_MspInit+0x68>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_TIM_PWM_MspInit+0x68>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <HAL_TIM_PWM_MspInit+0x68>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40000800 	.word	0x40000800
 8001710:	40023800 	.word	0x40023800
 8001714:	40000c00 	.word	0x40000c00

08001718 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0e      	ldr	r2, [pc, #56]	@ (8001760 <HAL_TIM_Base_MspInit+0x48>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d115      	bne.n	8001756 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <HAL_TIM_Base_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <HAL_TIM_Base_MspInit+0x4c>)
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_TIM_Base_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2019      	movs	r0, #25
 800174c:	f000 fcef 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001750:	2019      	movs	r0, #25
 8001752:	f000 fd08 	bl	8002166 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40014400 	.word	0x40014400
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	@ 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a24      	ldr	r2, [pc, #144]	@ (8001818 <HAL_TIM_MspPostInit+0xb0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d11f      	bne.n	80017ca <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_TIM_MspPostInit+0xb4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a22      	ldr	r2, [pc, #136]	@ (800181c <HAL_TIM_MspPostInit+0xb4>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_TIM_MspPostInit+0xb4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017a6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017b8:	2302      	movs	r3, #2
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4817      	ldr	r0, [pc, #92]	@ (8001820 <HAL_TIM_MspPostInit+0xb8>)
 80017c4:	f000 fcea 	bl	800219c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80017c8:	e022      	b.n	8001810 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <HAL_TIM_MspPostInit+0xbc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d11d      	bne.n	8001810 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_TIM_MspPostInit+0xb4>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_TIM_MspPostInit+0xb4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_TIM_MspPostInit+0xb4>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017f0:	230f      	movs	r3, #15
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001800:	2302      	movs	r3, #2
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <HAL_TIM_MspPostInit+0xc0>)
 800180c:	f000 fcc6 	bl	800219c <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40000800 	.word	0x40000800
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40000c00 	.word	0x40000c00
 8001828:	40020000 	.word	0x40020000

0800182c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <HAL_UART_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12c      	bne.n	80018a8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001886:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001898:	2307      	movs	r3, #7
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_UART_MspInit+0x8c>)
 80018a4:	f000 fc7a 	bl	800219c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f89f 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001920:	4803      	ldr	r0, [pc, #12]	@ (8001930 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001922:	f001 fd57 	bl	80033d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001926:	4803      	ldr	r0, [pc, #12]	@ (8001934 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001928:	f001 fd54 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000074 	.word	0x20000074
 8001934:	200001dc 	.word	0x200001dc

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001994 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001960:	f7ff ffea 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	@ (800199c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	@ (80019a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f002 fc89 	bl	80042a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198e:	f7fe ff47 	bl	8000820 <main>
  bx  lr    
 8001992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019a0:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 80019a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019a8:	200004f8 	.word	0x200004f8

080019ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC_IRQHandler>
	...

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b4:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <HAL_Init+0x40>)
 80019ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <HAL_Init+0x40>)
 80019c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <HAL_Init+0x40>)
 80019d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 fb9d 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019de:	200f      	movs	r0, #15
 80019e0:	f000 f808 	bl	80019f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e4:	f7ff fd02 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_InitTick+0x54>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_InitTick+0x58>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fbb5 	bl	8002182 <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00e      	b.n	8001a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d80a      	bhi.n	8001a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f000 fb7d 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a34:	4a06      	ldr	r2, [pc, #24]	@ (8001a50 <HAL_InitTick+0x5c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008
 8001a78:	200004f4 	.word	0x200004f4

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200004f4 	.word	0x200004f4

08001a94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e033      	b.n	8001b12 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fcc2 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ada:	f023 0302 	bic.w	r3, r3, #2
 8001ade:	f043 0202 	orr.w	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f94a 	bl	8001d80 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b02:	e001      	b.n	8001b08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x1c>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e113      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x244>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d925      	bls.n	8001b94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68d9      	ldr	r1, [r3, #12]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b1e      	subs	r3, #30
 8001b5e:	2207      	movs	r2, #7
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43da      	mvns	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68d9      	ldr	r1, [r3, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4403      	add	r3, r0
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	e022      	b.n	8001bda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6919      	ldr	r1, [r3, #16]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2207      	movs	r2, #7
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6919      	ldr	r1, [r3, #16]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4403      	add	r3, r0
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d824      	bhi.n	8001c2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b05      	subs	r3, #5
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b05      	subs	r3, #5
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c2a:	e04c      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d824      	bhi.n	8001c7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b23      	subs	r3, #35	@ 0x23
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	400a      	ands	r2, r1
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b23      	subs	r3, #35	@ 0x23
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c7c:	e023      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b41      	subs	r3, #65	@ 0x41
 8001c90:	221f      	movs	r2, #31
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b41      	subs	r3, #65	@ 0x41
 8001cba:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc6:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <HAL_ADC_ConfigChannel+0x250>)
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a28      	ldr	r2, [pc, #160]	@ (8001d70 <HAL_ADC_ConfigChannel+0x254>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d10f      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1d8>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d10b      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <HAL_ADC_ConfigChannel+0x254>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12b      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x23a>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1c      	ldr	r2, [pc, #112]	@ (8001d74 <HAL_ADC_ConfigChannel+0x258>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d003      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x1f4>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	d122      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <HAL_ADC_ConfigChannel+0x258>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d111      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_ADC_ConfigChannel+0x25c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_ADC_ConfigChannel+0x260>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0c9a      	lsrs	r2, r3, #18
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f9      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	40012000 	.word	0x40012000
 8001d74:	10000012 	.word	0x10000012
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83

08001d80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d88:	4b79      	ldr	r3, [pc, #484]	@ (8001f70 <ADC_Init+0x1f0>)
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	021a      	lsls	r2, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6899      	ldr	r1, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	4a58      	ldr	r2, [pc, #352]	@ (8001f74 <ADC_Init+0x1f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e00f      	b.n	8001e7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0202 	bic.w	r2, r2, #2
 8001e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e1b      	ldrb	r3, [r3, #24]
 8001e98:	005a      	lsls	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001eca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	035a      	lsls	r2, r3, #13
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e007      	b.n	8001ef4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ef2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	051a      	lsls	r2, r3, #20
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f36:	025a      	lsls	r2, r3, #9
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	029a      	lsls	r2, r3, #10
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40012300 	.word	0x40012300
 8001f74:	0f000001 	.word	0x0f000001

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	@ (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	@ (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e159      	b.n	800246c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8148 	bne.w	8002466 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a2 	beq.w	8002466 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b57      	ldr	r3, [pc, #348]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a56      	ldr	r2, [pc, #344]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b54      	ldr	r3, [pc, #336]	@ (8002484 <HAL_GPIO_Init+0x2e8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x2f0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x202>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_GPIO_Init+0x2f4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x1fe>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a47      	ldr	r2, [pc, #284]	@ (8002494 <HAL_GPIO_Init+0x2f8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x1fa>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <HAL_GPIO_Init+0x2fc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x1f6>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_GPIO_Init+0x300>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x1f2>
 800238a:	2304      	movs	r3, #4
 800238c:	e008      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800238e:	2307      	movs	r3, #7
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002392:	2303      	movs	r3, #3
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x204>
 800239e:	2300      	movs	r3, #0
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f002 0203 	and.w	r2, r2, #3
 80023a6:	0092      	lsls	r2, r2, #2
 80023a8:	4093      	lsls	r3, r2
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b0:	4935      	ldr	r1, [pc, #212]	@ (8002488 <HAL_GPIO_Init+0x2ec>)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e2:	4a2f      	ldr	r2, [pc, #188]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800240c:	4a24      	ldr	r2, [pc, #144]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002436:	4a1a      	ldr	r2, [pc, #104]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002460:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_GPIO_Init+0x304>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	f67f aea2 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40013800 	.word	0x40013800
 800248c:	40020000 	.word	0x40020000
 8002490:	40020400 	.word	0x40020400
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	40013c00 	.word	0x40013c00

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e267      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d075      	beq.n	80025e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024f6:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d00c      	beq.n	800251c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002502:	4b85      	ldr	r3, [pc, #532]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800250a:	2b08      	cmp	r3, #8
 800250c:	d112      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4b82      	ldr	r3, [pc, #520]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251a:	d10b      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	4b7e      	ldr	r3, [pc, #504]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d05b      	beq.n	80025e0 <HAL_RCC_OscConfig+0x108>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d157      	bne.n	80025e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e242      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253c:	d106      	bne.n	800254c <HAL_RCC_OscConfig+0x74>
 800253e:	4b76      	ldr	r3, [pc, #472]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e01d      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x98>
 8002556:	4b70      	ldr	r3, [pc, #448]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6f      	ldr	r2, [pc, #444]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b6d      	ldr	r3, [pc, #436]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6c      	ldr	r2, [pc, #432]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 8002570:	4b69      	ldr	r3, [pc, #420]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a68      	ldr	r2, [pc, #416]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b66      	ldr	r3, [pc, #408]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a65      	ldr	r2, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff fa74 	bl	8001a7c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fa70 	bl	8001a7c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e207      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0xc0>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fa60 	bl	8001a7c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff fa5c 	bl	8001a7c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1f3      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	4b51      	ldr	r3, [pc, #324]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0xe8>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d063      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11c      	bne.n	8002640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002606:	4b44      	ldr	r3, [pc, #272]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d116      	bne.n	8002640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x152>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e1c7      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4937      	ldr	r1, [pc, #220]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	e03a      	b.n	80026b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002648:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_RCC_OscConfig+0x244>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7ff fa15 	bl	8001a7c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002656:	f7ff fa11 	bl	8001a7c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1a8      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	4b2b      	ldr	r3, [pc, #172]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4925      	ldr	r1, [pc, #148]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCC_OscConfig+0x244>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f9f4 	bl	8001a7c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7ff f9f0 	bl	8001a7c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e187      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d036      	beq.n	8002730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_RCC_OscConfig+0x248>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7ff f9d4 	bl	8001a7c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7ff f9d0 	bl	8001a7c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e167      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_OscConfig+0x240>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x200>
 80026f6:	e01b      	b.n	8002730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_OscConfig+0x248>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7ff f9bd 	bl	8001a7c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	e00e      	b.n	8002724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff f9b9 	bl	8001a7c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d907      	bls.n	8002724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e150      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
 8002718:	40023800 	.word	0x40023800
 800271c:	42470000 	.word	0x42470000
 8002720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ea      	bne.n	8002706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8097 	beq.w	800286c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b81      	ldr	r3, [pc, #516]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	4b7d      	ldr	r3, [pc, #500]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	4a7c      	ldr	r2, [pc, #496]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	@ 0x40
 800275e:	4b7a      	ldr	r3, [pc, #488]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b77      	ldr	r3, [pc, #476]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b74      	ldr	r3, [pc, #464]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a73      	ldr	r2, [pc, #460]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7ff f979 	bl	8001a7c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7ff f975 	bl	8001a7c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e10c      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b6a      	ldr	r3, [pc, #424]	@ (800294c <HAL_RCC_OscConfig+0x474>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2ea>
 80027b4:	4b64      	ldr	r3, [pc, #400]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	4a63      	ldr	r2, [pc, #396]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x324>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x30c>
 80027ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027da:	4a5b      	ldr	r2, [pc, #364]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x324>
 80027e4:	4b58      	ldr	r3, [pc, #352]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4a57      	ldr	r2, [pc, #348]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f0:	4b55      	ldr	r3, [pc, #340]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f4:	4a54      	ldr	r2, [pc, #336]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 0304 	bic.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff f93a 	bl	8001a7c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7ff f936 	bl	8001a7c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0cb      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ee      	beq.n	800280c <HAL_RCC_OscConfig+0x334>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7ff f924 	bl	8001a7c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7ff f920 	bl	8001a7c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0b5      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284e:	4b3e      	ldr	r3, [pc, #248]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ee      	bne.n	8002838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b39      	ldr	r3, [pc, #228]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	4a38      	ldr	r2, [pc, #224]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80a1 	beq.w	80029b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002876:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b08      	cmp	r3, #8
 8002880:	d05c      	beq.n	800293c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d141      	bne.n	800290e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f8f4 	bl	8001a7c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7ff f8f0 	bl	8001a7c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e087      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	491b      	ldr	r1, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x478>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7ff f8c9 	bl	8001a7c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff f8c5 	bl	8001a7c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e05c      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x416>
 800290c:	e054      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f8b2 	bl	8001a7c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f8ae 	bl	8001a7c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e045      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x444>
 800293a:	e03d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e038      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
 8002950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x4ec>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d028      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d121      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800298a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0cc      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b68      	ldr	r3, [pc, #416]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d90c      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b65      	ldr	r3, [pc, #404]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b63      	ldr	r3, [pc, #396]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b8      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a1c:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a58      	ldr	r2, [pc, #352]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a34:	4b53      	ldr	r3, [pc, #332]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a52      	ldr	r2, [pc, #328]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b50      	ldr	r3, [pc, #320]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	494d      	ldr	r1, [pc, #308]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d044      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b47      	ldr	r3, [pc, #284]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b3f      	ldr	r3, [pc, #252]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3b      	ldr	r3, [pc, #236]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e067      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b37      	ldr	r3, [pc, #220]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4934      	ldr	r1, [pc, #208]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe ffe0 	bl	8001a7c <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe ffdc 	bl	8001a7c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e04f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d20c      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b22      	ldr	r3, [pc, #136]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e032      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4916      	ldr	r1, [pc, #88]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	490e      	ldr	r1, [pc, #56]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4e:	f000 f821 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490a      	ldr	r1, [pc, #40]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	4a09      	ldr	r2, [pc, #36]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe ff40 	bl	80019f4 <HAL_InitTick>

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023c00 	.word	0x40023c00
 8002b84:	40023800 	.word	0x40023800
 8002b88:	08004300 	.word	0x08004300
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000004 	.word	0x20000004

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b98:	b094      	sub	sp, #80	@ 0x50
 8002b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bac:	4b79      	ldr	r3, [pc, #484]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	f200 80e1 	bhi.w	8002d80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc6:	e0db      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4b73      	ldr	r3, [pc, #460]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bcc:	e0db      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bce:	4b73      	ldr	r3, [pc, #460]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x208>)
 8002bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bd2:	e0d8      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bde:	4b6d      	ldr	r3, [pc, #436]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b6a      	ldr	r3, [pc, #424]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bf4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bfe:	2300      	movs	r3, #0
 8002c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c06:	4622      	mov	r2, r4
 8002c08:	462b      	mov	r3, r5
 8002c0a:	f04f 0000 	mov.w	r0, #0
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	0159      	lsls	r1, r3, #5
 8002c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c18:	0150      	lsls	r0, r2, #5
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4621      	mov	r1, r4
 8002c20:	1a51      	subs	r1, r2, r1
 8002c22:	6139      	str	r1, [r7, #16]
 8002c24:	4629      	mov	r1, r5
 8002c26:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c38:	4659      	mov	r1, fp
 8002c3a:	018b      	lsls	r3, r1, #6
 8002c3c:	4651      	mov	r1, sl
 8002c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c42:	4651      	mov	r1, sl
 8002c44:	018a      	lsls	r2, r1, #6
 8002c46:	4651      	mov	r1, sl
 8002c48:	ebb2 0801 	subs.w	r8, r2, r1
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c66:	4690      	mov	r8, r2
 8002c68:	4699      	mov	r9, r3
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	eb18 0303 	adds.w	r3, r8, r3
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	462b      	mov	r3, r5
 8002c74:	eb49 0303 	adc.w	r3, r9, r3
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c86:	4629      	mov	r1, r5
 8002c88:	024b      	lsls	r3, r1, #9
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c90:	4621      	mov	r1, r4
 8002c92:	024a      	lsls	r2, r1, #9
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ca4:	f7fd fa98 	bl	80001d8 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4613      	mov	r3, r2
 8002cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb0:	e058      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb2:	4b38      	ldr	r3, [pc, #224]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	f04f 0000 	mov.w	r0, #0
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	0159      	lsls	r1, r3, #5
 8002cda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cde:	0150      	lsls	r0, r2, #5
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cea:	4649      	mov	r1, r9
 8002cec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d04:	ebb2 040a 	subs.w	r4, r2, sl
 8002d08:	eb63 050b 	sbc.w	r5, r3, fp
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	00eb      	lsls	r3, r5, #3
 8002d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1a:	00e2      	lsls	r2, r4, #3
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	461d      	mov	r5, r3
 8002d20:	4643      	mov	r3, r8
 8002d22:	18e3      	adds	r3, r4, r3
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	464b      	mov	r3, r9
 8002d28:	eb45 0303 	adc.w	r3, r5, r3
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	028b      	lsls	r3, r1, #10
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d44:	4621      	mov	r1, r4
 8002d46:	028a      	lsls	r2, r1, #10
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	61fa      	str	r2, [r7, #28]
 8002d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d58:	f7fd fa3e 	bl	80001d8 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4613      	mov	r3, r2
 8002d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3750      	adds	r7, #80	@ 0x50
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	@ (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a9b      	lsrs	r3, r3, #10
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	@ (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08004310 	.word	0x08004310

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff ffdc 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0b5b      	lsrs	r3, r3, #13
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08004310 	.word	0x08004310

08002e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e041      	b.n	8002e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fc72 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 fc9e 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d001      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e044      	b.n	8002f4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d018      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eea:	d013      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x6c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f5c <HAL_TIM_Base_Start_IT+0xb4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x6c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a19      	ldr	r2, [pc, #100]	@ (8002f60 <HAL_TIM_Base_Start_IT+0xb8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x6c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	@ (8002f64 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x6c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a16      	ldr	r2, [pc, #88]	@ (8002f68 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d010      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f36:	e007      	b.n	8002f48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40014000 	.word	0x40014000

08002f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e041      	b.n	8003002 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fb88 	bl	80016a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 fbec 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_TIM_PWM_Start+0x24>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e022      	b.n	8003076 <HAL_TIM_PWM_Start+0x6a>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b04      	cmp	r3, #4
 8003034:	d109      	bne.n	800304a <HAL_TIM_PWM_Start+0x3e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e015      	b.n	8003076 <HAL_TIM_PWM_Start+0x6a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d109      	bne.n	8003064 <HAL_TIM_PWM_Start+0x58>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e008      	b.n	8003076 <HAL_TIM_PWM_Start+0x6a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e068      	b.n	8003150 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start+0x82>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800308c:	e013      	b.n	80030b6 <HAL_TIM_PWM_Start+0xaa>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d104      	bne.n	800309e <HAL_TIM_PWM_Start+0x92>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800309c:	e00b      	b.n	80030b6 <HAL_TIM_PWM_Start+0xaa>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start+0xa2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ac:	e003      	b.n	80030b6 <HAL_TIM_PWM_Start+0xaa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fd7a 	bl	8003bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a23      	ldr	r2, [pc, #140]	@ (8003158 <HAL_TIM_PWM_Start+0x14c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d107      	bne.n	80030de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <HAL_TIM_PWM_Start+0x14c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d018      	beq.n	800311a <HAL_TIM_PWM_Start+0x10e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f0:	d013      	beq.n	800311a <HAL_TIM_PWM_Start+0x10e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a19      	ldr	r2, [pc, #100]	@ (800315c <HAL_TIM_PWM_Start+0x150>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00e      	beq.n	800311a <HAL_TIM_PWM_Start+0x10e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a17      	ldr	r2, [pc, #92]	@ (8003160 <HAL_TIM_PWM_Start+0x154>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_TIM_PWM_Start+0x10e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a16      	ldr	r2, [pc, #88]	@ (8003164 <HAL_TIM_PWM_Start+0x158>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d004      	beq.n	800311a <HAL_TIM_PWM_Start+0x10e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <HAL_TIM_PWM_Start+0x15c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d111      	bne.n	800313e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b06      	cmp	r3, #6
 800312a:	d010      	beq.n	800314e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	e007      	b.n	800314e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40010000 	.word	0x40010000
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000

0800316c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e097      	b.n	80032b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fe f9b1 	bl	80014fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031b0:	f023 0307 	bic.w	r3, r3, #7
 80031b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 fae1 	bl	8003788 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	4313      	orrs	r3, r2
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800320c:	f023 030c 	bic.w	r3, r3, #12
 8003210:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003218:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800321c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	4313      	orrs	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	011a      	lsls	r2, r3, #4
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	031b      	lsls	r3, r3, #12
 800323c:	4313      	orrs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	4313      	orrs	r3, r2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d110      	bne.n	800330a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ee:	7b7b      	ldrb	r3, [r7, #13]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d001      	beq.n	80032f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e069      	b.n	80033cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003308:	e031      	b.n	800336e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d110      	bne.n	8003332 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003310:	7bbb      	ldrb	r3, [r7, #14]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003316:	7b3b      	ldrb	r3, [r7, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e055      	b.n	80033cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003330:	e01d      	b.n	800336e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d108      	bne.n	800334a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800333e:	7b7b      	ldrb	r3, [r7, #13]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e03e      	b.n	80033cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_TIM_Encoder_Start+0xc4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d008      	beq.n	800338c <HAL_TIM_Encoder_Start+0xd4>
 800337a:	e00f      	b.n	800339c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fc17 	bl	8003bb8 <TIM_CCxChannelCmd>
      break;
 800338a:	e016      	b.n	80033ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	2104      	movs	r1, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fc0f 	bl	8003bb8 <TIM_CCxChannelCmd>
      break;
 800339a:	e00e      	b.n	80033ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fc07 	bl	8003bb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2104      	movs	r1, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fc00 	bl	8003bb8 <TIM_CCxChannelCmd>
      break;
 80033b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0202 	mvn.w	r2, #2
 8003408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f994 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f986 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f997 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0204 	mvn.w	r2, #4
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f96e 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f960 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f971 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0208 	mvn.w	r2, #8
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f948 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f93a 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f94b 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f922 	bl	800374c <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f914 	bl	8003738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f925 	bl	8003760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0201 	mvn.w	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fdea 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fbc8 	bl	8003cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8f6 	bl	8003774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0220 	mvn.w	r2, #32
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb9a 	bl	8003ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0ae      	b.n	8003730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	f200 809f 	bhi.w	8003720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	08003721 	.word	0x08003721
 80035f0:	08003721 	.word	0x08003721
 80035f4:	08003721 	.word	0x08003721
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	08003721 	.word	0x08003721
 8003600:	08003721 	.word	0x08003721
 8003604:	08003721 	.word	0x08003721
 8003608:	0800369f 	.word	0x0800369f
 800360c:	08003721 	.word	0x08003721
 8003610:	08003721 	.word	0x08003721
 8003614:	08003721 	.word	0x08003721
 8003618:	080036df 	.word	0x080036df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f93c 	bl	80038a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0208 	orr.w	r2, r2, #8
 8003636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6999      	ldr	r1, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	619a      	str	r2, [r3, #24]
      break;
 800365a:	e064      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f982 	bl	800396c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6999      	ldr	r1, [r3, #24]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	021a      	lsls	r2, r3, #8
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	619a      	str	r2, [r3, #24]
      break;
 800369c:	e043      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f9cd 	bl	8003a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0208 	orr.w	r2, r2, #8
 80036b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0204 	bic.w	r2, r2, #4
 80036c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69d9      	ldr	r1, [r3, #28]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	61da      	str	r2, [r3, #28]
      break;
 80036dc:	e023      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fa17 	bl	8003b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69d9      	ldr	r1, [r3, #28]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	021a      	lsls	r2, r3, #8
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	61da      	str	r2, [r3, #28]
      break;
 800371e:	e002      	b.n	8003726 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
      break;
 8003724:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3a      	ldr	r2, [pc, #232]	@ (8003884 <TIM_Base_SetConfig+0xfc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a6:	d00b      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a37      	ldr	r2, [pc, #220]	@ (8003888 <TIM_Base_SetConfig+0x100>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a36      	ldr	r2, [pc, #216]	@ (800388c <TIM_Base_SetConfig+0x104>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_Base_SetConfig+0x38>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <TIM_Base_SetConfig+0x108>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d108      	bne.n	80037d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003884 <TIM_Base_SetConfig+0xfc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01b      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e0:	d017      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <TIM_Base_SetConfig+0x100>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a27      	ldr	r2, [pc, #156]	@ (800388c <TIM_Base_SetConfig+0x104>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00f      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <TIM_Base_SetConfig+0x108>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a25      	ldr	r2, [pc, #148]	@ (8003894 <TIM_Base_SetConfig+0x10c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a24      	ldr	r2, [pc, #144]	@ (8003898 <TIM_Base_SetConfig+0x110>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_Base_SetConfig+0x8a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a23      	ldr	r2, [pc, #140]	@ (800389c <TIM_Base_SetConfig+0x114>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0e      	ldr	r2, [pc, #56]	@ (8003884 <TIM_Base_SetConfig+0xfc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d103      	bne.n	8003858 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d105      	bne.n	8003876 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]
  }
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0201 	bic.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 0302 	bic.w	r3, r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <TIM_OC1_SetConfig+0xc8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10c      	bne.n	8003916 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0308 	bic.w	r3, r3, #8
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a13      	ldr	r2, [pc, #76]	@ (8003968 <TIM_OC1_SetConfig+0xc8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40010000 	.word	0x40010000

0800396c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 0210 	bic.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0320 	bic.w	r3, r3, #32
 80039b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <TIM_OC2_SetConfig+0xd4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10d      	bne.n	80039e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a15      	ldr	r2, [pc, #84]	@ (8003a40 <TIM_OC2_SetConfig+0xd4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d113      	bne.n	8003a18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40010000 	.word	0x40010000

08003a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <TIM_OC3_SetConfig+0xd0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10d      	bne.n	8003abe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <TIM_OC3_SetConfig+0xd0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d113      	bne.n	8003aee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40010000 	.word	0x40010000

08003b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	031b      	lsls	r3, r3, #12
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <TIM_OC4_SetConfig+0x9c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d109      	bne.n	8003b8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	019b      	lsls	r3, r3, #6
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2201      	movs	r2, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	401a      	ands	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e050      	b.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c68:	d013      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a13      	ldr	r2, [pc, #76]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10c      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40014000 	.word	0x40014000

08003ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e042      	b.n	8003da0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fd7c 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	@ 0x24
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f82b 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dac:	b0c0      	sub	sp, #256	@ 0x100
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	68d9      	ldr	r1, [r3, #12]
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	ea40 0301 	orr.w	r3, r0, r1
 8003dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e00:	f021 010c 	bic.w	r1, r1, #12
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e22:	6999      	ldr	r1, [r3, #24]
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	ea40 0301 	orr.w	r3, r0, r1
 8003e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b8f      	ldr	r3, [pc, #572]	@ (8004074 <UART_SetConfig+0x2cc>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d005      	beq.n	8003e48 <UART_SetConfig+0xa0>
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b8d      	ldr	r3, [pc, #564]	@ (8004078 <UART_SetConfig+0x2d0>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d104      	bne.n	8003e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7fe ffca 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e50:	e003      	b.n	8003e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e52:	f7fe ffb1 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003e56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e64:	f040 810c 	bne.w	8004080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	1891      	adds	r1, r2, r2
 8003e80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e82:	415b      	adcs	r3, r3
 8003e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	eb12 0801 	adds.w	r8, r2, r1
 8003e90:	4629      	mov	r1, r5
 8003e92:	eb43 0901 	adc.w	r9, r3, r1
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eaa:	4690      	mov	r8, r2
 8003eac:	4699      	mov	r9, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	eb18 0303 	adds.w	r3, r8, r3
 8003eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003eb8:	462b      	mov	r3, r5
 8003eba:	eb49 0303 	adc.w	r3, r9, r3
 8003ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ece:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	18db      	adds	r3, r3, r3
 8003eda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003edc:	4613      	mov	r3, r2
 8003ede:	eb42 0303 	adc.w	r3, r2, r3
 8003ee2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003eec:	f7fc f974 	bl	80001d8 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4b61      	ldr	r3, [pc, #388]	@ (800407c <UART_SetConfig+0x2d4>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	011c      	lsls	r4, r3, #4
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f20:	4641      	mov	r1, r8
 8003f22:	eb12 0a01 	adds.w	sl, r2, r1
 8003f26:	4649      	mov	r1, r9
 8003f28:	eb43 0b01 	adc.w	fp, r3, r1
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f40:	4692      	mov	sl, r2
 8003f42:	469b      	mov	fp, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	eb1a 0303 	adds.w	r3, sl, r3
 8003f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	eb4b 0303 	adc.w	r3, fp, r3
 8003f54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	18db      	adds	r3, r3, r3
 8003f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f72:	4613      	mov	r3, r2
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f82:	f7fc f929 	bl	80001d8 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800407c <UART_SetConfig+0x2d4>)
 8003f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2264      	movs	r2, #100	@ 0x64
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	1acb      	subs	r3, r1, r3
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fa2:	4b36      	ldr	r3, [pc, #216]	@ (800407c <UART_SetConfig+0x2d4>)
 8003fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fb0:	441c      	add	r4, r3
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	1851      	adds	r1, r2, r1
 8003fd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fda:	4649      	mov	r1, r9
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fec:	4659      	mov	r1, fp
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4642      	mov	r2, r8
 8004002:	189b      	adds	r3, r3, r2
 8004004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004008:	464b      	mov	r3, r9
 800400a:	460a      	mov	r2, r1
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004020:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004028:	460b      	mov	r3, r1
 800402a:	18db      	adds	r3, r3, r3
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402e:	4613      	mov	r3, r2
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800403a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800403e:	f7fc f8cb 	bl	80001d8 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4b0d      	ldr	r3, [pc, #52]	@ (800407c <UART_SetConfig+0x2d4>)
 8004048:	fba3 1302 	umull	r1, r3, r3, r2
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	2164      	movs	r1, #100	@ 0x64
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	3332      	adds	r3, #50	@ 0x32
 800405a:	4a08      	ldr	r2, [pc, #32]	@ (800407c <UART_SetConfig+0x2d4>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	f003 0207 	and.w	r2, r3, #7
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4422      	add	r2, r4
 800406e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004070:	e106      	b.n	8004280 <UART_SetConfig+0x4d8>
 8004072:	bf00      	nop
 8004074:	40011000 	.word	0x40011000
 8004078:	40011400 	.word	0x40011400
 800407c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800408a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800408e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004092:	4642      	mov	r2, r8
 8004094:	464b      	mov	r3, r9
 8004096:	1891      	adds	r1, r2, r2
 8004098:	6239      	str	r1, [r7, #32]
 800409a:	415b      	adcs	r3, r3
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
 800409e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040a2:	4641      	mov	r1, r8
 80040a4:	1854      	adds	r4, r2, r1
 80040a6:	4649      	mov	r1, r9
 80040a8:	eb43 0501 	adc.w	r5, r3, r1
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	4643      	mov	r3, r8
 80040c2:	18e3      	adds	r3, r4, r3
 80040c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040c8:	464b      	mov	r3, r9
 80040ca:	eb45 0303 	adc.w	r3, r5, r3
 80040ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040ee:	4629      	mov	r1, r5
 80040f0:	008b      	lsls	r3, r1, #2
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f8:	4621      	mov	r1, r4
 80040fa:	008a      	lsls	r2, r1, #2
 80040fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004100:	f7fc f86a 	bl	80001d8 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4b60      	ldr	r3, [pc, #384]	@ (800428c <UART_SetConfig+0x4e4>)
 800410a:	fba3 2302 	umull	r2, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	011c      	lsls	r4, r3, #4
 8004112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800411c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	1891      	adds	r1, r2, r2
 800412a:	61b9      	str	r1, [r7, #24]
 800412c:	415b      	adcs	r3, r3
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004134:	4641      	mov	r1, r8
 8004136:	1851      	adds	r1, r2, r1
 8004138:	6139      	str	r1, [r7, #16]
 800413a:	4649      	mov	r1, r9
 800413c:	414b      	adcs	r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	00cb      	lsls	r3, r1, #3
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004156:	4651      	mov	r1, sl
 8004158:	00ca      	lsls	r2, r1, #3
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	4603      	mov	r3, r0
 8004160:	4642      	mov	r2, r8
 8004162:	189b      	adds	r3, r3, r2
 8004164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004168:	464b      	mov	r3, r9
 800416a:	460a      	mov	r2, r1
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800417e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800418c:	4649      	mov	r1, r9
 800418e:	008b      	lsls	r3, r1, #2
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004196:	4641      	mov	r1, r8
 8004198:	008a      	lsls	r2, r1, #2
 800419a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800419e:	f7fc f81b 	bl	80001d8 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	4b38      	ldr	r3, [pc, #224]	@ (800428c <UART_SetConfig+0x4e4>)
 80041aa:	fba3 2301 	umull	r2, r3, r3, r1
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2264      	movs	r2, #100	@ 0x64
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	1acb      	subs	r3, r1, r3
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	3332      	adds	r3, #50	@ 0x32
 80041bc:	4a33      	ldr	r2, [pc, #204]	@ (800428c <UART_SetConfig+0x4e4>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041c8:	441c      	add	r4, r3
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80041d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	415b      	adcs	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e8:	4641      	mov	r1, r8
 80041ea:	1851      	adds	r1, r2, r1
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	4649      	mov	r1, r9
 80041f0:	414b      	adcs	r3, r1
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004200:	4659      	mov	r1, fp
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4651      	mov	r1, sl
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4651      	mov	r1, sl
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4642      	mov	r2, r8
 8004216:	189b      	adds	r3, r3, r2
 8004218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800421a:	464b      	mov	r3, r9
 800421c:	460a      	mov	r2, r1
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	663b      	str	r3, [r7, #96]	@ 0x60
 800422e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800423c:	4649      	mov	r1, r9
 800423e:	008b      	lsls	r3, r1, #2
 8004240:	4641      	mov	r1, r8
 8004242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004246:	4641      	mov	r1, r8
 8004248:	008a      	lsls	r2, r1, #2
 800424a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800424e:	f7fb ffc3 	bl	80001d8 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <UART_SetConfig+0x4e4>)
 8004258:	fba3 1302 	umull	r1, r3, r3, r2
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	2164      	movs	r1, #100	@ 0x64
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	3332      	adds	r3, #50	@ 0x32
 800426a:	4a08      	ldr	r2, [pc, #32]	@ (800428c <UART_SetConfig+0x4e4>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4422      	add	r2, r4
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004286:	46bd      	mov	sp, r7
 8004288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428c:	51eb851f 	.word	0x51eb851f

08004290 <memset>:
 8004290:	4402      	add	r2, r0
 8004292:	4603      	mov	r3, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	f803 1b01 	strb.w	r1, [r3], #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <__libc_init_array>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	4d0d      	ldr	r5, [pc, #52]	@ (80042d8 <__libc_init_array+0x38>)
 80042a4:	4c0d      	ldr	r4, [pc, #52]	@ (80042dc <__libc_init_array+0x3c>)
 80042a6:	1b64      	subs	r4, r4, r5
 80042a8:	10a4      	asrs	r4, r4, #2
 80042aa:	2600      	movs	r6, #0
 80042ac:	42a6      	cmp	r6, r4
 80042ae:	d109      	bne.n	80042c4 <__libc_init_array+0x24>
 80042b0:	4d0b      	ldr	r5, [pc, #44]	@ (80042e0 <__libc_init_array+0x40>)
 80042b2:	4c0c      	ldr	r4, [pc, #48]	@ (80042e4 <__libc_init_array+0x44>)
 80042b4:	f000 f818 	bl	80042e8 <_init>
 80042b8:	1b64      	subs	r4, r4, r5
 80042ba:	10a4      	asrs	r4, r4, #2
 80042bc:	2600      	movs	r6, #0
 80042be:	42a6      	cmp	r6, r4
 80042c0:	d105      	bne.n	80042ce <__libc_init_array+0x2e>
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c8:	4798      	blx	r3
 80042ca:	3601      	adds	r6, #1
 80042cc:	e7ee      	b.n	80042ac <__libc_init_array+0xc>
 80042ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d2:	4798      	blx	r3
 80042d4:	3601      	adds	r6, #1
 80042d6:	e7f2      	b.n	80042be <__libc_init_array+0x1e>
 80042d8:	08004320 	.word	0x08004320
 80042dc:	08004320 	.word	0x08004320
 80042e0:	08004320 	.word	0x08004320
 80042e4:	08004324 	.word	0x08004324

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
